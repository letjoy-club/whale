# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/*.graphqls
  - graph/*.graphql

# Where should the generated server code go?
exec:
  filename: graph/generated.go
  package: graph

# Uncomment to enable federation
federation:
  filename: graph/federation.go
  package: graph
  version: 2

# Where should any generated models go?
model:
  filename: pkg/models/models_gen.go
  package: models

# Where should the resolver implementations go?
resolver:
  layout: follow-schema
  dir: graph
  package: graph

# Optional: turn on use ` + "`" + `gqlgen:"fieldName"` + "`" + ` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: turn off to make struct-type struct fields not use pointers
# e.g. type Thing struct { FieldA OtherThing } instead of { FieldA *OtherThing }
# struct_fields_always_pointers: true

# Optional: turn off to make resolvers return values instead of pointers for structs
# resolvers_always_return_pointers: true

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
#  - "whale/graph/model"

models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
  Matching:
    model:
      - whale/pkg/models.Matching
  MatchingOfTopic:
    model:
      - whale/pkg/models.Matching
  MatchingPreview:
    model:
      - whale/pkg/models.Matching
  MatchingResult:
    model:
      - whale/pkg/models.MatchingResult
  MatchingQuota:
    model:
      - whale/pkg/models.MatchingQuota
  MatchingResultConfirmAction:
    model:
      - whale/pkg/models.MatchingResultConfirmAction
  MatchingInvitation:
    model:
      - whale/pkg/models.MatchingInvitation
  GraphQLPaginator:
    model:
      - github.com/letjoy-club/mida-tool/graphqlutil.GraphQLPaginator
  User:
    fields:
      matchingQuota:
        resolver: true
  Topic:
    fields:
      matchingNum:
        resolver: true
      fuzzyMatchingNum:
        resolver: true
      recentUsers:
        resolver: true
  HotTopicsInArea:
    model:
      - whale/pkg/models.HotTopicsInArea
  TopicMetrics:
    model:
      - whale/pkg/models.TopicMetrics
  CityTopics:
    model:
      - whale/pkg/models.CityTopics
