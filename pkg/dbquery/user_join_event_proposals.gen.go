// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserJoinEventProposal(db *gorm.DB, opts ...gen.DOOption) userJoinEventProposal {
	_userJoinEventProposal := userJoinEventProposal{}

	_userJoinEventProposal.userJoinEventProposalDo.UseDB(db, opts...)
	_userJoinEventProposal.userJoinEventProposalDo.UseModel(&models.UserJoinEventProposal{})

	tableName := _userJoinEventProposal.userJoinEventProposalDo.TableName()
	_userJoinEventProposal.ALL = field.NewAsterisk(tableName)
	_userJoinEventProposal.ID = field.NewInt(tableName, "id")
	_userJoinEventProposal.EventID = field.NewString(tableName, "event_id")
	_userJoinEventProposal.UserID = field.NewString(tableName, "user_id")
	_userJoinEventProposal.State = field.NewString(tableName, "state")
	_userJoinEventProposal.LeftAt = field.NewTime(tableName, "left_at")
	_userJoinEventProposal.CreatedAt = field.NewTime(tableName, "created_at")

	_userJoinEventProposal.fillFieldMap()

	return _userJoinEventProposal
}

type userJoinEventProposal struct {
	userJoinEventProposalDo userJoinEventProposalDo

	ALL       field.Asterisk
	ID        field.Int
	EventID   field.String
	UserID    field.String
	State     field.String
	LeftAt    field.Time
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (u userJoinEventProposal) Table(newTableName string) *userJoinEventProposal {
	u.userJoinEventProposalDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userJoinEventProposal) As(alias string) *userJoinEventProposal {
	u.userJoinEventProposalDo.DO = *(u.userJoinEventProposalDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userJoinEventProposal) updateTableName(table string) *userJoinEventProposal {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.EventID = field.NewString(table, "event_id")
	u.UserID = field.NewString(table, "user_id")
	u.State = field.NewString(table, "state")
	u.LeftAt = field.NewTime(table, "left_at")
	u.CreatedAt = field.NewTime(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *userJoinEventProposal) WithContext(ctx context.Context) IUserJoinEventProposalDo {
	return u.userJoinEventProposalDo.WithContext(ctx)
}

func (u userJoinEventProposal) TableName() string { return u.userJoinEventProposalDo.TableName() }

func (u userJoinEventProposal) Alias() string { return u.userJoinEventProposalDo.Alias() }

func (u *userJoinEventProposal) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userJoinEventProposal) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 6)
	u.fieldMap["id"] = u.ID
	u.fieldMap["event_id"] = u.EventID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["state"] = u.State
	u.fieldMap["left_at"] = u.LeftAt
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u userJoinEventProposal) clone(db *gorm.DB) userJoinEventProposal {
	u.userJoinEventProposalDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userJoinEventProposal) replaceDB(db *gorm.DB) userJoinEventProposal {
	u.userJoinEventProposalDo.ReplaceDB(db)
	return u
}

type userJoinEventProposalDo struct{ gen.DO }

type IUserJoinEventProposalDo interface {
	gen.SubQuery
	Debug() IUserJoinEventProposalDo
	WithContext(ctx context.Context) IUserJoinEventProposalDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserJoinEventProposalDo
	WriteDB() IUserJoinEventProposalDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserJoinEventProposalDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserJoinEventProposalDo
	Not(conds ...gen.Condition) IUserJoinEventProposalDo
	Or(conds ...gen.Condition) IUserJoinEventProposalDo
	Select(conds ...field.Expr) IUserJoinEventProposalDo
	Where(conds ...gen.Condition) IUserJoinEventProposalDo
	Order(conds ...field.Expr) IUserJoinEventProposalDo
	Distinct(cols ...field.Expr) IUserJoinEventProposalDo
	Omit(cols ...field.Expr) IUserJoinEventProposalDo
	Join(table schema.Tabler, on ...field.Expr) IUserJoinEventProposalDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserJoinEventProposalDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserJoinEventProposalDo
	Group(cols ...field.Expr) IUserJoinEventProposalDo
	Having(conds ...gen.Condition) IUserJoinEventProposalDo
	Limit(limit int) IUserJoinEventProposalDo
	Offset(offset int) IUserJoinEventProposalDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserJoinEventProposalDo
	Unscoped() IUserJoinEventProposalDo
	Create(values ...*models.UserJoinEventProposal) error
	CreateInBatches(values []*models.UserJoinEventProposal, batchSize int) error
	Save(values ...*models.UserJoinEventProposal) error
	First() (*models.UserJoinEventProposal, error)
	Take() (*models.UserJoinEventProposal, error)
	Last() (*models.UserJoinEventProposal, error)
	Find() ([]*models.UserJoinEventProposal, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserJoinEventProposal, err error)
	FindInBatches(result *[]*models.UserJoinEventProposal, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.UserJoinEventProposal) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserJoinEventProposalDo
	Assign(attrs ...field.AssignExpr) IUserJoinEventProposalDo
	Joins(fields ...field.RelationField) IUserJoinEventProposalDo
	Preload(fields ...field.RelationField) IUserJoinEventProposalDo
	FirstOrInit() (*models.UserJoinEventProposal, error)
	FirstOrCreate() (*models.UserJoinEventProposal, error)
	FindByPage(offset int, limit int) (result []*models.UserJoinEventProposal, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserJoinEventProposalDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userJoinEventProposalDo) Debug() IUserJoinEventProposalDo {
	return u.withDO(u.DO.Debug())
}

func (u userJoinEventProposalDo) WithContext(ctx context.Context) IUserJoinEventProposalDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userJoinEventProposalDo) ReadDB() IUserJoinEventProposalDo {
	return u.Clauses(dbresolver.Read)
}

func (u userJoinEventProposalDo) WriteDB() IUserJoinEventProposalDo {
	return u.Clauses(dbresolver.Write)
}

func (u userJoinEventProposalDo) Session(config *gorm.Session) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Session(config))
}

func (u userJoinEventProposalDo) Clauses(conds ...clause.Expression) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userJoinEventProposalDo) Returning(value interface{}, columns ...string) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userJoinEventProposalDo) Not(conds ...gen.Condition) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userJoinEventProposalDo) Or(conds ...gen.Condition) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userJoinEventProposalDo) Select(conds ...field.Expr) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userJoinEventProposalDo) Where(conds ...gen.Condition) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userJoinEventProposalDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserJoinEventProposalDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userJoinEventProposalDo) Order(conds ...field.Expr) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userJoinEventProposalDo) Distinct(cols ...field.Expr) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userJoinEventProposalDo) Omit(cols ...field.Expr) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userJoinEventProposalDo) Join(table schema.Tabler, on ...field.Expr) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userJoinEventProposalDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserJoinEventProposalDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userJoinEventProposalDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserJoinEventProposalDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userJoinEventProposalDo) Group(cols ...field.Expr) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userJoinEventProposalDo) Having(conds ...gen.Condition) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userJoinEventProposalDo) Limit(limit int) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userJoinEventProposalDo) Offset(offset int) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userJoinEventProposalDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userJoinEventProposalDo) Unscoped() IUserJoinEventProposalDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userJoinEventProposalDo) Create(values ...*models.UserJoinEventProposal) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userJoinEventProposalDo) CreateInBatches(values []*models.UserJoinEventProposal, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userJoinEventProposalDo) Save(values ...*models.UserJoinEventProposal) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userJoinEventProposalDo) First() (*models.UserJoinEventProposal, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserJoinEventProposal), nil
	}
}

func (u userJoinEventProposalDo) Take() (*models.UserJoinEventProposal, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserJoinEventProposal), nil
	}
}

func (u userJoinEventProposalDo) Last() (*models.UserJoinEventProposal, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserJoinEventProposal), nil
	}
}

func (u userJoinEventProposalDo) Find() ([]*models.UserJoinEventProposal, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserJoinEventProposal), err
}

func (u userJoinEventProposalDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserJoinEventProposal, err error) {
	buf := make([]*models.UserJoinEventProposal, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userJoinEventProposalDo) FindInBatches(result *[]*models.UserJoinEventProposal, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userJoinEventProposalDo) Attrs(attrs ...field.AssignExpr) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userJoinEventProposalDo) Assign(attrs ...field.AssignExpr) IUserJoinEventProposalDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userJoinEventProposalDo) Joins(fields ...field.RelationField) IUserJoinEventProposalDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userJoinEventProposalDo) Preload(fields ...field.RelationField) IUserJoinEventProposalDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userJoinEventProposalDo) FirstOrInit() (*models.UserJoinEventProposal, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserJoinEventProposal), nil
	}
}

func (u userJoinEventProposalDo) FirstOrCreate() (*models.UserJoinEventProposal, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserJoinEventProposal), nil
	}
}

func (u userJoinEventProposalDo) FindByPage(offset int, limit int) (result []*models.UserJoinEventProposal, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userJoinEventProposalDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userJoinEventProposalDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userJoinEventProposalDo) Delete(models ...*models.UserJoinEventProposal) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userJoinEventProposalDo) withDO(do gen.Dao) *userJoinEventProposalDo {
	u.DO = *do.(*gen.DO)
	return u
}
