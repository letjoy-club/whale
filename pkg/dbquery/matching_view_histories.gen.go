// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMatchingViewHistory(db *gorm.DB, opts ...gen.DOOption) matchingViewHistory {
	_matchingViewHistory := matchingViewHistory{}

	_matchingViewHistory.matchingViewHistoryDo.UseDB(db, opts...)
	_matchingViewHistory.matchingViewHistoryDo.UseModel(&models.MatchingViewHistory{})

	tableName := _matchingViewHistory.matchingViewHistoryDo.TableName()
	_matchingViewHistory.ALL = field.NewAsterisk(tableName)
	_matchingViewHistory.ID = field.NewInt(tableName, "id")
	_matchingViewHistory.ViewedMatchingID = field.NewString(tableName, "viewed_matching_id")
	_matchingViewHistory.UserID = field.NewString(tableName, "user_id")
	_matchingViewHistory.CreatedAt = field.NewTime(tableName, "created_at")

	_matchingViewHistory.fillFieldMap()

	return _matchingViewHistory
}

type matchingViewHistory struct {
	matchingViewHistoryDo matchingViewHistoryDo

	ALL              field.Asterisk
	ID               field.Int
	ViewedMatchingID field.String
	UserID           field.String
	CreatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (m matchingViewHistory) Table(newTableName string) *matchingViewHistory {
	m.matchingViewHistoryDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m matchingViewHistory) As(alias string) *matchingViewHistory {
	m.matchingViewHistoryDo.DO = *(m.matchingViewHistoryDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *matchingViewHistory) updateTableName(table string) *matchingViewHistory {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt(table, "id")
	m.ViewedMatchingID = field.NewString(table, "viewed_matching_id")
	m.UserID = field.NewString(table, "user_id")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *matchingViewHistory) WithContext(ctx context.Context) IMatchingViewHistoryDo {
	return m.matchingViewHistoryDo.WithContext(ctx)
}

func (m matchingViewHistory) TableName() string { return m.matchingViewHistoryDo.TableName() }

func (m matchingViewHistory) Alias() string { return m.matchingViewHistoryDo.Alias() }

func (m *matchingViewHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *matchingViewHistory) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["id"] = m.ID
	m.fieldMap["viewed_matching_id"] = m.ViewedMatchingID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m matchingViewHistory) clone(db *gorm.DB) matchingViewHistory {
	m.matchingViewHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m matchingViewHistory) replaceDB(db *gorm.DB) matchingViewHistory {
	m.matchingViewHistoryDo.ReplaceDB(db)
	return m
}

type matchingViewHistoryDo struct{ gen.DO }

type IMatchingViewHistoryDo interface {
	gen.SubQuery
	Debug() IMatchingViewHistoryDo
	WithContext(ctx context.Context) IMatchingViewHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatchingViewHistoryDo
	WriteDB() IMatchingViewHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatchingViewHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatchingViewHistoryDo
	Not(conds ...gen.Condition) IMatchingViewHistoryDo
	Or(conds ...gen.Condition) IMatchingViewHistoryDo
	Select(conds ...field.Expr) IMatchingViewHistoryDo
	Where(conds ...gen.Condition) IMatchingViewHistoryDo
	Order(conds ...field.Expr) IMatchingViewHistoryDo
	Distinct(cols ...field.Expr) IMatchingViewHistoryDo
	Omit(cols ...field.Expr) IMatchingViewHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IMatchingViewHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingViewHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatchingViewHistoryDo
	Group(cols ...field.Expr) IMatchingViewHistoryDo
	Having(conds ...gen.Condition) IMatchingViewHistoryDo
	Limit(limit int) IMatchingViewHistoryDo
	Offset(offset int) IMatchingViewHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingViewHistoryDo
	Unscoped() IMatchingViewHistoryDo
	Create(values ...*models.MatchingViewHistory) error
	CreateInBatches(values []*models.MatchingViewHistory, batchSize int) error
	Save(values ...*models.MatchingViewHistory) error
	First() (*models.MatchingViewHistory, error)
	Take() (*models.MatchingViewHistory, error)
	Last() (*models.MatchingViewHistory, error)
	Find() ([]*models.MatchingViewHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingViewHistory, err error)
	FindInBatches(result *[]*models.MatchingViewHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MatchingViewHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatchingViewHistoryDo
	Assign(attrs ...field.AssignExpr) IMatchingViewHistoryDo
	Joins(fields ...field.RelationField) IMatchingViewHistoryDo
	Preload(fields ...field.RelationField) IMatchingViewHistoryDo
	FirstOrInit() (*models.MatchingViewHistory, error)
	FirstOrCreate() (*models.MatchingViewHistory, error)
	FindByPage(offset int, limit int) (result []*models.MatchingViewHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatchingViewHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matchingViewHistoryDo) Debug() IMatchingViewHistoryDo {
	return m.withDO(m.DO.Debug())
}

func (m matchingViewHistoryDo) WithContext(ctx context.Context) IMatchingViewHistoryDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchingViewHistoryDo) ReadDB() IMatchingViewHistoryDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchingViewHistoryDo) WriteDB() IMatchingViewHistoryDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchingViewHistoryDo) Session(config *gorm.Session) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchingViewHistoryDo) Clauses(conds ...clause.Expression) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchingViewHistoryDo) Returning(value interface{}, columns ...string) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchingViewHistoryDo) Not(conds ...gen.Condition) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchingViewHistoryDo) Or(conds ...gen.Condition) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchingViewHistoryDo) Select(conds ...field.Expr) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchingViewHistoryDo) Where(conds ...gen.Condition) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchingViewHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMatchingViewHistoryDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m matchingViewHistoryDo) Order(conds ...field.Expr) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchingViewHistoryDo) Distinct(cols ...field.Expr) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchingViewHistoryDo) Omit(cols ...field.Expr) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchingViewHistoryDo) Join(table schema.Tabler, on ...field.Expr) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchingViewHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingViewHistoryDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchingViewHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatchingViewHistoryDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchingViewHistoryDo) Group(cols ...field.Expr) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchingViewHistoryDo) Having(conds ...gen.Condition) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchingViewHistoryDo) Limit(limit int) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchingViewHistoryDo) Offset(offset int) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchingViewHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchingViewHistoryDo) Unscoped() IMatchingViewHistoryDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchingViewHistoryDo) Create(values ...*models.MatchingViewHistory) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchingViewHistoryDo) CreateInBatches(values []*models.MatchingViewHistory, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchingViewHistoryDo) Save(values ...*models.MatchingViewHistory) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchingViewHistoryDo) First() (*models.MatchingViewHistory, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingViewHistory), nil
	}
}

func (m matchingViewHistoryDo) Take() (*models.MatchingViewHistory, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingViewHistory), nil
	}
}

func (m matchingViewHistoryDo) Last() (*models.MatchingViewHistory, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingViewHistory), nil
	}
}

func (m matchingViewHistoryDo) Find() ([]*models.MatchingViewHistory, error) {
	result, err := m.DO.Find()
	return result.([]*models.MatchingViewHistory), err
}

func (m matchingViewHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingViewHistory, err error) {
	buf := make([]*models.MatchingViewHistory, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchingViewHistoryDo) FindInBatches(result *[]*models.MatchingViewHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchingViewHistoryDo) Attrs(attrs ...field.AssignExpr) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchingViewHistoryDo) Assign(attrs ...field.AssignExpr) IMatchingViewHistoryDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchingViewHistoryDo) Joins(fields ...field.RelationField) IMatchingViewHistoryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchingViewHistoryDo) Preload(fields ...field.RelationField) IMatchingViewHistoryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchingViewHistoryDo) FirstOrInit() (*models.MatchingViewHistory, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingViewHistory), nil
	}
}

func (m matchingViewHistoryDo) FirstOrCreate() (*models.MatchingViewHistory, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingViewHistory), nil
	}
}

func (m matchingViewHistoryDo) FindByPage(offset int, limit int) (result []*models.MatchingViewHistory, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchingViewHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchingViewHistoryDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchingViewHistoryDo) Delete(models ...*models.MatchingViewHistory) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchingViewHistoryDo) withDO(do gen.Dao) *matchingViewHistoryDo {
	m.DO = *do.(*gen.DO)
	return m
}
