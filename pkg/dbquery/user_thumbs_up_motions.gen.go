// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserThumbsUpMotion(db *gorm.DB, opts ...gen.DOOption) userThumbsUpMotion {
	_userThumbsUpMotion := userThumbsUpMotion{}

	_userThumbsUpMotion.userThumbsUpMotionDo.UseDB(db, opts...)
	_userThumbsUpMotion.userThumbsUpMotionDo.UseModel(&models.UserThumbsUpMotion{})

	tableName := _userThumbsUpMotion.userThumbsUpMotionDo.TableName()
	_userThumbsUpMotion.ALL = field.NewAsterisk(tableName)
	_userThumbsUpMotion.ID = field.NewInt(tableName, "id")
	_userThumbsUpMotion.ToMotionID = field.NewString(tableName, "to_motion_id")
	_userThumbsUpMotion.ToUserID = field.NewString(tableName, "to_user_id")
	_userThumbsUpMotion.UserID = field.NewString(tableName, "user_id")
	_userThumbsUpMotion.CreatedAt = field.NewTime(tableName, "created_at")

	_userThumbsUpMotion.fillFieldMap()

	return _userThumbsUpMotion
}

type userThumbsUpMotion struct {
	userThumbsUpMotionDo userThumbsUpMotionDo

	ALL        field.Asterisk
	ID         field.Int
	ToMotionID field.String
	ToUserID   field.String
	UserID     field.String
	CreatedAt  field.Time

	fieldMap map[string]field.Expr
}

func (u userThumbsUpMotion) Table(newTableName string) *userThumbsUpMotion {
	u.userThumbsUpMotionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userThumbsUpMotion) As(alias string) *userThumbsUpMotion {
	u.userThumbsUpMotionDo.DO = *(u.userThumbsUpMotionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userThumbsUpMotion) updateTableName(table string) *userThumbsUpMotion {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.ToMotionID = field.NewString(table, "to_motion_id")
	u.ToUserID = field.NewString(table, "to_user_id")
	u.UserID = field.NewString(table, "user_id")
	u.CreatedAt = field.NewTime(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *userThumbsUpMotion) WithContext(ctx context.Context) IUserThumbsUpMotionDo {
	return u.userThumbsUpMotionDo.WithContext(ctx)
}

func (u userThumbsUpMotion) TableName() string { return u.userThumbsUpMotionDo.TableName() }

func (u userThumbsUpMotion) Alias() string { return u.userThumbsUpMotionDo.Alias() }

func (u *userThumbsUpMotion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userThumbsUpMotion) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["to_motion_id"] = u.ToMotionID
	u.fieldMap["to_user_id"] = u.ToUserID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u userThumbsUpMotion) clone(db *gorm.DB) userThumbsUpMotion {
	u.userThumbsUpMotionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userThumbsUpMotion) replaceDB(db *gorm.DB) userThumbsUpMotion {
	u.userThumbsUpMotionDo.ReplaceDB(db)
	return u
}

type userThumbsUpMotionDo struct{ gen.DO }

type IUserThumbsUpMotionDo interface {
	gen.SubQuery
	Debug() IUserThumbsUpMotionDo
	WithContext(ctx context.Context) IUserThumbsUpMotionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserThumbsUpMotionDo
	WriteDB() IUserThumbsUpMotionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserThumbsUpMotionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserThumbsUpMotionDo
	Not(conds ...gen.Condition) IUserThumbsUpMotionDo
	Or(conds ...gen.Condition) IUserThumbsUpMotionDo
	Select(conds ...field.Expr) IUserThumbsUpMotionDo
	Where(conds ...gen.Condition) IUserThumbsUpMotionDo
	Order(conds ...field.Expr) IUserThumbsUpMotionDo
	Distinct(cols ...field.Expr) IUserThumbsUpMotionDo
	Omit(cols ...field.Expr) IUserThumbsUpMotionDo
	Join(table schema.Tabler, on ...field.Expr) IUserThumbsUpMotionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserThumbsUpMotionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserThumbsUpMotionDo
	Group(cols ...field.Expr) IUserThumbsUpMotionDo
	Having(conds ...gen.Condition) IUserThumbsUpMotionDo
	Limit(limit int) IUserThumbsUpMotionDo
	Offset(offset int) IUserThumbsUpMotionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserThumbsUpMotionDo
	Unscoped() IUserThumbsUpMotionDo
	Create(values ...*models.UserThumbsUpMotion) error
	CreateInBatches(values []*models.UserThumbsUpMotion, batchSize int) error
	Save(values ...*models.UserThumbsUpMotion) error
	First() (*models.UserThumbsUpMotion, error)
	Take() (*models.UserThumbsUpMotion, error)
	Last() (*models.UserThumbsUpMotion, error)
	Find() ([]*models.UserThumbsUpMotion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserThumbsUpMotion, err error)
	FindInBatches(result *[]*models.UserThumbsUpMotion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.UserThumbsUpMotion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserThumbsUpMotionDo
	Assign(attrs ...field.AssignExpr) IUserThumbsUpMotionDo
	Joins(fields ...field.RelationField) IUserThumbsUpMotionDo
	Preload(fields ...field.RelationField) IUserThumbsUpMotionDo
	FirstOrInit() (*models.UserThumbsUpMotion, error)
	FirstOrCreate() (*models.UserThumbsUpMotion, error)
	FindByPage(offset int, limit int) (result []*models.UserThumbsUpMotion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserThumbsUpMotionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userThumbsUpMotionDo) Debug() IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Debug())
}

func (u userThumbsUpMotionDo) WithContext(ctx context.Context) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userThumbsUpMotionDo) ReadDB() IUserThumbsUpMotionDo {
	return u.Clauses(dbresolver.Read)
}

func (u userThumbsUpMotionDo) WriteDB() IUserThumbsUpMotionDo {
	return u.Clauses(dbresolver.Write)
}

func (u userThumbsUpMotionDo) Session(config *gorm.Session) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Session(config))
}

func (u userThumbsUpMotionDo) Clauses(conds ...clause.Expression) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userThumbsUpMotionDo) Returning(value interface{}, columns ...string) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userThumbsUpMotionDo) Not(conds ...gen.Condition) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userThumbsUpMotionDo) Or(conds ...gen.Condition) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userThumbsUpMotionDo) Select(conds ...field.Expr) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userThumbsUpMotionDo) Where(conds ...gen.Condition) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userThumbsUpMotionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserThumbsUpMotionDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userThumbsUpMotionDo) Order(conds ...field.Expr) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userThumbsUpMotionDo) Distinct(cols ...field.Expr) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userThumbsUpMotionDo) Omit(cols ...field.Expr) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userThumbsUpMotionDo) Join(table schema.Tabler, on ...field.Expr) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userThumbsUpMotionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userThumbsUpMotionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userThumbsUpMotionDo) Group(cols ...field.Expr) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userThumbsUpMotionDo) Having(conds ...gen.Condition) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userThumbsUpMotionDo) Limit(limit int) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userThumbsUpMotionDo) Offset(offset int) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userThumbsUpMotionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userThumbsUpMotionDo) Unscoped() IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userThumbsUpMotionDo) Create(values ...*models.UserThumbsUpMotion) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userThumbsUpMotionDo) CreateInBatches(values []*models.UserThumbsUpMotion, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userThumbsUpMotionDo) Save(values ...*models.UserThumbsUpMotion) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userThumbsUpMotionDo) First() (*models.UserThumbsUpMotion, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserThumbsUpMotion), nil
	}
}

func (u userThumbsUpMotionDo) Take() (*models.UserThumbsUpMotion, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserThumbsUpMotion), nil
	}
}

func (u userThumbsUpMotionDo) Last() (*models.UserThumbsUpMotion, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserThumbsUpMotion), nil
	}
}

func (u userThumbsUpMotionDo) Find() ([]*models.UserThumbsUpMotion, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserThumbsUpMotion), err
}

func (u userThumbsUpMotionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserThumbsUpMotion, err error) {
	buf := make([]*models.UserThumbsUpMotion, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userThumbsUpMotionDo) FindInBatches(result *[]*models.UserThumbsUpMotion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userThumbsUpMotionDo) Attrs(attrs ...field.AssignExpr) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userThumbsUpMotionDo) Assign(attrs ...field.AssignExpr) IUserThumbsUpMotionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userThumbsUpMotionDo) Joins(fields ...field.RelationField) IUserThumbsUpMotionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userThumbsUpMotionDo) Preload(fields ...field.RelationField) IUserThumbsUpMotionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userThumbsUpMotionDo) FirstOrInit() (*models.UserThumbsUpMotion, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserThumbsUpMotion), nil
	}
}

func (u userThumbsUpMotionDo) FirstOrCreate() (*models.UserThumbsUpMotion, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserThumbsUpMotion), nil
	}
}

func (u userThumbsUpMotionDo) FindByPage(offset int, limit int) (result []*models.UserThumbsUpMotion, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userThumbsUpMotionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userThumbsUpMotionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userThumbsUpMotionDo) Delete(models ...*models.UserThumbsUpMotion) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userThumbsUpMotionDo) withDO(do gen.Dao) *userThumbsUpMotionDo {
	u.DO = *do.(*gen.DO)
	return u
}
