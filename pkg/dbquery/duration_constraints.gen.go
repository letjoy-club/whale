// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDurationConstraint(db *gorm.DB, opts ...gen.DOOption) durationConstraint {
	_durationConstraint := durationConstraint{}

	_durationConstraint.durationConstraintDo.UseDB(db, opts...)
	_durationConstraint.durationConstraintDo.UseModel(&models.DurationConstraint{})

	tableName := _durationConstraint.durationConstraintDo.TableName()
	_durationConstraint.ALL = field.NewAsterisk(tableName)
	_durationConstraint.ID = field.NewInt(tableName, "id")
	_durationConstraint.UserID = field.NewString(tableName, "user_id")
	_durationConstraint.TotalMotionQuota = field.NewInt(tableName, "total_motion_quota")
	_durationConstraint.RemainMotionQuota = field.NewInt(tableName, "remain_motion_quota")
	_durationConstraint.TotalOfferQuota = field.NewInt(tableName, "total_offer_quota")
	_durationConstraint.RemainOfferQuota = field.NewInt(tableName, "remain_offer_quota")
	_durationConstraint.StartDate = field.NewTime(tableName, "start_date")
	_durationConstraint.StopDate = field.NewTime(tableName, "stop_date")
	_durationConstraint.UpdatedAt = field.NewTime(tableName, "updated_at")
	_durationConstraint.CreatedAt = field.NewTime(tableName, "created_at")

	_durationConstraint.fillFieldMap()

	return _durationConstraint
}

type durationConstraint struct {
	durationConstraintDo durationConstraintDo

	ALL               field.Asterisk
	ID                field.Int
	UserID            field.String
	TotalMotionQuota  field.Int
	RemainMotionQuota field.Int
	TotalOfferQuota   field.Int
	RemainOfferQuota  field.Int
	StartDate         field.Time
	StopDate          field.Time
	UpdatedAt         field.Time
	CreatedAt         field.Time

	fieldMap map[string]field.Expr
}

func (d durationConstraint) Table(newTableName string) *durationConstraint {
	d.durationConstraintDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d durationConstraint) As(alias string) *durationConstraint {
	d.durationConstraintDo.DO = *(d.durationConstraintDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *durationConstraint) updateTableName(table string) *durationConstraint {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt(table, "id")
	d.UserID = field.NewString(table, "user_id")
	d.TotalMotionQuota = field.NewInt(table, "total_motion_quota")
	d.RemainMotionQuota = field.NewInt(table, "remain_motion_quota")
	d.TotalOfferQuota = field.NewInt(table, "total_offer_quota")
	d.RemainOfferQuota = field.NewInt(table, "remain_offer_quota")
	d.StartDate = field.NewTime(table, "start_date")
	d.StopDate = field.NewTime(table, "stop_date")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.CreatedAt = field.NewTime(table, "created_at")

	d.fillFieldMap()

	return d
}

func (d *durationConstraint) WithContext(ctx context.Context) IDurationConstraintDo {
	return d.durationConstraintDo.WithContext(ctx)
}

func (d durationConstraint) TableName() string { return d.durationConstraintDo.TableName() }

func (d durationConstraint) Alias() string { return d.durationConstraintDo.Alias() }

func (d *durationConstraint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *durationConstraint) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["id"] = d.ID
	d.fieldMap["user_id"] = d.UserID
	d.fieldMap["total_motion_quota"] = d.TotalMotionQuota
	d.fieldMap["remain_motion_quota"] = d.RemainMotionQuota
	d.fieldMap["total_offer_quota"] = d.TotalOfferQuota
	d.fieldMap["remain_offer_quota"] = d.RemainOfferQuota
	d.fieldMap["start_date"] = d.StartDate
	d.fieldMap["stop_date"] = d.StopDate
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["created_at"] = d.CreatedAt
}

func (d durationConstraint) clone(db *gorm.DB) durationConstraint {
	d.durationConstraintDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d durationConstraint) replaceDB(db *gorm.DB) durationConstraint {
	d.durationConstraintDo.ReplaceDB(db)
	return d
}

type durationConstraintDo struct{ gen.DO }

type IDurationConstraintDo interface {
	gen.SubQuery
	Debug() IDurationConstraintDo
	WithContext(ctx context.Context) IDurationConstraintDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDurationConstraintDo
	WriteDB() IDurationConstraintDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDurationConstraintDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDurationConstraintDo
	Not(conds ...gen.Condition) IDurationConstraintDo
	Or(conds ...gen.Condition) IDurationConstraintDo
	Select(conds ...field.Expr) IDurationConstraintDo
	Where(conds ...gen.Condition) IDurationConstraintDo
	Order(conds ...field.Expr) IDurationConstraintDo
	Distinct(cols ...field.Expr) IDurationConstraintDo
	Omit(cols ...field.Expr) IDurationConstraintDo
	Join(table schema.Tabler, on ...field.Expr) IDurationConstraintDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDurationConstraintDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDurationConstraintDo
	Group(cols ...field.Expr) IDurationConstraintDo
	Having(conds ...gen.Condition) IDurationConstraintDo
	Limit(limit int) IDurationConstraintDo
	Offset(offset int) IDurationConstraintDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDurationConstraintDo
	Unscoped() IDurationConstraintDo
	Create(values ...*models.DurationConstraint) error
	CreateInBatches(values []*models.DurationConstraint, batchSize int) error
	Save(values ...*models.DurationConstraint) error
	First() (*models.DurationConstraint, error)
	Take() (*models.DurationConstraint, error)
	Last() (*models.DurationConstraint, error)
	Find() ([]*models.DurationConstraint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DurationConstraint, err error)
	FindInBatches(result *[]*models.DurationConstraint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.DurationConstraint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDurationConstraintDo
	Assign(attrs ...field.AssignExpr) IDurationConstraintDo
	Joins(fields ...field.RelationField) IDurationConstraintDo
	Preload(fields ...field.RelationField) IDurationConstraintDo
	FirstOrInit() (*models.DurationConstraint, error)
	FirstOrCreate() (*models.DurationConstraint, error)
	FindByPage(offset int, limit int) (result []*models.DurationConstraint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDurationConstraintDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d durationConstraintDo) Debug() IDurationConstraintDo {
	return d.withDO(d.DO.Debug())
}

func (d durationConstraintDo) WithContext(ctx context.Context) IDurationConstraintDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d durationConstraintDo) ReadDB() IDurationConstraintDo {
	return d.Clauses(dbresolver.Read)
}

func (d durationConstraintDo) WriteDB() IDurationConstraintDo {
	return d.Clauses(dbresolver.Write)
}

func (d durationConstraintDo) Session(config *gorm.Session) IDurationConstraintDo {
	return d.withDO(d.DO.Session(config))
}

func (d durationConstraintDo) Clauses(conds ...clause.Expression) IDurationConstraintDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d durationConstraintDo) Returning(value interface{}, columns ...string) IDurationConstraintDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d durationConstraintDo) Not(conds ...gen.Condition) IDurationConstraintDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d durationConstraintDo) Or(conds ...gen.Condition) IDurationConstraintDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d durationConstraintDo) Select(conds ...field.Expr) IDurationConstraintDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d durationConstraintDo) Where(conds ...gen.Condition) IDurationConstraintDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d durationConstraintDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IDurationConstraintDo {
	return d.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (d durationConstraintDo) Order(conds ...field.Expr) IDurationConstraintDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d durationConstraintDo) Distinct(cols ...field.Expr) IDurationConstraintDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d durationConstraintDo) Omit(cols ...field.Expr) IDurationConstraintDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d durationConstraintDo) Join(table schema.Tabler, on ...field.Expr) IDurationConstraintDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d durationConstraintDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDurationConstraintDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d durationConstraintDo) RightJoin(table schema.Tabler, on ...field.Expr) IDurationConstraintDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d durationConstraintDo) Group(cols ...field.Expr) IDurationConstraintDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d durationConstraintDo) Having(conds ...gen.Condition) IDurationConstraintDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d durationConstraintDo) Limit(limit int) IDurationConstraintDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d durationConstraintDo) Offset(offset int) IDurationConstraintDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d durationConstraintDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDurationConstraintDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d durationConstraintDo) Unscoped() IDurationConstraintDo {
	return d.withDO(d.DO.Unscoped())
}

func (d durationConstraintDo) Create(values ...*models.DurationConstraint) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d durationConstraintDo) CreateInBatches(values []*models.DurationConstraint, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d durationConstraintDo) Save(values ...*models.DurationConstraint) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d durationConstraintDo) First() (*models.DurationConstraint, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.DurationConstraint), nil
	}
}

func (d durationConstraintDo) Take() (*models.DurationConstraint, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.DurationConstraint), nil
	}
}

func (d durationConstraintDo) Last() (*models.DurationConstraint, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.DurationConstraint), nil
	}
}

func (d durationConstraintDo) Find() ([]*models.DurationConstraint, error) {
	result, err := d.DO.Find()
	return result.([]*models.DurationConstraint), err
}

func (d durationConstraintDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.DurationConstraint, err error) {
	buf := make([]*models.DurationConstraint, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d durationConstraintDo) FindInBatches(result *[]*models.DurationConstraint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d durationConstraintDo) Attrs(attrs ...field.AssignExpr) IDurationConstraintDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d durationConstraintDo) Assign(attrs ...field.AssignExpr) IDurationConstraintDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d durationConstraintDo) Joins(fields ...field.RelationField) IDurationConstraintDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d durationConstraintDo) Preload(fields ...field.RelationField) IDurationConstraintDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d durationConstraintDo) FirstOrInit() (*models.DurationConstraint, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.DurationConstraint), nil
	}
}

func (d durationConstraintDo) FirstOrCreate() (*models.DurationConstraint, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.DurationConstraint), nil
	}
}

func (d durationConstraintDo) FindByPage(offset int, limit int) (result []*models.DurationConstraint, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d durationConstraintDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d durationConstraintDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d durationConstraintDo) Delete(models ...*models.DurationConstraint) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *durationConstraintDo) withDO(do gen.Dao) *durationConstraintDo {
	d.DO = *do.(*gen.DO)
	return d
}
