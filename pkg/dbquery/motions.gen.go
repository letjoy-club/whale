// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMotion(db *gorm.DB, opts ...gen.DOOption) motion {
	_motion := motion{}

	_motion.motionDo.UseDB(db, opts...)
	_motion.motionDo.UseModel(&models.Motion{})

	tableName := _motion.motionDo.TableName()
	_motion.ALL = field.NewAsterisk(tableName)
	_motion.ID = field.NewString(tableName, "id")
	_motion.UserID = field.NewString(tableName, "user_id")
	_motion.TopicID = field.NewString(tableName, "topic_id")
	_motion.CityID = field.NewString(tableName, "city_id")
	_motion.AreaIDs = field.NewField(tableName, "area_ids")
	_motion.Properties = field.NewField(tableName, "properties")
	_motion.Active = field.NewBool(tableName, "active")
	_motion.Remark = field.NewString(tableName, "remark")
	_motion.MyGender = field.NewString(tableName, "my_gender")
	_motion.Gender = field.NewString(tableName, "gender")
	_motion.DayRange = field.NewField(tableName, "day_range")
	_motion.PreferredPeriods = field.NewField(tableName, "preferred_periods")
	_motion.ViewCount = field.NewInt(tableName, "view_count")
	_motion.LikeCount = field.NewInt(tableName, "like_count")
	_motion.InOfferNum = field.NewInt(tableName, "in_offer_num")
	_motion.OutOfferNum = field.NewInt(tableName, "out_offer_num")
	_motion.PendingInNum = field.NewInt(tableName, "pending_in_num")
	_motion.PendingOutNum = field.NewInt(tableName, "pending_out_num")
	_motion.ActiveNum = field.NewInt(tableName, "active_num")
	_motion.Discoverable = field.NewBool(tableName, "discoverable")
	_motion.BasicQuota = field.NewInt(tableName, "basic_quota")
	_motion.RemainQuota = field.NewInt(tableName, "remain_quota")
	_motion.Deadline = field.NewTime(tableName, "deadline")
	_motion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_motion.CreatedAt = field.NewTime(tableName, "created_at")

	_motion.fillFieldMap()

	return _motion
}

type motion struct {
	motionDo motionDo

	ALL              field.Asterisk
	ID               field.String
	UserID           field.String
	TopicID          field.String
	CityID           field.String
	AreaIDs          field.Field
	Properties       field.Field
	Active           field.Bool
	Remark           field.String
	MyGender         field.String
	Gender           field.String
	DayRange         field.Field
	PreferredPeriods field.Field
	ViewCount        field.Int
	LikeCount        field.Int
	InOfferNum       field.Int
	OutOfferNum      field.Int
	PendingInNum     field.Int
	PendingOutNum    field.Int
	ActiveNum        field.Int
	Discoverable     field.Bool
	BasicQuota       field.Int
	RemainQuota      field.Int
	Deadline         field.Time
	UpdatedAt        field.Time
	CreatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (m motion) Table(newTableName string) *motion {
	m.motionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m motion) As(alias string) *motion {
	m.motionDo.DO = *(m.motionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *motion) updateTableName(table string) *motion {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.UserID = field.NewString(table, "user_id")
	m.TopicID = field.NewString(table, "topic_id")
	m.CityID = field.NewString(table, "city_id")
	m.AreaIDs = field.NewField(table, "area_ids")
	m.Properties = field.NewField(table, "properties")
	m.Active = field.NewBool(table, "active")
	m.Remark = field.NewString(table, "remark")
	m.MyGender = field.NewString(table, "my_gender")
	m.Gender = field.NewString(table, "gender")
	m.DayRange = field.NewField(table, "day_range")
	m.PreferredPeriods = field.NewField(table, "preferred_periods")
	m.ViewCount = field.NewInt(table, "view_count")
	m.LikeCount = field.NewInt(table, "like_count")
	m.InOfferNum = field.NewInt(table, "in_offer_num")
	m.OutOfferNum = field.NewInt(table, "out_offer_num")
	m.PendingInNum = field.NewInt(table, "pending_in_num")
	m.PendingOutNum = field.NewInt(table, "pending_out_num")
	m.ActiveNum = field.NewInt(table, "active_num")
	m.Discoverable = field.NewBool(table, "discoverable")
	m.BasicQuota = field.NewInt(table, "basic_quota")
	m.RemainQuota = field.NewInt(table, "remain_quota")
	m.Deadline = field.NewTime(table, "deadline")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *motion) WithContext(ctx context.Context) IMotionDo { return m.motionDo.WithContext(ctx) }

func (m motion) TableName() string { return m.motionDo.TableName() }

func (m motion) Alias() string { return m.motionDo.Alias() }

func (m *motion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *motion) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 25)
	m.fieldMap["id"] = m.ID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["topic_id"] = m.TopicID
	m.fieldMap["city_id"] = m.CityID
	m.fieldMap["area_ids"] = m.AreaIDs
	m.fieldMap["properties"] = m.Properties
	m.fieldMap["active"] = m.Active
	m.fieldMap["remark"] = m.Remark
	m.fieldMap["my_gender"] = m.MyGender
	m.fieldMap["gender"] = m.Gender
	m.fieldMap["day_range"] = m.DayRange
	m.fieldMap["preferred_periods"] = m.PreferredPeriods
	m.fieldMap["view_count"] = m.ViewCount
	m.fieldMap["like_count"] = m.LikeCount
	m.fieldMap["in_offer_num"] = m.InOfferNum
	m.fieldMap["out_offer_num"] = m.OutOfferNum
	m.fieldMap["pending_in_num"] = m.PendingInNum
	m.fieldMap["pending_out_num"] = m.PendingOutNum
	m.fieldMap["active_num"] = m.ActiveNum
	m.fieldMap["discoverable"] = m.Discoverable
	m.fieldMap["basic_quota"] = m.BasicQuota
	m.fieldMap["remain_quota"] = m.RemainQuota
	m.fieldMap["deadline"] = m.Deadline
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m motion) clone(db *gorm.DB) motion {
	m.motionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m motion) replaceDB(db *gorm.DB) motion {
	m.motionDo.ReplaceDB(db)
	return m
}

type motionDo struct{ gen.DO }

type IMotionDo interface {
	gen.SubQuery
	Debug() IMotionDo
	WithContext(ctx context.Context) IMotionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMotionDo
	WriteDB() IMotionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMotionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMotionDo
	Not(conds ...gen.Condition) IMotionDo
	Or(conds ...gen.Condition) IMotionDo
	Select(conds ...field.Expr) IMotionDo
	Where(conds ...gen.Condition) IMotionDo
	Order(conds ...field.Expr) IMotionDo
	Distinct(cols ...field.Expr) IMotionDo
	Omit(cols ...field.Expr) IMotionDo
	Join(table schema.Tabler, on ...field.Expr) IMotionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMotionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMotionDo
	Group(cols ...field.Expr) IMotionDo
	Having(conds ...gen.Condition) IMotionDo
	Limit(limit int) IMotionDo
	Offset(offset int) IMotionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMotionDo
	Unscoped() IMotionDo
	Create(values ...*models.Motion) error
	CreateInBatches(values []*models.Motion, batchSize int) error
	Save(values ...*models.Motion) error
	First() (*models.Motion, error)
	Take() (*models.Motion, error)
	Last() (*models.Motion, error)
	Find() ([]*models.Motion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Motion, err error)
	FindInBatches(result *[]*models.Motion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.Motion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMotionDo
	Assign(attrs ...field.AssignExpr) IMotionDo
	Joins(fields ...field.RelationField) IMotionDo
	Preload(fields ...field.RelationField) IMotionDo
	FirstOrInit() (*models.Motion, error)
	FirstOrCreate() (*models.Motion, error)
	FindByPage(offset int, limit int) (result []*models.Motion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMotionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m motionDo) Debug() IMotionDo {
	return m.withDO(m.DO.Debug())
}

func (m motionDo) WithContext(ctx context.Context) IMotionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m motionDo) ReadDB() IMotionDo {
	return m.Clauses(dbresolver.Read)
}

func (m motionDo) WriteDB() IMotionDo {
	return m.Clauses(dbresolver.Write)
}

func (m motionDo) Session(config *gorm.Session) IMotionDo {
	return m.withDO(m.DO.Session(config))
}

func (m motionDo) Clauses(conds ...clause.Expression) IMotionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m motionDo) Returning(value interface{}, columns ...string) IMotionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m motionDo) Not(conds ...gen.Condition) IMotionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m motionDo) Or(conds ...gen.Condition) IMotionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m motionDo) Select(conds ...field.Expr) IMotionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m motionDo) Where(conds ...gen.Condition) IMotionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m motionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMotionDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m motionDo) Order(conds ...field.Expr) IMotionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m motionDo) Distinct(cols ...field.Expr) IMotionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m motionDo) Omit(cols ...field.Expr) IMotionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m motionDo) Join(table schema.Tabler, on ...field.Expr) IMotionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m motionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMotionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m motionDo) RightJoin(table schema.Tabler, on ...field.Expr) IMotionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m motionDo) Group(cols ...field.Expr) IMotionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m motionDo) Having(conds ...gen.Condition) IMotionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m motionDo) Limit(limit int) IMotionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m motionDo) Offset(offset int) IMotionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m motionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMotionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m motionDo) Unscoped() IMotionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m motionDo) Create(values ...*models.Motion) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m motionDo) CreateInBatches(values []*models.Motion, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m motionDo) Save(values ...*models.Motion) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m motionDo) First() (*models.Motion, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Motion), nil
	}
}

func (m motionDo) Take() (*models.Motion, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Motion), nil
	}
}

func (m motionDo) Last() (*models.Motion, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Motion), nil
	}
}

func (m motionDo) Find() ([]*models.Motion, error) {
	result, err := m.DO.Find()
	return result.([]*models.Motion), err
}

func (m motionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Motion, err error) {
	buf := make([]*models.Motion, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m motionDo) FindInBatches(result *[]*models.Motion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m motionDo) Attrs(attrs ...field.AssignExpr) IMotionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m motionDo) Assign(attrs ...field.AssignExpr) IMotionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m motionDo) Joins(fields ...field.RelationField) IMotionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m motionDo) Preload(fields ...field.RelationField) IMotionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m motionDo) FirstOrInit() (*models.Motion, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Motion), nil
	}
}

func (m motionDo) FirstOrCreate() (*models.Motion, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Motion), nil
	}
}

func (m motionDo) FindByPage(offset int, limit int) (result []*models.Motion, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m motionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m motionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m motionDo) Delete(models ...*models.Motion) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *motionDo) withDO(do gen.Dao) *motionDo {
	m.DO = *do.(*gen.DO)
	return m
}
