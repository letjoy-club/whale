// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMatchingResultConfirmAction(db *gorm.DB, opts ...gen.DOOption) matchingResultConfirmAction {
	_matchingResultConfirmAction := matchingResultConfirmAction{}

	_matchingResultConfirmAction.matchingResultConfirmActionDo.UseDB(db, opts...)
	_matchingResultConfirmAction.matchingResultConfirmActionDo.UseModel(&models.MatchingResultConfirmAction{})

	tableName := _matchingResultConfirmAction.matchingResultConfirmActionDo.TableName()
	_matchingResultConfirmAction.ALL = field.NewAsterisk(tableName)
	_matchingResultConfirmAction.ID = field.NewInt(tableName, "id")
	_matchingResultConfirmAction.MatchingResultID = field.NewInt(tableName, "matching_result_id")
	_matchingResultConfirmAction.UserID = field.NewString(tableName, "user_id")
	_matchingResultConfirmAction.Confirmed = field.NewBool(tableName, "confirmed")
	_matchingResultConfirmAction.CreatedAt = field.NewTime(tableName, "created_at")

	_matchingResultConfirmAction.fillFieldMap()

	return _matchingResultConfirmAction
}

type matchingResultConfirmAction struct {
	matchingResultConfirmActionDo matchingResultConfirmActionDo

	ALL              field.Asterisk
	ID               field.Int
	MatchingResultID field.Int
	UserID           field.String
	Confirmed        field.Bool
	CreatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (m matchingResultConfirmAction) Table(newTableName string) *matchingResultConfirmAction {
	m.matchingResultConfirmActionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m matchingResultConfirmAction) As(alias string) *matchingResultConfirmAction {
	m.matchingResultConfirmActionDo.DO = *(m.matchingResultConfirmActionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *matchingResultConfirmAction) updateTableName(table string) *matchingResultConfirmAction {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt(table, "id")
	m.MatchingResultID = field.NewInt(table, "matching_result_id")
	m.UserID = field.NewString(table, "user_id")
	m.Confirmed = field.NewBool(table, "confirmed")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *matchingResultConfirmAction) WithContext(ctx context.Context) IMatchingResultConfirmActionDo {
	return m.matchingResultConfirmActionDo.WithContext(ctx)
}

func (m matchingResultConfirmAction) TableName() string {
	return m.matchingResultConfirmActionDo.TableName()
}

func (m matchingResultConfirmAction) Alias() string { return m.matchingResultConfirmActionDo.Alias() }

func (m *matchingResultConfirmAction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *matchingResultConfirmAction) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["id"] = m.ID
	m.fieldMap["matching_result_id"] = m.MatchingResultID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["confirmed"] = m.Confirmed
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m matchingResultConfirmAction) clone(db *gorm.DB) matchingResultConfirmAction {
	m.matchingResultConfirmActionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m matchingResultConfirmAction) replaceDB(db *gorm.DB) matchingResultConfirmAction {
	m.matchingResultConfirmActionDo.ReplaceDB(db)
	return m
}

type matchingResultConfirmActionDo struct{ gen.DO }

type IMatchingResultConfirmActionDo interface {
	gen.SubQuery
	Debug() IMatchingResultConfirmActionDo
	WithContext(ctx context.Context) IMatchingResultConfirmActionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatchingResultConfirmActionDo
	WriteDB() IMatchingResultConfirmActionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatchingResultConfirmActionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatchingResultConfirmActionDo
	Not(conds ...gen.Condition) IMatchingResultConfirmActionDo
	Or(conds ...gen.Condition) IMatchingResultConfirmActionDo
	Select(conds ...field.Expr) IMatchingResultConfirmActionDo
	Where(conds ...gen.Condition) IMatchingResultConfirmActionDo
	Order(conds ...field.Expr) IMatchingResultConfirmActionDo
	Distinct(cols ...field.Expr) IMatchingResultConfirmActionDo
	Omit(cols ...field.Expr) IMatchingResultConfirmActionDo
	Join(table schema.Tabler, on ...field.Expr) IMatchingResultConfirmActionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingResultConfirmActionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatchingResultConfirmActionDo
	Group(cols ...field.Expr) IMatchingResultConfirmActionDo
	Having(conds ...gen.Condition) IMatchingResultConfirmActionDo
	Limit(limit int) IMatchingResultConfirmActionDo
	Offset(offset int) IMatchingResultConfirmActionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingResultConfirmActionDo
	Unscoped() IMatchingResultConfirmActionDo
	Create(values ...*models.MatchingResultConfirmAction) error
	CreateInBatches(values []*models.MatchingResultConfirmAction, batchSize int) error
	Save(values ...*models.MatchingResultConfirmAction) error
	First() (*models.MatchingResultConfirmAction, error)
	Take() (*models.MatchingResultConfirmAction, error)
	Last() (*models.MatchingResultConfirmAction, error)
	Find() ([]*models.MatchingResultConfirmAction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingResultConfirmAction, err error)
	FindInBatches(result *[]*models.MatchingResultConfirmAction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MatchingResultConfirmAction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatchingResultConfirmActionDo
	Assign(attrs ...field.AssignExpr) IMatchingResultConfirmActionDo
	Joins(fields ...field.RelationField) IMatchingResultConfirmActionDo
	Preload(fields ...field.RelationField) IMatchingResultConfirmActionDo
	FirstOrInit() (*models.MatchingResultConfirmAction, error)
	FirstOrCreate() (*models.MatchingResultConfirmAction, error)
	FindByPage(offset int, limit int) (result []*models.MatchingResultConfirmAction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatchingResultConfirmActionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matchingResultConfirmActionDo) Debug() IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Debug())
}

func (m matchingResultConfirmActionDo) WithContext(ctx context.Context) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchingResultConfirmActionDo) ReadDB() IMatchingResultConfirmActionDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchingResultConfirmActionDo) WriteDB() IMatchingResultConfirmActionDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchingResultConfirmActionDo) Session(config *gorm.Session) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchingResultConfirmActionDo) Clauses(conds ...clause.Expression) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchingResultConfirmActionDo) Returning(value interface{}, columns ...string) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchingResultConfirmActionDo) Not(conds ...gen.Condition) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchingResultConfirmActionDo) Or(conds ...gen.Condition) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchingResultConfirmActionDo) Select(conds ...field.Expr) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchingResultConfirmActionDo) Where(conds ...gen.Condition) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchingResultConfirmActionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMatchingResultConfirmActionDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m matchingResultConfirmActionDo) Order(conds ...field.Expr) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchingResultConfirmActionDo) Distinct(cols ...field.Expr) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchingResultConfirmActionDo) Omit(cols ...field.Expr) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchingResultConfirmActionDo) Join(table schema.Tabler, on ...field.Expr) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchingResultConfirmActionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchingResultConfirmActionDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchingResultConfirmActionDo) Group(cols ...field.Expr) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchingResultConfirmActionDo) Having(conds ...gen.Condition) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchingResultConfirmActionDo) Limit(limit int) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchingResultConfirmActionDo) Offset(offset int) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchingResultConfirmActionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchingResultConfirmActionDo) Unscoped() IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchingResultConfirmActionDo) Create(values ...*models.MatchingResultConfirmAction) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchingResultConfirmActionDo) CreateInBatches(values []*models.MatchingResultConfirmAction, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchingResultConfirmActionDo) Save(values ...*models.MatchingResultConfirmAction) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchingResultConfirmActionDo) First() (*models.MatchingResultConfirmAction, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingResultConfirmAction), nil
	}
}

func (m matchingResultConfirmActionDo) Take() (*models.MatchingResultConfirmAction, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingResultConfirmAction), nil
	}
}

func (m matchingResultConfirmActionDo) Last() (*models.MatchingResultConfirmAction, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingResultConfirmAction), nil
	}
}

func (m matchingResultConfirmActionDo) Find() ([]*models.MatchingResultConfirmAction, error) {
	result, err := m.DO.Find()
	return result.([]*models.MatchingResultConfirmAction), err
}

func (m matchingResultConfirmActionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingResultConfirmAction, err error) {
	buf := make([]*models.MatchingResultConfirmAction, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchingResultConfirmActionDo) FindInBatches(result *[]*models.MatchingResultConfirmAction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchingResultConfirmActionDo) Attrs(attrs ...field.AssignExpr) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchingResultConfirmActionDo) Assign(attrs ...field.AssignExpr) IMatchingResultConfirmActionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchingResultConfirmActionDo) Joins(fields ...field.RelationField) IMatchingResultConfirmActionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchingResultConfirmActionDo) Preload(fields ...field.RelationField) IMatchingResultConfirmActionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchingResultConfirmActionDo) FirstOrInit() (*models.MatchingResultConfirmAction, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingResultConfirmAction), nil
	}
}

func (m matchingResultConfirmActionDo) FirstOrCreate() (*models.MatchingResultConfirmAction, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingResultConfirmAction), nil
	}
}

func (m matchingResultConfirmActionDo) FindByPage(offset int, limit int) (result []*models.MatchingResultConfirmAction, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchingResultConfirmActionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchingResultConfirmActionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchingResultConfirmActionDo) Delete(models ...*models.MatchingResultConfirmAction) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchingResultConfirmActionDo) withDO(do gen.Dao) *matchingResultConfirmActionDo {
	m.DO = *do.(*gen.DO)
	return m
}
