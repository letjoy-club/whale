// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMotionOfferRecord(db *gorm.DB, opts ...gen.DOOption) motionOfferRecord {
	_motionOfferRecord := motionOfferRecord{}

	_motionOfferRecord.motionOfferRecordDo.UseDB(db, opts...)
	_motionOfferRecord.motionOfferRecordDo.UseModel(&models.MotionOfferRecord{})

	tableName := _motionOfferRecord.motionOfferRecordDo.TableName()
	_motionOfferRecord.ALL = field.NewAsterisk(tableName)
	_motionOfferRecord.ID = field.NewInt(tableName, "id")
	_motionOfferRecord.MotionID = field.NewString(tableName, "motion_id")
	_motionOfferRecord.ToMotionID = field.NewString(tableName, "to_motion_id")
	_motionOfferRecord.UserID = field.NewString(tableName, "user_id")
	_motionOfferRecord.State = field.NewString(tableName, "state")
	_motionOfferRecord.ChatGroupID = field.NewString(tableName, "chat_group_id")
	_motionOfferRecord.ReactAt = field.NewTime(tableName, "react_at")
	_motionOfferRecord.Remark = field.NewString(tableName, "remark")
	_motionOfferRecord.ExpiredAt = field.NewTime(tableName, "expired_at")
	_motionOfferRecord.CreatedAt = field.NewTime(tableName, "created_at")

	_motionOfferRecord.fillFieldMap()

	return _motionOfferRecord
}

type motionOfferRecord struct {
	motionOfferRecordDo motionOfferRecordDo

	ALL         field.Asterisk
	ID          field.Int
	MotionID    field.String
	ToMotionID  field.String
	UserID      field.String
	State       field.String
	ChatGroupID field.String
	ReactAt     field.Time
	Remark      field.String
	ExpiredAt   field.Time
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (m motionOfferRecord) Table(newTableName string) *motionOfferRecord {
	m.motionOfferRecordDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m motionOfferRecord) As(alias string) *motionOfferRecord {
	m.motionOfferRecordDo.DO = *(m.motionOfferRecordDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *motionOfferRecord) updateTableName(table string) *motionOfferRecord {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt(table, "id")
	m.MotionID = field.NewString(table, "motion_id")
	m.ToMotionID = field.NewString(table, "to_motion_id")
	m.UserID = field.NewString(table, "user_id")
	m.State = field.NewString(table, "state")
	m.ChatGroupID = field.NewString(table, "chat_group_id")
	m.ReactAt = field.NewTime(table, "react_at")
	m.Remark = field.NewString(table, "remark")
	m.ExpiredAt = field.NewTime(table, "expired_at")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *motionOfferRecord) WithContext(ctx context.Context) IMotionOfferRecordDo {
	return m.motionOfferRecordDo.WithContext(ctx)
}

func (m motionOfferRecord) TableName() string { return m.motionOfferRecordDo.TableName() }

func (m motionOfferRecord) Alias() string { return m.motionOfferRecordDo.Alias() }

func (m *motionOfferRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *motionOfferRecord) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 10)
	m.fieldMap["id"] = m.ID
	m.fieldMap["motion_id"] = m.MotionID
	m.fieldMap["to_motion_id"] = m.ToMotionID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["state"] = m.State
	m.fieldMap["chat_group_id"] = m.ChatGroupID
	m.fieldMap["react_at"] = m.ReactAt
	m.fieldMap["remark"] = m.Remark
	m.fieldMap["expired_at"] = m.ExpiredAt
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m motionOfferRecord) clone(db *gorm.DB) motionOfferRecord {
	m.motionOfferRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m motionOfferRecord) replaceDB(db *gorm.DB) motionOfferRecord {
	m.motionOfferRecordDo.ReplaceDB(db)
	return m
}

type motionOfferRecordDo struct{ gen.DO }

type IMotionOfferRecordDo interface {
	gen.SubQuery
	Debug() IMotionOfferRecordDo
	WithContext(ctx context.Context) IMotionOfferRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMotionOfferRecordDo
	WriteDB() IMotionOfferRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMotionOfferRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMotionOfferRecordDo
	Not(conds ...gen.Condition) IMotionOfferRecordDo
	Or(conds ...gen.Condition) IMotionOfferRecordDo
	Select(conds ...field.Expr) IMotionOfferRecordDo
	Where(conds ...gen.Condition) IMotionOfferRecordDo
	Order(conds ...field.Expr) IMotionOfferRecordDo
	Distinct(cols ...field.Expr) IMotionOfferRecordDo
	Omit(cols ...field.Expr) IMotionOfferRecordDo
	Join(table schema.Tabler, on ...field.Expr) IMotionOfferRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMotionOfferRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMotionOfferRecordDo
	Group(cols ...field.Expr) IMotionOfferRecordDo
	Having(conds ...gen.Condition) IMotionOfferRecordDo
	Limit(limit int) IMotionOfferRecordDo
	Offset(offset int) IMotionOfferRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMotionOfferRecordDo
	Unscoped() IMotionOfferRecordDo
	Create(values ...*models.MotionOfferRecord) error
	CreateInBatches(values []*models.MotionOfferRecord, batchSize int) error
	Save(values ...*models.MotionOfferRecord) error
	First() (*models.MotionOfferRecord, error)
	Take() (*models.MotionOfferRecord, error)
	Last() (*models.MotionOfferRecord, error)
	Find() ([]*models.MotionOfferRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MotionOfferRecord, err error)
	FindInBatches(result *[]*models.MotionOfferRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MotionOfferRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMotionOfferRecordDo
	Assign(attrs ...field.AssignExpr) IMotionOfferRecordDo
	Joins(fields ...field.RelationField) IMotionOfferRecordDo
	Preload(fields ...field.RelationField) IMotionOfferRecordDo
	FirstOrInit() (*models.MotionOfferRecord, error)
	FirstOrCreate() (*models.MotionOfferRecord, error)
	FindByPage(offset int, limit int) (result []*models.MotionOfferRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMotionOfferRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m motionOfferRecordDo) Debug() IMotionOfferRecordDo {
	return m.withDO(m.DO.Debug())
}

func (m motionOfferRecordDo) WithContext(ctx context.Context) IMotionOfferRecordDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m motionOfferRecordDo) ReadDB() IMotionOfferRecordDo {
	return m.Clauses(dbresolver.Read)
}

func (m motionOfferRecordDo) WriteDB() IMotionOfferRecordDo {
	return m.Clauses(dbresolver.Write)
}

func (m motionOfferRecordDo) Session(config *gorm.Session) IMotionOfferRecordDo {
	return m.withDO(m.DO.Session(config))
}

func (m motionOfferRecordDo) Clauses(conds ...clause.Expression) IMotionOfferRecordDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m motionOfferRecordDo) Returning(value interface{}, columns ...string) IMotionOfferRecordDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m motionOfferRecordDo) Not(conds ...gen.Condition) IMotionOfferRecordDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m motionOfferRecordDo) Or(conds ...gen.Condition) IMotionOfferRecordDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m motionOfferRecordDo) Select(conds ...field.Expr) IMotionOfferRecordDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m motionOfferRecordDo) Where(conds ...gen.Condition) IMotionOfferRecordDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m motionOfferRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMotionOfferRecordDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m motionOfferRecordDo) Order(conds ...field.Expr) IMotionOfferRecordDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m motionOfferRecordDo) Distinct(cols ...field.Expr) IMotionOfferRecordDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m motionOfferRecordDo) Omit(cols ...field.Expr) IMotionOfferRecordDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m motionOfferRecordDo) Join(table schema.Tabler, on ...field.Expr) IMotionOfferRecordDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m motionOfferRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMotionOfferRecordDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m motionOfferRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IMotionOfferRecordDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m motionOfferRecordDo) Group(cols ...field.Expr) IMotionOfferRecordDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m motionOfferRecordDo) Having(conds ...gen.Condition) IMotionOfferRecordDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m motionOfferRecordDo) Limit(limit int) IMotionOfferRecordDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m motionOfferRecordDo) Offset(offset int) IMotionOfferRecordDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m motionOfferRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMotionOfferRecordDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m motionOfferRecordDo) Unscoped() IMotionOfferRecordDo {
	return m.withDO(m.DO.Unscoped())
}

func (m motionOfferRecordDo) Create(values ...*models.MotionOfferRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m motionOfferRecordDo) CreateInBatches(values []*models.MotionOfferRecord, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m motionOfferRecordDo) Save(values ...*models.MotionOfferRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m motionOfferRecordDo) First() (*models.MotionOfferRecord, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionOfferRecord), nil
	}
}

func (m motionOfferRecordDo) Take() (*models.MotionOfferRecord, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionOfferRecord), nil
	}
}

func (m motionOfferRecordDo) Last() (*models.MotionOfferRecord, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionOfferRecord), nil
	}
}

func (m motionOfferRecordDo) Find() ([]*models.MotionOfferRecord, error) {
	result, err := m.DO.Find()
	return result.([]*models.MotionOfferRecord), err
}

func (m motionOfferRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MotionOfferRecord, err error) {
	buf := make([]*models.MotionOfferRecord, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m motionOfferRecordDo) FindInBatches(result *[]*models.MotionOfferRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m motionOfferRecordDo) Attrs(attrs ...field.AssignExpr) IMotionOfferRecordDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m motionOfferRecordDo) Assign(attrs ...field.AssignExpr) IMotionOfferRecordDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m motionOfferRecordDo) Joins(fields ...field.RelationField) IMotionOfferRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m motionOfferRecordDo) Preload(fields ...field.RelationField) IMotionOfferRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m motionOfferRecordDo) FirstOrInit() (*models.MotionOfferRecord, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionOfferRecord), nil
	}
}

func (m motionOfferRecordDo) FirstOrCreate() (*models.MotionOfferRecord, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionOfferRecord), nil
	}
}

func (m motionOfferRecordDo) FindByPage(offset int, limit int) (result []*models.MotionOfferRecord, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m motionOfferRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m motionOfferRecordDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m motionOfferRecordDo) Delete(models ...*models.MotionOfferRecord) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *motionOfferRecordDo) withDO(do gen.Dao) *motionOfferRecordDo {
	m.DO = *do.(*gen.DO)
	return m
}
