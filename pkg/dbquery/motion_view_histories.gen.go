// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMotionViewHistory(db *gorm.DB, opts ...gen.DOOption) motionViewHistory {
	_motionViewHistory := motionViewHistory{}

	_motionViewHistory.motionViewHistoryDo.UseDB(db, opts...)
	_motionViewHistory.motionViewHistoryDo.UseModel(&models.MotionViewHistory{})

	tableName := _motionViewHistory.motionViewHistoryDo.TableName()
	_motionViewHistory.ALL = field.NewAsterisk(tableName)
	_motionViewHistory.ID = field.NewInt(tableName, "id")
	_motionViewHistory.UserID = field.NewString(tableName, "user_id")
	_motionViewHistory.MotionIDs = field.NewField(tableName, "motion_ids")
	_motionViewHistory.CreatedAt = field.NewTime(tableName, "created_at")

	_motionViewHistory.fillFieldMap()

	return _motionViewHistory
}

type motionViewHistory struct {
	motionViewHistoryDo motionViewHistoryDo

	ALL       field.Asterisk
	ID        field.Int
	UserID    field.String
	MotionIDs field.Field
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (m motionViewHistory) Table(newTableName string) *motionViewHistory {
	m.motionViewHistoryDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m motionViewHistory) As(alias string) *motionViewHistory {
	m.motionViewHistoryDo.DO = *(m.motionViewHistoryDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *motionViewHistory) updateTableName(table string) *motionViewHistory {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt(table, "id")
	m.UserID = field.NewString(table, "user_id")
	m.MotionIDs = field.NewField(table, "motion_ids")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *motionViewHistory) WithContext(ctx context.Context) IMotionViewHistoryDo {
	return m.motionViewHistoryDo.WithContext(ctx)
}

func (m motionViewHistory) TableName() string { return m.motionViewHistoryDo.TableName() }

func (m motionViewHistory) Alias() string { return m.motionViewHistoryDo.Alias() }

func (m *motionViewHistory) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *motionViewHistory) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["id"] = m.ID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["motion_ids"] = m.MotionIDs
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m motionViewHistory) clone(db *gorm.DB) motionViewHistory {
	m.motionViewHistoryDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m motionViewHistory) replaceDB(db *gorm.DB) motionViewHistory {
	m.motionViewHistoryDo.ReplaceDB(db)
	return m
}

type motionViewHistoryDo struct{ gen.DO }

type IMotionViewHistoryDo interface {
	gen.SubQuery
	Debug() IMotionViewHistoryDo
	WithContext(ctx context.Context) IMotionViewHistoryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMotionViewHistoryDo
	WriteDB() IMotionViewHistoryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMotionViewHistoryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMotionViewHistoryDo
	Not(conds ...gen.Condition) IMotionViewHistoryDo
	Or(conds ...gen.Condition) IMotionViewHistoryDo
	Select(conds ...field.Expr) IMotionViewHistoryDo
	Where(conds ...gen.Condition) IMotionViewHistoryDo
	Order(conds ...field.Expr) IMotionViewHistoryDo
	Distinct(cols ...field.Expr) IMotionViewHistoryDo
	Omit(cols ...field.Expr) IMotionViewHistoryDo
	Join(table schema.Tabler, on ...field.Expr) IMotionViewHistoryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMotionViewHistoryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMotionViewHistoryDo
	Group(cols ...field.Expr) IMotionViewHistoryDo
	Having(conds ...gen.Condition) IMotionViewHistoryDo
	Limit(limit int) IMotionViewHistoryDo
	Offset(offset int) IMotionViewHistoryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMotionViewHistoryDo
	Unscoped() IMotionViewHistoryDo
	Create(values ...*models.MotionViewHistory) error
	CreateInBatches(values []*models.MotionViewHistory, batchSize int) error
	Save(values ...*models.MotionViewHistory) error
	First() (*models.MotionViewHistory, error)
	Take() (*models.MotionViewHistory, error)
	Last() (*models.MotionViewHistory, error)
	Find() ([]*models.MotionViewHistory, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MotionViewHistory, err error)
	FindInBatches(result *[]*models.MotionViewHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MotionViewHistory) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMotionViewHistoryDo
	Assign(attrs ...field.AssignExpr) IMotionViewHistoryDo
	Joins(fields ...field.RelationField) IMotionViewHistoryDo
	Preload(fields ...field.RelationField) IMotionViewHistoryDo
	FirstOrInit() (*models.MotionViewHistory, error)
	FirstOrCreate() (*models.MotionViewHistory, error)
	FindByPage(offset int, limit int) (result []*models.MotionViewHistory, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMotionViewHistoryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m motionViewHistoryDo) Debug() IMotionViewHistoryDo {
	return m.withDO(m.DO.Debug())
}

func (m motionViewHistoryDo) WithContext(ctx context.Context) IMotionViewHistoryDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m motionViewHistoryDo) ReadDB() IMotionViewHistoryDo {
	return m.Clauses(dbresolver.Read)
}

func (m motionViewHistoryDo) WriteDB() IMotionViewHistoryDo {
	return m.Clauses(dbresolver.Write)
}

func (m motionViewHistoryDo) Session(config *gorm.Session) IMotionViewHistoryDo {
	return m.withDO(m.DO.Session(config))
}

func (m motionViewHistoryDo) Clauses(conds ...clause.Expression) IMotionViewHistoryDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m motionViewHistoryDo) Returning(value interface{}, columns ...string) IMotionViewHistoryDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m motionViewHistoryDo) Not(conds ...gen.Condition) IMotionViewHistoryDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m motionViewHistoryDo) Or(conds ...gen.Condition) IMotionViewHistoryDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m motionViewHistoryDo) Select(conds ...field.Expr) IMotionViewHistoryDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m motionViewHistoryDo) Where(conds ...gen.Condition) IMotionViewHistoryDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m motionViewHistoryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMotionViewHistoryDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m motionViewHistoryDo) Order(conds ...field.Expr) IMotionViewHistoryDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m motionViewHistoryDo) Distinct(cols ...field.Expr) IMotionViewHistoryDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m motionViewHistoryDo) Omit(cols ...field.Expr) IMotionViewHistoryDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m motionViewHistoryDo) Join(table schema.Tabler, on ...field.Expr) IMotionViewHistoryDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m motionViewHistoryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMotionViewHistoryDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m motionViewHistoryDo) RightJoin(table schema.Tabler, on ...field.Expr) IMotionViewHistoryDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m motionViewHistoryDo) Group(cols ...field.Expr) IMotionViewHistoryDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m motionViewHistoryDo) Having(conds ...gen.Condition) IMotionViewHistoryDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m motionViewHistoryDo) Limit(limit int) IMotionViewHistoryDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m motionViewHistoryDo) Offset(offset int) IMotionViewHistoryDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m motionViewHistoryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMotionViewHistoryDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m motionViewHistoryDo) Unscoped() IMotionViewHistoryDo {
	return m.withDO(m.DO.Unscoped())
}

func (m motionViewHistoryDo) Create(values ...*models.MotionViewHistory) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m motionViewHistoryDo) CreateInBatches(values []*models.MotionViewHistory, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m motionViewHistoryDo) Save(values ...*models.MotionViewHistory) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m motionViewHistoryDo) First() (*models.MotionViewHistory, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionViewHistory), nil
	}
}

func (m motionViewHistoryDo) Take() (*models.MotionViewHistory, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionViewHistory), nil
	}
}

func (m motionViewHistoryDo) Last() (*models.MotionViewHistory, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionViewHistory), nil
	}
}

func (m motionViewHistoryDo) Find() ([]*models.MotionViewHistory, error) {
	result, err := m.DO.Find()
	return result.([]*models.MotionViewHistory), err
}

func (m motionViewHistoryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MotionViewHistory, err error) {
	buf := make([]*models.MotionViewHistory, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m motionViewHistoryDo) FindInBatches(result *[]*models.MotionViewHistory, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m motionViewHistoryDo) Attrs(attrs ...field.AssignExpr) IMotionViewHistoryDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m motionViewHistoryDo) Assign(attrs ...field.AssignExpr) IMotionViewHistoryDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m motionViewHistoryDo) Joins(fields ...field.RelationField) IMotionViewHistoryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m motionViewHistoryDo) Preload(fields ...field.RelationField) IMotionViewHistoryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m motionViewHistoryDo) FirstOrInit() (*models.MotionViewHistory, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionViewHistory), nil
	}
}

func (m motionViewHistoryDo) FirstOrCreate() (*models.MotionViewHistory, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionViewHistory), nil
	}
}

func (m motionViewHistoryDo) FindByPage(offset int, limit int) (result []*models.MotionViewHistory, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m motionViewHistoryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m motionViewHistoryDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m motionViewHistoryDo) Delete(models ...*models.MotionViewHistory) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *motionViewHistoryDo) withDO(do gen.Dao) *motionViewHistoryDo {
	m.DO = *do.(*gen.DO)
	return m
}
