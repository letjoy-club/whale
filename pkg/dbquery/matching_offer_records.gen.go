// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMatchingOfferRecord(db *gorm.DB, opts ...gen.DOOption) matchingOfferRecord {
	_matchingOfferRecord := matchingOfferRecord{}

	_matchingOfferRecord.matchingOfferRecordDo.UseDB(db, opts...)
	_matchingOfferRecord.matchingOfferRecordDo.UseModel(&models.MatchingOfferRecord{})

	tableName := _matchingOfferRecord.matchingOfferRecordDo.TableName()
	_matchingOfferRecord.ALL = field.NewAsterisk(tableName)
	_matchingOfferRecord.ID = field.NewInt(tableName, "id")
	_matchingOfferRecord.ToMatchingID = field.NewString(tableName, "to_matching_id")
	_matchingOfferRecord.ToUserID = field.NewString(tableName, "to_user_id")
	_matchingOfferRecord.MatchingID = field.NewString(tableName, "matching_id")
	_matchingOfferRecord.UserID = field.NewString(tableName, "user_id")
	_matchingOfferRecord.State = field.NewString(tableName, "state")
	_matchingOfferRecord.ReactedAt = field.NewTime(tableName, "reacted_at")
	_matchingOfferRecord.CreatedAt = field.NewTime(tableName, "created_at")

	_matchingOfferRecord.fillFieldMap()

	return _matchingOfferRecord
}

type matchingOfferRecord struct {
	matchingOfferRecordDo matchingOfferRecordDo

	ALL          field.Asterisk
	ID           field.Int
	ToMatchingID field.String
	ToUserID     field.String
	MatchingID   field.String
	UserID       field.String
	State        field.String
	ReactedAt    field.Time
	CreatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (m matchingOfferRecord) Table(newTableName string) *matchingOfferRecord {
	m.matchingOfferRecordDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m matchingOfferRecord) As(alias string) *matchingOfferRecord {
	m.matchingOfferRecordDo.DO = *(m.matchingOfferRecordDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *matchingOfferRecord) updateTableName(table string) *matchingOfferRecord {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt(table, "id")
	m.ToMatchingID = field.NewString(table, "to_matching_id")
	m.ToUserID = field.NewString(table, "to_user_id")
	m.MatchingID = field.NewString(table, "matching_id")
	m.UserID = field.NewString(table, "user_id")
	m.State = field.NewString(table, "state")
	m.ReactedAt = field.NewTime(table, "reacted_at")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *matchingOfferRecord) WithContext(ctx context.Context) IMatchingOfferRecordDo {
	return m.matchingOfferRecordDo.WithContext(ctx)
}

func (m matchingOfferRecord) TableName() string { return m.matchingOfferRecordDo.TableName() }

func (m matchingOfferRecord) Alias() string { return m.matchingOfferRecordDo.Alias() }

func (m *matchingOfferRecord) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *matchingOfferRecord) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["to_matching_id"] = m.ToMatchingID
	m.fieldMap["to_user_id"] = m.ToUserID
	m.fieldMap["matching_id"] = m.MatchingID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["state"] = m.State
	m.fieldMap["reacted_at"] = m.ReactedAt
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m matchingOfferRecord) clone(db *gorm.DB) matchingOfferRecord {
	m.matchingOfferRecordDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m matchingOfferRecord) replaceDB(db *gorm.DB) matchingOfferRecord {
	m.matchingOfferRecordDo.ReplaceDB(db)
	return m
}

type matchingOfferRecordDo struct{ gen.DO }

type IMatchingOfferRecordDo interface {
	gen.SubQuery
	Debug() IMatchingOfferRecordDo
	WithContext(ctx context.Context) IMatchingOfferRecordDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatchingOfferRecordDo
	WriteDB() IMatchingOfferRecordDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatchingOfferRecordDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatchingOfferRecordDo
	Not(conds ...gen.Condition) IMatchingOfferRecordDo
	Or(conds ...gen.Condition) IMatchingOfferRecordDo
	Select(conds ...field.Expr) IMatchingOfferRecordDo
	Where(conds ...gen.Condition) IMatchingOfferRecordDo
	Order(conds ...field.Expr) IMatchingOfferRecordDo
	Distinct(cols ...field.Expr) IMatchingOfferRecordDo
	Omit(cols ...field.Expr) IMatchingOfferRecordDo
	Join(table schema.Tabler, on ...field.Expr) IMatchingOfferRecordDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingOfferRecordDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatchingOfferRecordDo
	Group(cols ...field.Expr) IMatchingOfferRecordDo
	Having(conds ...gen.Condition) IMatchingOfferRecordDo
	Limit(limit int) IMatchingOfferRecordDo
	Offset(offset int) IMatchingOfferRecordDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingOfferRecordDo
	Unscoped() IMatchingOfferRecordDo
	Create(values ...*models.MatchingOfferRecord) error
	CreateInBatches(values []*models.MatchingOfferRecord, batchSize int) error
	Save(values ...*models.MatchingOfferRecord) error
	First() (*models.MatchingOfferRecord, error)
	Take() (*models.MatchingOfferRecord, error)
	Last() (*models.MatchingOfferRecord, error)
	Find() ([]*models.MatchingOfferRecord, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingOfferRecord, err error)
	FindInBatches(result *[]*models.MatchingOfferRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MatchingOfferRecord) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatchingOfferRecordDo
	Assign(attrs ...field.AssignExpr) IMatchingOfferRecordDo
	Joins(fields ...field.RelationField) IMatchingOfferRecordDo
	Preload(fields ...field.RelationField) IMatchingOfferRecordDo
	FirstOrInit() (*models.MatchingOfferRecord, error)
	FirstOrCreate() (*models.MatchingOfferRecord, error)
	FindByPage(offset int, limit int) (result []*models.MatchingOfferRecord, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatchingOfferRecordDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matchingOfferRecordDo) Debug() IMatchingOfferRecordDo {
	return m.withDO(m.DO.Debug())
}

func (m matchingOfferRecordDo) WithContext(ctx context.Context) IMatchingOfferRecordDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchingOfferRecordDo) ReadDB() IMatchingOfferRecordDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchingOfferRecordDo) WriteDB() IMatchingOfferRecordDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchingOfferRecordDo) Session(config *gorm.Session) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchingOfferRecordDo) Clauses(conds ...clause.Expression) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchingOfferRecordDo) Returning(value interface{}, columns ...string) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchingOfferRecordDo) Not(conds ...gen.Condition) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchingOfferRecordDo) Or(conds ...gen.Condition) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchingOfferRecordDo) Select(conds ...field.Expr) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchingOfferRecordDo) Where(conds ...gen.Condition) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchingOfferRecordDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMatchingOfferRecordDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m matchingOfferRecordDo) Order(conds ...field.Expr) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchingOfferRecordDo) Distinct(cols ...field.Expr) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchingOfferRecordDo) Omit(cols ...field.Expr) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchingOfferRecordDo) Join(table schema.Tabler, on ...field.Expr) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchingOfferRecordDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingOfferRecordDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchingOfferRecordDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatchingOfferRecordDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchingOfferRecordDo) Group(cols ...field.Expr) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchingOfferRecordDo) Having(conds ...gen.Condition) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchingOfferRecordDo) Limit(limit int) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchingOfferRecordDo) Offset(offset int) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchingOfferRecordDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchingOfferRecordDo) Unscoped() IMatchingOfferRecordDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchingOfferRecordDo) Create(values ...*models.MatchingOfferRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchingOfferRecordDo) CreateInBatches(values []*models.MatchingOfferRecord, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchingOfferRecordDo) Save(values ...*models.MatchingOfferRecord) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchingOfferRecordDo) First() (*models.MatchingOfferRecord, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingOfferRecord), nil
	}
}

func (m matchingOfferRecordDo) Take() (*models.MatchingOfferRecord, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingOfferRecord), nil
	}
}

func (m matchingOfferRecordDo) Last() (*models.MatchingOfferRecord, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingOfferRecord), nil
	}
}

func (m matchingOfferRecordDo) Find() ([]*models.MatchingOfferRecord, error) {
	result, err := m.DO.Find()
	return result.([]*models.MatchingOfferRecord), err
}

func (m matchingOfferRecordDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingOfferRecord, err error) {
	buf := make([]*models.MatchingOfferRecord, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchingOfferRecordDo) FindInBatches(result *[]*models.MatchingOfferRecord, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchingOfferRecordDo) Attrs(attrs ...field.AssignExpr) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchingOfferRecordDo) Assign(attrs ...field.AssignExpr) IMatchingOfferRecordDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchingOfferRecordDo) Joins(fields ...field.RelationField) IMatchingOfferRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchingOfferRecordDo) Preload(fields ...field.RelationField) IMatchingOfferRecordDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchingOfferRecordDo) FirstOrInit() (*models.MatchingOfferRecord, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingOfferRecord), nil
	}
}

func (m matchingOfferRecordDo) FirstOrCreate() (*models.MatchingOfferRecord, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingOfferRecord), nil
	}
}

func (m matchingOfferRecordDo) FindByPage(offset int, limit int) (result []*models.MatchingOfferRecord, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchingOfferRecordDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchingOfferRecordDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchingOfferRecordDo) Delete(models ...*models.MatchingOfferRecord) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchingOfferRecordDo) withDO(do gen.Dao) *matchingOfferRecordDo {
	m.DO = *do.(*gen.DO)
	return m
}
