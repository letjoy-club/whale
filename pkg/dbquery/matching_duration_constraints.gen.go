// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMatchingDurationConstraint(db *gorm.DB, opts ...gen.DOOption) matchingDurationConstraint {
	_matchingDurationConstraint := matchingDurationConstraint{}

	_matchingDurationConstraint.matchingDurationConstraintDo.UseDB(db, opts...)
	_matchingDurationConstraint.matchingDurationConstraintDo.UseModel(&models.MatchingDurationConstraint{})

	tableName := _matchingDurationConstraint.matchingDurationConstraintDo.TableName()
	_matchingDurationConstraint.ALL = field.NewAsterisk(tableName)
	_matchingDurationConstraint.ID = field.NewInt(tableName, "id")
	_matchingDurationConstraint.UserID = field.NewString(tableName, "user_id")
	_matchingDurationConstraint.Total = field.NewInt(tableName, "total")
	_matchingDurationConstraint.Remain = field.NewInt(tableName, "remain")
	_matchingDurationConstraint.StartDate = field.NewTime(tableName, "start_date")
	_matchingDurationConstraint.StopDate = field.NewTime(tableName, "stop_date")
	_matchingDurationConstraint.UpdatedAt = field.NewTime(tableName, "updated_at")

	_matchingDurationConstraint.fillFieldMap()

	return _matchingDurationConstraint
}

type matchingDurationConstraint struct {
	matchingDurationConstraintDo matchingDurationConstraintDo

	ALL       field.Asterisk
	ID        field.Int
	UserID    field.String
	Total     field.Int
	Remain    field.Int
	StartDate field.Time
	StopDate  field.Time
	UpdatedAt field.Time

	fieldMap map[string]field.Expr
}

func (m matchingDurationConstraint) Table(newTableName string) *matchingDurationConstraint {
	m.matchingDurationConstraintDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m matchingDurationConstraint) As(alias string) *matchingDurationConstraint {
	m.matchingDurationConstraintDo.DO = *(m.matchingDurationConstraintDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *matchingDurationConstraint) updateTableName(table string) *matchingDurationConstraint {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt(table, "id")
	m.UserID = field.NewString(table, "user_id")
	m.Total = field.NewInt(table, "total")
	m.Remain = field.NewInt(table, "remain")
	m.StartDate = field.NewTime(table, "start_date")
	m.StopDate = field.NewTime(table, "stop_date")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *matchingDurationConstraint) WithContext(ctx context.Context) IMatchingDurationConstraintDo {
	return m.matchingDurationConstraintDo.WithContext(ctx)
}

func (m matchingDurationConstraint) TableName() string {
	return m.matchingDurationConstraintDo.TableName()
}

func (m matchingDurationConstraint) Alias() string { return m.matchingDurationConstraintDo.Alias() }

func (m *matchingDurationConstraint) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *matchingDurationConstraint) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["total"] = m.Total
	m.fieldMap["remain"] = m.Remain
	m.fieldMap["start_date"] = m.StartDate
	m.fieldMap["stop_date"] = m.StopDate
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m matchingDurationConstraint) clone(db *gorm.DB) matchingDurationConstraint {
	m.matchingDurationConstraintDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m matchingDurationConstraint) replaceDB(db *gorm.DB) matchingDurationConstraint {
	m.matchingDurationConstraintDo.ReplaceDB(db)
	return m
}

type matchingDurationConstraintDo struct{ gen.DO }

type IMatchingDurationConstraintDo interface {
	gen.SubQuery
	Debug() IMatchingDurationConstraintDo
	WithContext(ctx context.Context) IMatchingDurationConstraintDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatchingDurationConstraintDo
	WriteDB() IMatchingDurationConstraintDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatchingDurationConstraintDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatchingDurationConstraintDo
	Not(conds ...gen.Condition) IMatchingDurationConstraintDo
	Or(conds ...gen.Condition) IMatchingDurationConstraintDo
	Select(conds ...field.Expr) IMatchingDurationConstraintDo
	Where(conds ...gen.Condition) IMatchingDurationConstraintDo
	Order(conds ...field.Expr) IMatchingDurationConstraintDo
	Distinct(cols ...field.Expr) IMatchingDurationConstraintDo
	Omit(cols ...field.Expr) IMatchingDurationConstraintDo
	Join(table schema.Tabler, on ...field.Expr) IMatchingDurationConstraintDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingDurationConstraintDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatchingDurationConstraintDo
	Group(cols ...field.Expr) IMatchingDurationConstraintDo
	Having(conds ...gen.Condition) IMatchingDurationConstraintDo
	Limit(limit int) IMatchingDurationConstraintDo
	Offset(offset int) IMatchingDurationConstraintDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingDurationConstraintDo
	Unscoped() IMatchingDurationConstraintDo
	Create(values ...*models.MatchingDurationConstraint) error
	CreateInBatches(values []*models.MatchingDurationConstraint, batchSize int) error
	Save(values ...*models.MatchingDurationConstraint) error
	First() (*models.MatchingDurationConstraint, error)
	Take() (*models.MatchingDurationConstraint, error)
	Last() (*models.MatchingDurationConstraint, error)
	Find() ([]*models.MatchingDurationConstraint, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingDurationConstraint, err error)
	FindInBatches(result *[]*models.MatchingDurationConstraint, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MatchingDurationConstraint) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatchingDurationConstraintDo
	Assign(attrs ...field.AssignExpr) IMatchingDurationConstraintDo
	Joins(fields ...field.RelationField) IMatchingDurationConstraintDo
	Preload(fields ...field.RelationField) IMatchingDurationConstraintDo
	FirstOrInit() (*models.MatchingDurationConstraint, error)
	FirstOrCreate() (*models.MatchingDurationConstraint, error)
	FindByPage(offset int, limit int) (result []*models.MatchingDurationConstraint, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatchingDurationConstraintDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matchingDurationConstraintDo) Debug() IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Debug())
}

func (m matchingDurationConstraintDo) WithContext(ctx context.Context) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchingDurationConstraintDo) ReadDB() IMatchingDurationConstraintDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchingDurationConstraintDo) WriteDB() IMatchingDurationConstraintDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchingDurationConstraintDo) Session(config *gorm.Session) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchingDurationConstraintDo) Clauses(conds ...clause.Expression) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchingDurationConstraintDo) Returning(value interface{}, columns ...string) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchingDurationConstraintDo) Not(conds ...gen.Condition) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchingDurationConstraintDo) Or(conds ...gen.Condition) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchingDurationConstraintDo) Select(conds ...field.Expr) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchingDurationConstraintDo) Where(conds ...gen.Condition) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchingDurationConstraintDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMatchingDurationConstraintDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m matchingDurationConstraintDo) Order(conds ...field.Expr) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchingDurationConstraintDo) Distinct(cols ...field.Expr) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchingDurationConstraintDo) Omit(cols ...field.Expr) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchingDurationConstraintDo) Join(table schema.Tabler, on ...field.Expr) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchingDurationConstraintDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchingDurationConstraintDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchingDurationConstraintDo) Group(cols ...field.Expr) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchingDurationConstraintDo) Having(conds ...gen.Condition) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchingDurationConstraintDo) Limit(limit int) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchingDurationConstraintDo) Offset(offset int) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchingDurationConstraintDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchingDurationConstraintDo) Unscoped() IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchingDurationConstraintDo) Create(values ...*models.MatchingDurationConstraint) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchingDurationConstraintDo) CreateInBatches(values []*models.MatchingDurationConstraint, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchingDurationConstraintDo) Save(values ...*models.MatchingDurationConstraint) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchingDurationConstraintDo) First() (*models.MatchingDurationConstraint, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingDurationConstraint), nil
	}
}

func (m matchingDurationConstraintDo) Take() (*models.MatchingDurationConstraint, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingDurationConstraint), nil
	}
}

func (m matchingDurationConstraintDo) Last() (*models.MatchingDurationConstraint, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingDurationConstraint), nil
	}
}

func (m matchingDurationConstraintDo) Find() ([]*models.MatchingDurationConstraint, error) {
	result, err := m.DO.Find()
	return result.([]*models.MatchingDurationConstraint), err
}

func (m matchingDurationConstraintDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingDurationConstraint, err error) {
	buf := make([]*models.MatchingDurationConstraint, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchingDurationConstraintDo) FindInBatches(result *[]*models.MatchingDurationConstraint, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchingDurationConstraintDo) Attrs(attrs ...field.AssignExpr) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchingDurationConstraintDo) Assign(attrs ...field.AssignExpr) IMatchingDurationConstraintDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchingDurationConstraintDo) Joins(fields ...field.RelationField) IMatchingDurationConstraintDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchingDurationConstraintDo) Preload(fields ...field.RelationField) IMatchingDurationConstraintDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchingDurationConstraintDo) FirstOrInit() (*models.MatchingDurationConstraint, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingDurationConstraint), nil
	}
}

func (m matchingDurationConstraintDo) FirstOrCreate() (*models.MatchingDurationConstraint, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingDurationConstraint), nil
	}
}

func (m matchingDurationConstraintDo) FindByPage(offset int, limit int) (result []*models.MatchingDurationConstraint, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchingDurationConstraintDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchingDurationConstraintDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchingDurationConstraintDo) Delete(models ...*models.MatchingDurationConstraint) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchingDurationConstraintDo) withDO(do gen.Dao) *matchingDurationConstraintDo {
	m.DO = *do.(*gen.DO)
	return m
}
