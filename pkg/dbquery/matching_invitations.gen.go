// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMatchingInvitation(db *gorm.DB, opts ...gen.DOOption) matchingInvitation {
	_matchingInvitation := matchingInvitation{}

	_matchingInvitation.matchingInvitationDo.UseDB(db, opts...)
	_matchingInvitation.matchingInvitationDo.UseModel(&models.MatchingInvitation{})

	tableName := _matchingInvitation.matchingInvitationDo.TableName()
	_matchingInvitation.ALL = field.NewAsterisk(tableName)
	_matchingInvitation.ID = field.NewString(tableName, "id")
	_matchingInvitation.UserID = field.NewString(tableName, "user_id")
	_matchingInvitation.InviteeID = field.NewString(tableName, "invitee_id")
	_matchingInvitation.TopicID = field.NewString(tableName, "topic_id")
	_matchingInvitation.Remark = field.NewString(tableName, "remark")
	_matchingInvitation.MatchingResultId = field.NewInt(tableName, "matching_result_id")
	_matchingInvitation.MatchingIds = field.NewField(tableName, "matching_ids")
	_matchingInvitation.CityID = field.NewString(tableName, "city_id")
	_matchingInvitation.AreaIDs = field.NewField(tableName, "area_ids")
	_matchingInvitation.Closed = field.NewBool(tableName, "closed")
	_matchingInvitation.ConfirmState = field.NewString(tableName, "confirm_state")
	_matchingInvitation.ConfirmedAt = field.NewTime(tableName, "confirmed_at")
	_matchingInvitation.CreatedAt = field.NewTime(tableName, "created_at")
	_matchingInvitation.UpdatedAt = field.NewTime(tableName, "updated_at")

	_matchingInvitation.fillFieldMap()

	return _matchingInvitation
}

type matchingInvitation struct {
	matchingInvitationDo matchingInvitationDo

	ALL              field.Asterisk
	ID               field.String
	UserID           field.String
	InviteeID        field.String
	TopicID          field.String
	Remark           field.String
	MatchingResultId field.Int
	MatchingIds      field.Field
	CityID           field.String
	AreaIDs          field.Field
	Closed           field.Bool
	ConfirmState     field.String
	ConfirmedAt      field.Time
	CreatedAt        field.Time
	UpdatedAt        field.Time

	fieldMap map[string]field.Expr
}

func (m matchingInvitation) Table(newTableName string) *matchingInvitation {
	m.matchingInvitationDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m matchingInvitation) As(alias string) *matchingInvitation {
	m.matchingInvitationDo.DO = *(m.matchingInvitationDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *matchingInvitation) updateTableName(table string) *matchingInvitation {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewString(table, "id")
	m.UserID = field.NewString(table, "user_id")
	m.InviteeID = field.NewString(table, "invitee_id")
	m.TopicID = field.NewString(table, "topic_id")
	m.Remark = field.NewString(table, "remark")
	m.MatchingResultId = field.NewInt(table, "matching_result_id")
	m.MatchingIds = field.NewField(table, "matching_ids")
	m.CityID = field.NewString(table, "city_id")
	m.AreaIDs = field.NewField(table, "area_ids")
	m.Closed = field.NewBool(table, "closed")
	m.ConfirmState = field.NewString(table, "confirm_state")
	m.ConfirmedAt = field.NewTime(table, "confirmed_at")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *matchingInvitation) WithContext(ctx context.Context) IMatchingInvitationDo {
	return m.matchingInvitationDo.WithContext(ctx)
}

func (m matchingInvitation) TableName() string { return m.matchingInvitationDo.TableName() }

func (m matchingInvitation) Alias() string { return m.matchingInvitationDo.Alias() }

func (m *matchingInvitation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *matchingInvitation) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 14)
	m.fieldMap["id"] = m.ID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["invitee_id"] = m.InviteeID
	m.fieldMap["topic_id"] = m.TopicID
	m.fieldMap["remark"] = m.Remark
	m.fieldMap["matching_result_id"] = m.MatchingResultId
	m.fieldMap["matching_ids"] = m.MatchingIds
	m.fieldMap["city_id"] = m.CityID
	m.fieldMap["area_ids"] = m.AreaIDs
	m.fieldMap["closed"] = m.Closed
	m.fieldMap["confirm_state"] = m.ConfirmState
	m.fieldMap["confirmed_at"] = m.ConfirmedAt
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m matchingInvitation) clone(db *gorm.DB) matchingInvitation {
	m.matchingInvitationDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m matchingInvitation) replaceDB(db *gorm.DB) matchingInvitation {
	m.matchingInvitationDo.ReplaceDB(db)
	return m
}

type matchingInvitationDo struct{ gen.DO }

type IMatchingInvitationDo interface {
	gen.SubQuery
	Debug() IMatchingInvitationDo
	WithContext(ctx context.Context) IMatchingInvitationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatchingInvitationDo
	WriteDB() IMatchingInvitationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatchingInvitationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatchingInvitationDo
	Not(conds ...gen.Condition) IMatchingInvitationDo
	Or(conds ...gen.Condition) IMatchingInvitationDo
	Select(conds ...field.Expr) IMatchingInvitationDo
	Where(conds ...gen.Condition) IMatchingInvitationDo
	Order(conds ...field.Expr) IMatchingInvitationDo
	Distinct(cols ...field.Expr) IMatchingInvitationDo
	Omit(cols ...field.Expr) IMatchingInvitationDo
	Join(table schema.Tabler, on ...field.Expr) IMatchingInvitationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingInvitationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatchingInvitationDo
	Group(cols ...field.Expr) IMatchingInvitationDo
	Having(conds ...gen.Condition) IMatchingInvitationDo
	Limit(limit int) IMatchingInvitationDo
	Offset(offset int) IMatchingInvitationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingInvitationDo
	Unscoped() IMatchingInvitationDo
	Create(values ...*models.MatchingInvitation) error
	CreateInBatches(values []*models.MatchingInvitation, batchSize int) error
	Save(values ...*models.MatchingInvitation) error
	First() (*models.MatchingInvitation, error)
	Take() (*models.MatchingInvitation, error)
	Last() (*models.MatchingInvitation, error)
	Find() ([]*models.MatchingInvitation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingInvitation, err error)
	FindInBatches(result *[]*models.MatchingInvitation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MatchingInvitation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatchingInvitationDo
	Assign(attrs ...field.AssignExpr) IMatchingInvitationDo
	Joins(fields ...field.RelationField) IMatchingInvitationDo
	Preload(fields ...field.RelationField) IMatchingInvitationDo
	FirstOrInit() (*models.MatchingInvitation, error)
	FirstOrCreate() (*models.MatchingInvitation, error)
	FindByPage(offset int, limit int) (result []*models.MatchingInvitation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatchingInvitationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matchingInvitationDo) Debug() IMatchingInvitationDo {
	return m.withDO(m.DO.Debug())
}

func (m matchingInvitationDo) WithContext(ctx context.Context) IMatchingInvitationDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchingInvitationDo) ReadDB() IMatchingInvitationDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchingInvitationDo) WriteDB() IMatchingInvitationDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchingInvitationDo) Session(config *gorm.Session) IMatchingInvitationDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchingInvitationDo) Clauses(conds ...clause.Expression) IMatchingInvitationDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchingInvitationDo) Returning(value interface{}, columns ...string) IMatchingInvitationDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchingInvitationDo) Not(conds ...gen.Condition) IMatchingInvitationDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchingInvitationDo) Or(conds ...gen.Condition) IMatchingInvitationDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchingInvitationDo) Select(conds ...field.Expr) IMatchingInvitationDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchingInvitationDo) Where(conds ...gen.Condition) IMatchingInvitationDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchingInvitationDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMatchingInvitationDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m matchingInvitationDo) Order(conds ...field.Expr) IMatchingInvitationDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchingInvitationDo) Distinct(cols ...field.Expr) IMatchingInvitationDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchingInvitationDo) Omit(cols ...field.Expr) IMatchingInvitationDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchingInvitationDo) Join(table schema.Tabler, on ...field.Expr) IMatchingInvitationDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchingInvitationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingInvitationDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchingInvitationDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatchingInvitationDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchingInvitationDo) Group(cols ...field.Expr) IMatchingInvitationDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchingInvitationDo) Having(conds ...gen.Condition) IMatchingInvitationDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchingInvitationDo) Limit(limit int) IMatchingInvitationDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchingInvitationDo) Offset(offset int) IMatchingInvitationDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchingInvitationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingInvitationDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchingInvitationDo) Unscoped() IMatchingInvitationDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchingInvitationDo) Create(values ...*models.MatchingInvitation) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchingInvitationDo) CreateInBatches(values []*models.MatchingInvitation, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchingInvitationDo) Save(values ...*models.MatchingInvitation) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchingInvitationDo) First() (*models.MatchingInvitation, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingInvitation), nil
	}
}

func (m matchingInvitationDo) Take() (*models.MatchingInvitation, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingInvitation), nil
	}
}

func (m matchingInvitationDo) Last() (*models.MatchingInvitation, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingInvitation), nil
	}
}

func (m matchingInvitationDo) Find() ([]*models.MatchingInvitation, error) {
	result, err := m.DO.Find()
	return result.([]*models.MatchingInvitation), err
}

func (m matchingInvitationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingInvitation, err error) {
	buf := make([]*models.MatchingInvitation, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchingInvitationDo) FindInBatches(result *[]*models.MatchingInvitation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchingInvitationDo) Attrs(attrs ...field.AssignExpr) IMatchingInvitationDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchingInvitationDo) Assign(attrs ...field.AssignExpr) IMatchingInvitationDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchingInvitationDo) Joins(fields ...field.RelationField) IMatchingInvitationDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchingInvitationDo) Preload(fields ...field.RelationField) IMatchingInvitationDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchingInvitationDo) FirstOrInit() (*models.MatchingInvitation, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingInvitation), nil
	}
}

func (m matchingInvitationDo) FirstOrCreate() (*models.MatchingInvitation, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingInvitation), nil
	}
}

func (m matchingInvitationDo) FindByPage(offset int, limit int) (result []*models.MatchingInvitation, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchingInvitationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchingInvitationDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchingInvitationDo) Delete(models ...*models.MatchingInvitation) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchingInvitationDo) withDO(do gen.Dao) *matchingInvitationDo {
	m.DO = *do.(*gen.DO)
	return m
}
