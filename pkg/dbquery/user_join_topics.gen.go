// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserJoinTopic(db *gorm.DB, opts ...gen.DOOption) userJoinTopic {
	_userJoinTopic := userJoinTopic{}

	_userJoinTopic.userJoinTopicDo.UseDB(db, opts...)
	_userJoinTopic.userJoinTopicDo.UseModel(&models.UserJoinTopic{})

	tableName := _userJoinTopic.userJoinTopicDo.TableName()
	_userJoinTopic.ALL = field.NewAsterisk(tableName)
	_userJoinTopic.ID = field.NewInt(tableName, "id")
	_userJoinTopic.TopicID = field.NewString(tableName, "topic_id")
	_userJoinTopic.CityID = field.NewString(tableName, "city_id")
	_userJoinTopic.UserID = field.NewString(tableName, "user_id")
	_userJoinTopic.LatestMatchingID = field.NewString(tableName, "latest_matching_id")
	_userJoinTopic.Times = field.NewInt(tableName, "times")
	_userJoinTopic.UpdatedAt = field.NewInt(tableName, "updated_at")
	_userJoinTopic.CreatedAt = field.NewInt(tableName, "created_at")

	_userJoinTopic.fillFieldMap()

	return _userJoinTopic
}

type userJoinTopic struct {
	userJoinTopicDo userJoinTopicDo

	ALL              field.Asterisk
	ID               field.Int
	TopicID          field.String
	CityID           field.String
	UserID           field.String
	LatestMatchingID field.String
	Times            field.Int
	UpdatedAt        field.Int
	CreatedAt        field.Int

	fieldMap map[string]field.Expr
}

func (u userJoinTopic) Table(newTableName string) *userJoinTopic {
	u.userJoinTopicDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userJoinTopic) As(alias string) *userJoinTopic {
	u.userJoinTopicDo.DO = *(u.userJoinTopicDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userJoinTopic) updateTableName(table string) *userJoinTopic {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.TopicID = field.NewString(table, "topic_id")
	u.CityID = field.NewString(table, "city_id")
	u.UserID = field.NewString(table, "user_id")
	u.LatestMatchingID = field.NewString(table, "latest_matching_id")
	u.Times = field.NewInt(table, "times")
	u.UpdatedAt = field.NewInt(table, "updated_at")
	u.CreatedAt = field.NewInt(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *userJoinTopic) WithContext(ctx context.Context) IUserJoinTopicDo {
	return u.userJoinTopicDo.WithContext(ctx)
}

func (u userJoinTopic) TableName() string { return u.userJoinTopicDo.TableName() }

func (u userJoinTopic) Alias() string { return u.userJoinTopicDo.Alias() }

func (u *userJoinTopic) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userJoinTopic) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["topic_id"] = u.TopicID
	u.fieldMap["city_id"] = u.CityID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["latest_matching_id"] = u.LatestMatchingID
	u.fieldMap["times"] = u.Times
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u userJoinTopic) clone(db *gorm.DB) userJoinTopic {
	u.userJoinTopicDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userJoinTopic) replaceDB(db *gorm.DB) userJoinTopic {
	u.userJoinTopicDo.ReplaceDB(db)
	return u
}

type userJoinTopicDo struct{ gen.DO }

type IUserJoinTopicDo interface {
	gen.SubQuery
	Debug() IUserJoinTopicDo
	WithContext(ctx context.Context) IUserJoinTopicDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserJoinTopicDo
	WriteDB() IUserJoinTopicDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserJoinTopicDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserJoinTopicDo
	Not(conds ...gen.Condition) IUserJoinTopicDo
	Or(conds ...gen.Condition) IUserJoinTopicDo
	Select(conds ...field.Expr) IUserJoinTopicDo
	Where(conds ...gen.Condition) IUserJoinTopicDo
	Order(conds ...field.Expr) IUserJoinTopicDo
	Distinct(cols ...field.Expr) IUserJoinTopicDo
	Omit(cols ...field.Expr) IUserJoinTopicDo
	Join(table schema.Tabler, on ...field.Expr) IUserJoinTopicDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserJoinTopicDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserJoinTopicDo
	Group(cols ...field.Expr) IUserJoinTopicDo
	Having(conds ...gen.Condition) IUserJoinTopicDo
	Limit(limit int) IUserJoinTopicDo
	Offset(offset int) IUserJoinTopicDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserJoinTopicDo
	Unscoped() IUserJoinTopicDo
	Create(values ...*models.UserJoinTopic) error
	CreateInBatches(values []*models.UserJoinTopic, batchSize int) error
	Save(values ...*models.UserJoinTopic) error
	First() (*models.UserJoinTopic, error)
	Take() (*models.UserJoinTopic, error)
	Last() (*models.UserJoinTopic, error)
	Find() ([]*models.UserJoinTopic, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserJoinTopic, err error)
	FindInBatches(result *[]*models.UserJoinTopic, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.UserJoinTopic) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserJoinTopicDo
	Assign(attrs ...field.AssignExpr) IUserJoinTopicDo
	Joins(fields ...field.RelationField) IUserJoinTopicDo
	Preload(fields ...field.RelationField) IUserJoinTopicDo
	FirstOrInit() (*models.UserJoinTopic, error)
	FirstOrCreate() (*models.UserJoinTopic, error)
	FindByPage(offset int, limit int) (result []*models.UserJoinTopic, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserJoinTopicDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userJoinTopicDo) Debug() IUserJoinTopicDo {
	return u.withDO(u.DO.Debug())
}

func (u userJoinTopicDo) WithContext(ctx context.Context) IUserJoinTopicDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userJoinTopicDo) ReadDB() IUserJoinTopicDo {
	return u.Clauses(dbresolver.Read)
}

func (u userJoinTopicDo) WriteDB() IUserJoinTopicDo {
	return u.Clauses(dbresolver.Write)
}

func (u userJoinTopicDo) Session(config *gorm.Session) IUserJoinTopicDo {
	return u.withDO(u.DO.Session(config))
}

func (u userJoinTopicDo) Clauses(conds ...clause.Expression) IUserJoinTopicDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userJoinTopicDo) Returning(value interface{}, columns ...string) IUserJoinTopicDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userJoinTopicDo) Not(conds ...gen.Condition) IUserJoinTopicDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userJoinTopicDo) Or(conds ...gen.Condition) IUserJoinTopicDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userJoinTopicDo) Select(conds ...field.Expr) IUserJoinTopicDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userJoinTopicDo) Where(conds ...gen.Condition) IUserJoinTopicDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userJoinTopicDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserJoinTopicDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userJoinTopicDo) Order(conds ...field.Expr) IUserJoinTopicDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userJoinTopicDo) Distinct(cols ...field.Expr) IUserJoinTopicDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userJoinTopicDo) Omit(cols ...field.Expr) IUserJoinTopicDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userJoinTopicDo) Join(table schema.Tabler, on ...field.Expr) IUserJoinTopicDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userJoinTopicDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserJoinTopicDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userJoinTopicDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserJoinTopicDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userJoinTopicDo) Group(cols ...field.Expr) IUserJoinTopicDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userJoinTopicDo) Having(conds ...gen.Condition) IUserJoinTopicDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userJoinTopicDo) Limit(limit int) IUserJoinTopicDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userJoinTopicDo) Offset(offset int) IUserJoinTopicDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userJoinTopicDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserJoinTopicDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userJoinTopicDo) Unscoped() IUserJoinTopicDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userJoinTopicDo) Create(values ...*models.UserJoinTopic) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userJoinTopicDo) CreateInBatches(values []*models.UserJoinTopic, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userJoinTopicDo) Save(values ...*models.UserJoinTopic) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userJoinTopicDo) First() (*models.UserJoinTopic, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserJoinTopic), nil
	}
}

func (u userJoinTopicDo) Take() (*models.UserJoinTopic, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserJoinTopic), nil
	}
}

func (u userJoinTopicDo) Last() (*models.UserJoinTopic, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserJoinTopic), nil
	}
}

func (u userJoinTopicDo) Find() ([]*models.UserJoinTopic, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserJoinTopic), err
}

func (u userJoinTopicDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserJoinTopic, err error) {
	buf := make([]*models.UserJoinTopic, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userJoinTopicDo) FindInBatches(result *[]*models.UserJoinTopic, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userJoinTopicDo) Attrs(attrs ...field.AssignExpr) IUserJoinTopicDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userJoinTopicDo) Assign(attrs ...field.AssignExpr) IUserJoinTopicDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userJoinTopicDo) Joins(fields ...field.RelationField) IUserJoinTopicDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userJoinTopicDo) Preload(fields ...field.RelationField) IUserJoinTopicDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userJoinTopicDo) FirstOrInit() (*models.UserJoinTopic, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserJoinTopic), nil
	}
}

func (u userJoinTopicDo) FirstOrCreate() (*models.UserJoinTopic, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserJoinTopic), nil
	}
}

func (u userJoinTopicDo) FindByPage(offset int, limit int) (result []*models.UserJoinTopic, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userJoinTopicDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userJoinTopicDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userJoinTopicDo) Delete(models ...*models.UserJoinTopic) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userJoinTopicDo) withDO(do gen.Dao) *userJoinTopicDo {
	u.DO = *do.(*gen.DO)
	return u
}
