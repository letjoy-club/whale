// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserLikeMatching(db *gorm.DB, opts ...gen.DOOption) userLikeMatching {
	_userLikeMatching := userLikeMatching{}

	_userLikeMatching.userLikeMatchingDo.UseDB(db, opts...)
	_userLikeMatching.userLikeMatchingDo.UseModel(&models.UserLikeMatching{})

	tableName := _userLikeMatching.userLikeMatchingDo.TableName()
	_userLikeMatching.ALL = field.NewAsterisk(tableName)
	_userLikeMatching.ID = field.NewInt(tableName, "id")
	_userLikeMatching.ToMatchingID = field.NewString(tableName, "to_matching_id")
	_userLikeMatching.ToUserID = field.NewString(tableName, "to_user_id")
	_userLikeMatching.UserID = field.NewString(tableName, "user_id")
	_userLikeMatching.CreatedAt = field.NewTime(tableName, "created_at")

	_userLikeMatching.fillFieldMap()

	return _userLikeMatching
}

type userLikeMatching struct {
	userLikeMatchingDo userLikeMatchingDo

	ALL          field.Asterisk
	ID           field.Int
	ToMatchingID field.String
	ToUserID     field.String
	UserID       field.String
	CreatedAt    field.Time

	fieldMap map[string]field.Expr
}

func (u userLikeMatching) Table(newTableName string) *userLikeMatching {
	u.userLikeMatchingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLikeMatching) As(alias string) *userLikeMatching {
	u.userLikeMatchingDo.DO = *(u.userLikeMatchingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLikeMatching) updateTableName(table string) *userLikeMatching {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.ToMatchingID = field.NewString(table, "to_matching_id")
	u.ToUserID = field.NewString(table, "to_user_id")
	u.UserID = field.NewString(table, "user_id")
	u.CreatedAt = field.NewTime(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *userLikeMatching) WithContext(ctx context.Context) IUserLikeMatchingDo {
	return u.userLikeMatchingDo.WithContext(ctx)
}

func (u userLikeMatching) TableName() string { return u.userLikeMatchingDo.TableName() }

func (u userLikeMatching) Alias() string { return u.userLikeMatchingDo.Alias() }

func (u *userLikeMatching) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLikeMatching) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 5)
	u.fieldMap["id"] = u.ID
	u.fieldMap["to_matching_id"] = u.ToMatchingID
	u.fieldMap["to_user_id"] = u.ToUserID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u userLikeMatching) clone(db *gorm.DB) userLikeMatching {
	u.userLikeMatchingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userLikeMatching) replaceDB(db *gorm.DB) userLikeMatching {
	u.userLikeMatchingDo.ReplaceDB(db)
	return u
}

type userLikeMatchingDo struct{ gen.DO }

type IUserLikeMatchingDo interface {
	gen.SubQuery
	Debug() IUserLikeMatchingDo
	WithContext(ctx context.Context) IUserLikeMatchingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserLikeMatchingDo
	WriteDB() IUserLikeMatchingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserLikeMatchingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserLikeMatchingDo
	Not(conds ...gen.Condition) IUserLikeMatchingDo
	Or(conds ...gen.Condition) IUserLikeMatchingDo
	Select(conds ...field.Expr) IUserLikeMatchingDo
	Where(conds ...gen.Condition) IUserLikeMatchingDo
	Order(conds ...field.Expr) IUserLikeMatchingDo
	Distinct(cols ...field.Expr) IUserLikeMatchingDo
	Omit(cols ...field.Expr) IUserLikeMatchingDo
	Join(table schema.Tabler, on ...field.Expr) IUserLikeMatchingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserLikeMatchingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserLikeMatchingDo
	Group(cols ...field.Expr) IUserLikeMatchingDo
	Having(conds ...gen.Condition) IUserLikeMatchingDo
	Limit(limit int) IUserLikeMatchingDo
	Offset(offset int) IUserLikeMatchingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLikeMatchingDo
	Unscoped() IUserLikeMatchingDo
	Create(values ...*models.UserLikeMatching) error
	CreateInBatches(values []*models.UserLikeMatching, batchSize int) error
	Save(values ...*models.UserLikeMatching) error
	First() (*models.UserLikeMatching, error)
	Take() (*models.UserLikeMatching, error)
	Last() (*models.UserLikeMatching, error)
	Find() ([]*models.UserLikeMatching, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserLikeMatching, err error)
	FindInBatches(result *[]*models.UserLikeMatching, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.UserLikeMatching) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserLikeMatchingDo
	Assign(attrs ...field.AssignExpr) IUserLikeMatchingDo
	Joins(fields ...field.RelationField) IUserLikeMatchingDo
	Preload(fields ...field.RelationField) IUserLikeMatchingDo
	FirstOrInit() (*models.UserLikeMatching, error)
	FirstOrCreate() (*models.UserLikeMatching, error)
	FindByPage(offset int, limit int) (result []*models.UserLikeMatching, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserLikeMatchingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userLikeMatchingDo) Debug() IUserLikeMatchingDo {
	return u.withDO(u.DO.Debug())
}

func (u userLikeMatchingDo) WithContext(ctx context.Context) IUserLikeMatchingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLikeMatchingDo) ReadDB() IUserLikeMatchingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLikeMatchingDo) WriteDB() IUserLikeMatchingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLikeMatchingDo) Session(config *gorm.Session) IUserLikeMatchingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLikeMatchingDo) Clauses(conds ...clause.Expression) IUserLikeMatchingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLikeMatchingDo) Returning(value interface{}, columns ...string) IUserLikeMatchingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLikeMatchingDo) Not(conds ...gen.Condition) IUserLikeMatchingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLikeMatchingDo) Or(conds ...gen.Condition) IUserLikeMatchingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLikeMatchingDo) Select(conds ...field.Expr) IUserLikeMatchingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLikeMatchingDo) Where(conds ...gen.Condition) IUserLikeMatchingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLikeMatchingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserLikeMatchingDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userLikeMatchingDo) Order(conds ...field.Expr) IUserLikeMatchingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLikeMatchingDo) Distinct(cols ...field.Expr) IUserLikeMatchingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLikeMatchingDo) Omit(cols ...field.Expr) IUserLikeMatchingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLikeMatchingDo) Join(table schema.Tabler, on ...field.Expr) IUserLikeMatchingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLikeMatchingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserLikeMatchingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLikeMatchingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserLikeMatchingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLikeMatchingDo) Group(cols ...field.Expr) IUserLikeMatchingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLikeMatchingDo) Having(conds ...gen.Condition) IUserLikeMatchingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLikeMatchingDo) Limit(limit int) IUserLikeMatchingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLikeMatchingDo) Offset(offset int) IUserLikeMatchingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLikeMatchingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLikeMatchingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLikeMatchingDo) Unscoped() IUserLikeMatchingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLikeMatchingDo) Create(values ...*models.UserLikeMatching) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLikeMatchingDo) CreateInBatches(values []*models.UserLikeMatching, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLikeMatchingDo) Save(values ...*models.UserLikeMatching) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLikeMatchingDo) First() (*models.UserLikeMatching, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserLikeMatching), nil
	}
}

func (u userLikeMatchingDo) Take() (*models.UserLikeMatching, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserLikeMatching), nil
	}
}

func (u userLikeMatchingDo) Last() (*models.UserLikeMatching, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserLikeMatching), nil
	}
}

func (u userLikeMatchingDo) Find() ([]*models.UserLikeMatching, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserLikeMatching), err
}

func (u userLikeMatchingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserLikeMatching, err error) {
	buf := make([]*models.UserLikeMatching, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLikeMatchingDo) FindInBatches(result *[]*models.UserLikeMatching, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLikeMatchingDo) Attrs(attrs ...field.AssignExpr) IUserLikeMatchingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLikeMatchingDo) Assign(attrs ...field.AssignExpr) IUserLikeMatchingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLikeMatchingDo) Joins(fields ...field.RelationField) IUserLikeMatchingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLikeMatchingDo) Preload(fields ...field.RelationField) IUserLikeMatchingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLikeMatchingDo) FirstOrInit() (*models.UserLikeMatching, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserLikeMatching), nil
	}
}

func (u userLikeMatchingDo) FirstOrCreate() (*models.UserLikeMatching, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserLikeMatching), nil
	}
}

func (u userLikeMatchingDo) FindByPage(offset int, limit int) (result []*models.UserLikeMatching, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLikeMatchingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLikeMatchingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLikeMatchingDo) Delete(models ...*models.UserLikeMatching) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLikeMatchingDo) withDO(do gen.Dao) *userLikeMatchingDo {
	u.DO = *do.(*gen.DO)
	return u
}
