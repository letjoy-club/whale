// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMatchingReceiveLike(db *gorm.DB, opts ...gen.DOOption) matchingReceiveLike {
	_matchingReceiveLike := matchingReceiveLike{}

	_matchingReceiveLike.matchingReceiveLikeDo.UseDB(db, opts...)
	_matchingReceiveLike.matchingReceiveLikeDo.UseModel(&models.MatchingReceiveLike{})

	tableName := _matchingReceiveLike.matchingReceiveLikeDo.TableName()
	_matchingReceiveLike.ALL = field.NewAsterisk(tableName)
	_matchingReceiveLike.MatchingID = field.NewString(tableName, "matching_id")
	_matchingReceiveLike.LikeNum = field.NewInt(tableName, "like_num")
	_matchingReceiveLike.RecentUserIDs = field.NewField(tableName, "recent_user_ids")
	_matchingReceiveLike.CreatedAt = field.NewTime(tableName, "created_at")
	_matchingReceiveLike.UpdatedAt = field.NewTime(tableName, "updated_at")

	_matchingReceiveLike.fillFieldMap()

	return _matchingReceiveLike
}

type matchingReceiveLike struct {
	matchingReceiveLikeDo matchingReceiveLikeDo

	ALL           field.Asterisk
	MatchingID    field.String
	LikeNum       field.Int
	RecentUserIDs field.Field
	CreatedAt     field.Time
	UpdatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (m matchingReceiveLike) Table(newTableName string) *matchingReceiveLike {
	m.matchingReceiveLikeDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m matchingReceiveLike) As(alias string) *matchingReceiveLike {
	m.matchingReceiveLikeDo.DO = *(m.matchingReceiveLikeDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *matchingReceiveLike) updateTableName(table string) *matchingReceiveLike {
	m.ALL = field.NewAsterisk(table)
	m.MatchingID = field.NewString(table, "matching_id")
	m.LikeNum = field.NewInt(table, "like_num")
	m.RecentUserIDs = field.NewField(table, "recent_user_ids")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")

	m.fillFieldMap()

	return m
}

func (m *matchingReceiveLike) WithContext(ctx context.Context) IMatchingReceiveLikeDo {
	return m.matchingReceiveLikeDo.WithContext(ctx)
}

func (m matchingReceiveLike) TableName() string { return m.matchingReceiveLikeDo.TableName() }

func (m matchingReceiveLike) Alias() string { return m.matchingReceiveLikeDo.Alias() }

func (m *matchingReceiveLike) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *matchingReceiveLike) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 5)
	m.fieldMap["matching_id"] = m.MatchingID
	m.fieldMap["like_num"] = m.LikeNum
	m.fieldMap["recent_user_ids"] = m.RecentUserIDs
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
}

func (m matchingReceiveLike) clone(db *gorm.DB) matchingReceiveLike {
	m.matchingReceiveLikeDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m matchingReceiveLike) replaceDB(db *gorm.DB) matchingReceiveLike {
	m.matchingReceiveLikeDo.ReplaceDB(db)
	return m
}

type matchingReceiveLikeDo struct{ gen.DO }

type IMatchingReceiveLikeDo interface {
	gen.SubQuery
	Debug() IMatchingReceiveLikeDo
	WithContext(ctx context.Context) IMatchingReceiveLikeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatchingReceiveLikeDo
	WriteDB() IMatchingReceiveLikeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatchingReceiveLikeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatchingReceiveLikeDo
	Not(conds ...gen.Condition) IMatchingReceiveLikeDo
	Or(conds ...gen.Condition) IMatchingReceiveLikeDo
	Select(conds ...field.Expr) IMatchingReceiveLikeDo
	Where(conds ...gen.Condition) IMatchingReceiveLikeDo
	Order(conds ...field.Expr) IMatchingReceiveLikeDo
	Distinct(cols ...field.Expr) IMatchingReceiveLikeDo
	Omit(cols ...field.Expr) IMatchingReceiveLikeDo
	Join(table schema.Tabler, on ...field.Expr) IMatchingReceiveLikeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingReceiveLikeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatchingReceiveLikeDo
	Group(cols ...field.Expr) IMatchingReceiveLikeDo
	Having(conds ...gen.Condition) IMatchingReceiveLikeDo
	Limit(limit int) IMatchingReceiveLikeDo
	Offset(offset int) IMatchingReceiveLikeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingReceiveLikeDo
	Unscoped() IMatchingReceiveLikeDo
	Create(values ...*models.MatchingReceiveLike) error
	CreateInBatches(values []*models.MatchingReceiveLike, batchSize int) error
	Save(values ...*models.MatchingReceiveLike) error
	First() (*models.MatchingReceiveLike, error)
	Take() (*models.MatchingReceiveLike, error)
	Last() (*models.MatchingReceiveLike, error)
	Find() ([]*models.MatchingReceiveLike, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingReceiveLike, err error)
	FindInBatches(result *[]*models.MatchingReceiveLike, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MatchingReceiveLike) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatchingReceiveLikeDo
	Assign(attrs ...field.AssignExpr) IMatchingReceiveLikeDo
	Joins(fields ...field.RelationField) IMatchingReceiveLikeDo
	Preload(fields ...field.RelationField) IMatchingReceiveLikeDo
	FirstOrInit() (*models.MatchingReceiveLike, error)
	FirstOrCreate() (*models.MatchingReceiveLike, error)
	FindByPage(offset int, limit int) (result []*models.MatchingReceiveLike, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatchingReceiveLikeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matchingReceiveLikeDo) Debug() IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Debug())
}

func (m matchingReceiveLikeDo) WithContext(ctx context.Context) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchingReceiveLikeDo) ReadDB() IMatchingReceiveLikeDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchingReceiveLikeDo) WriteDB() IMatchingReceiveLikeDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchingReceiveLikeDo) Session(config *gorm.Session) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchingReceiveLikeDo) Clauses(conds ...clause.Expression) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchingReceiveLikeDo) Returning(value interface{}, columns ...string) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchingReceiveLikeDo) Not(conds ...gen.Condition) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchingReceiveLikeDo) Or(conds ...gen.Condition) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchingReceiveLikeDo) Select(conds ...field.Expr) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchingReceiveLikeDo) Where(conds ...gen.Condition) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchingReceiveLikeDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMatchingReceiveLikeDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m matchingReceiveLikeDo) Order(conds ...field.Expr) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchingReceiveLikeDo) Distinct(cols ...field.Expr) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchingReceiveLikeDo) Omit(cols ...field.Expr) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchingReceiveLikeDo) Join(table schema.Tabler, on ...field.Expr) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchingReceiveLikeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchingReceiveLikeDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchingReceiveLikeDo) Group(cols ...field.Expr) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchingReceiveLikeDo) Having(conds ...gen.Condition) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchingReceiveLikeDo) Limit(limit int) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchingReceiveLikeDo) Offset(offset int) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchingReceiveLikeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchingReceiveLikeDo) Unscoped() IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchingReceiveLikeDo) Create(values ...*models.MatchingReceiveLike) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchingReceiveLikeDo) CreateInBatches(values []*models.MatchingReceiveLike, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchingReceiveLikeDo) Save(values ...*models.MatchingReceiveLike) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchingReceiveLikeDo) First() (*models.MatchingReceiveLike, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingReceiveLike), nil
	}
}

func (m matchingReceiveLikeDo) Take() (*models.MatchingReceiveLike, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingReceiveLike), nil
	}
}

func (m matchingReceiveLikeDo) Last() (*models.MatchingReceiveLike, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingReceiveLike), nil
	}
}

func (m matchingReceiveLikeDo) Find() ([]*models.MatchingReceiveLike, error) {
	result, err := m.DO.Find()
	return result.([]*models.MatchingReceiveLike), err
}

func (m matchingReceiveLikeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingReceiveLike, err error) {
	buf := make([]*models.MatchingReceiveLike, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchingReceiveLikeDo) FindInBatches(result *[]*models.MatchingReceiveLike, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchingReceiveLikeDo) Attrs(attrs ...field.AssignExpr) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchingReceiveLikeDo) Assign(attrs ...field.AssignExpr) IMatchingReceiveLikeDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchingReceiveLikeDo) Joins(fields ...field.RelationField) IMatchingReceiveLikeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchingReceiveLikeDo) Preload(fields ...field.RelationField) IMatchingReceiveLikeDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchingReceiveLikeDo) FirstOrInit() (*models.MatchingReceiveLike, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingReceiveLike), nil
	}
}

func (m matchingReceiveLikeDo) FirstOrCreate() (*models.MatchingReceiveLike, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingReceiveLike), nil
	}
}

func (m matchingReceiveLikeDo) FindByPage(offset int, limit int) (result []*models.MatchingReceiveLike, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchingReceiveLikeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchingReceiveLikeDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchingReceiveLikeDo) Delete(models ...*models.MatchingReceiveLike) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchingReceiveLikeDo) withDO(do gen.Dao) *matchingReceiveLikeDo {
	m.DO = *do.(*gen.DO)
	return m
}
