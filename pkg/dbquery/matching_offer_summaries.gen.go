// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMatchingOfferSummary(db *gorm.DB, opts ...gen.DOOption) matchingOfferSummary {
	_matchingOfferSummary := matchingOfferSummary{}

	_matchingOfferSummary.matchingOfferSummaryDo.UseDB(db, opts...)
	_matchingOfferSummary.matchingOfferSummaryDo.UseModel(&models.MatchingOfferSummary{})

	tableName := _matchingOfferSummary.matchingOfferSummaryDo.TableName()
	_matchingOfferSummary.ALL = field.NewAsterisk(tableName)
	_matchingOfferSummary.MatchingID = field.NewString(tableName, "matching_id")
	_matchingOfferSummary.UserID = field.NewString(tableName, "user_id")
	_matchingOfferSummary.InOfferNum = field.NewInt(tableName, "in_offer_num")
	_matchingOfferSummary.OutOfferNum = field.NewInt(tableName, "out_offer_num")
	_matchingOfferSummary.BasicQuota = field.NewInt(tableName, "basic_quota")
	_matchingOfferSummary.RemainQuota = field.NewInt(tableName, "remain_quota")
	_matchingOfferSummary.Active = field.NewBool(tableName, "active")
	_matchingOfferSummary.UpdatedAt = field.NewTime(tableName, "updated_at")
	_matchingOfferSummary.CreatedAt = field.NewTime(tableName, "created_at")

	_matchingOfferSummary.fillFieldMap()

	return _matchingOfferSummary
}

type matchingOfferSummary struct {
	matchingOfferSummaryDo matchingOfferSummaryDo

	ALL         field.Asterisk
	MatchingID  field.String
	UserID      field.String
	InOfferNum  field.Int
	OutOfferNum field.Int
	BasicQuota  field.Int
	RemainQuota field.Int
	Active      field.Bool
	UpdatedAt   field.Time
	CreatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (m matchingOfferSummary) Table(newTableName string) *matchingOfferSummary {
	m.matchingOfferSummaryDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m matchingOfferSummary) As(alias string) *matchingOfferSummary {
	m.matchingOfferSummaryDo.DO = *(m.matchingOfferSummaryDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *matchingOfferSummary) updateTableName(table string) *matchingOfferSummary {
	m.ALL = field.NewAsterisk(table)
	m.MatchingID = field.NewString(table, "matching_id")
	m.UserID = field.NewString(table, "user_id")
	m.InOfferNum = field.NewInt(table, "in_offer_num")
	m.OutOfferNum = field.NewInt(table, "out_offer_num")
	m.BasicQuota = field.NewInt(table, "basic_quota")
	m.RemainQuota = field.NewInt(table, "remain_quota")
	m.Active = field.NewBool(table, "active")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *matchingOfferSummary) WithContext(ctx context.Context) IMatchingOfferSummaryDo {
	return m.matchingOfferSummaryDo.WithContext(ctx)
}

func (m matchingOfferSummary) TableName() string { return m.matchingOfferSummaryDo.TableName() }

func (m matchingOfferSummary) Alias() string { return m.matchingOfferSummaryDo.Alias() }

func (m *matchingOfferSummary) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *matchingOfferSummary) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["matching_id"] = m.MatchingID
	m.fieldMap["user_id"] = m.UserID
	m.fieldMap["in_offer_num"] = m.InOfferNum
	m.fieldMap["out_offer_num"] = m.OutOfferNum
	m.fieldMap["basic_quota"] = m.BasicQuota
	m.fieldMap["remain_quota"] = m.RemainQuota
	m.fieldMap["active"] = m.Active
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m matchingOfferSummary) clone(db *gorm.DB) matchingOfferSummary {
	m.matchingOfferSummaryDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m matchingOfferSummary) replaceDB(db *gorm.DB) matchingOfferSummary {
	m.matchingOfferSummaryDo.ReplaceDB(db)
	return m
}

type matchingOfferSummaryDo struct{ gen.DO }

type IMatchingOfferSummaryDo interface {
	gen.SubQuery
	Debug() IMatchingOfferSummaryDo
	WithContext(ctx context.Context) IMatchingOfferSummaryDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMatchingOfferSummaryDo
	WriteDB() IMatchingOfferSummaryDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMatchingOfferSummaryDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMatchingOfferSummaryDo
	Not(conds ...gen.Condition) IMatchingOfferSummaryDo
	Or(conds ...gen.Condition) IMatchingOfferSummaryDo
	Select(conds ...field.Expr) IMatchingOfferSummaryDo
	Where(conds ...gen.Condition) IMatchingOfferSummaryDo
	Order(conds ...field.Expr) IMatchingOfferSummaryDo
	Distinct(cols ...field.Expr) IMatchingOfferSummaryDo
	Omit(cols ...field.Expr) IMatchingOfferSummaryDo
	Join(table schema.Tabler, on ...field.Expr) IMatchingOfferSummaryDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingOfferSummaryDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMatchingOfferSummaryDo
	Group(cols ...field.Expr) IMatchingOfferSummaryDo
	Having(conds ...gen.Condition) IMatchingOfferSummaryDo
	Limit(limit int) IMatchingOfferSummaryDo
	Offset(offset int) IMatchingOfferSummaryDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingOfferSummaryDo
	Unscoped() IMatchingOfferSummaryDo
	Create(values ...*models.MatchingOfferSummary) error
	CreateInBatches(values []*models.MatchingOfferSummary, batchSize int) error
	Save(values ...*models.MatchingOfferSummary) error
	First() (*models.MatchingOfferSummary, error)
	Take() (*models.MatchingOfferSummary, error)
	Last() (*models.MatchingOfferSummary, error)
	Find() ([]*models.MatchingOfferSummary, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingOfferSummary, err error)
	FindInBatches(result *[]*models.MatchingOfferSummary, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MatchingOfferSummary) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMatchingOfferSummaryDo
	Assign(attrs ...field.AssignExpr) IMatchingOfferSummaryDo
	Joins(fields ...field.RelationField) IMatchingOfferSummaryDo
	Preload(fields ...field.RelationField) IMatchingOfferSummaryDo
	FirstOrInit() (*models.MatchingOfferSummary, error)
	FirstOrCreate() (*models.MatchingOfferSummary, error)
	FindByPage(offset int, limit int) (result []*models.MatchingOfferSummary, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMatchingOfferSummaryDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m matchingOfferSummaryDo) Debug() IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Debug())
}

func (m matchingOfferSummaryDo) WithContext(ctx context.Context) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m matchingOfferSummaryDo) ReadDB() IMatchingOfferSummaryDo {
	return m.Clauses(dbresolver.Read)
}

func (m matchingOfferSummaryDo) WriteDB() IMatchingOfferSummaryDo {
	return m.Clauses(dbresolver.Write)
}

func (m matchingOfferSummaryDo) Session(config *gorm.Session) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Session(config))
}

func (m matchingOfferSummaryDo) Clauses(conds ...clause.Expression) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m matchingOfferSummaryDo) Returning(value interface{}, columns ...string) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m matchingOfferSummaryDo) Not(conds ...gen.Condition) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m matchingOfferSummaryDo) Or(conds ...gen.Condition) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m matchingOfferSummaryDo) Select(conds ...field.Expr) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m matchingOfferSummaryDo) Where(conds ...gen.Condition) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m matchingOfferSummaryDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMatchingOfferSummaryDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m matchingOfferSummaryDo) Order(conds ...field.Expr) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m matchingOfferSummaryDo) Distinct(cols ...field.Expr) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m matchingOfferSummaryDo) Omit(cols ...field.Expr) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m matchingOfferSummaryDo) Join(table schema.Tabler, on ...field.Expr) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m matchingOfferSummaryDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m matchingOfferSummaryDo) RightJoin(table schema.Tabler, on ...field.Expr) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m matchingOfferSummaryDo) Group(cols ...field.Expr) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m matchingOfferSummaryDo) Having(conds ...gen.Condition) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m matchingOfferSummaryDo) Limit(limit int) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m matchingOfferSummaryDo) Offset(offset int) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m matchingOfferSummaryDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m matchingOfferSummaryDo) Unscoped() IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Unscoped())
}

func (m matchingOfferSummaryDo) Create(values ...*models.MatchingOfferSummary) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m matchingOfferSummaryDo) CreateInBatches(values []*models.MatchingOfferSummary, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m matchingOfferSummaryDo) Save(values ...*models.MatchingOfferSummary) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m matchingOfferSummaryDo) First() (*models.MatchingOfferSummary, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingOfferSummary), nil
	}
}

func (m matchingOfferSummaryDo) Take() (*models.MatchingOfferSummary, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingOfferSummary), nil
	}
}

func (m matchingOfferSummaryDo) Last() (*models.MatchingOfferSummary, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingOfferSummary), nil
	}
}

func (m matchingOfferSummaryDo) Find() ([]*models.MatchingOfferSummary, error) {
	result, err := m.DO.Find()
	return result.([]*models.MatchingOfferSummary), err
}

func (m matchingOfferSummaryDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MatchingOfferSummary, err error) {
	buf := make([]*models.MatchingOfferSummary, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m matchingOfferSummaryDo) FindInBatches(result *[]*models.MatchingOfferSummary, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m matchingOfferSummaryDo) Attrs(attrs ...field.AssignExpr) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m matchingOfferSummaryDo) Assign(attrs ...field.AssignExpr) IMatchingOfferSummaryDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m matchingOfferSummaryDo) Joins(fields ...field.RelationField) IMatchingOfferSummaryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m matchingOfferSummaryDo) Preload(fields ...field.RelationField) IMatchingOfferSummaryDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m matchingOfferSummaryDo) FirstOrInit() (*models.MatchingOfferSummary, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingOfferSummary), nil
	}
}

func (m matchingOfferSummaryDo) FirstOrCreate() (*models.MatchingOfferSummary, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MatchingOfferSummary), nil
	}
}

func (m matchingOfferSummaryDo) FindByPage(offset int, limit int) (result []*models.MatchingOfferSummary, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m matchingOfferSummaryDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m matchingOfferSummaryDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m matchingOfferSummaryDo) Delete(models ...*models.MatchingOfferSummary) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *matchingOfferSummaryDo) withDO(do gen.Dao) *matchingOfferSummaryDo {
	m.DO = *do.(*gen.DO)
	return m
}
