// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newLikeMotion(db *gorm.DB, opts ...gen.DOOption) likeMotion {
	_likeMotion := likeMotion{}

	_likeMotion.likeMotionDo.UseDB(db, opts...)
	_likeMotion.likeMotionDo.UseModel(&models.LikeMotion{})

	tableName := _likeMotion.likeMotionDo.TableName()
	_likeMotion.ALL = field.NewAsterisk(tableName)
	_likeMotion.ID = field.NewInt(tableName, "id")
	_likeMotion.UserID = field.NewString(tableName, "user_id")
	_likeMotion.MotionID = field.NewString(tableName, "motion_id")
	_likeMotion.CreatedAt = field.NewTime(tableName, "created_at")

	_likeMotion.fillFieldMap()

	return _likeMotion
}

type likeMotion struct {
	likeMotionDo likeMotionDo

	ALL       field.Asterisk
	ID        field.Int
	UserID    field.String
	MotionID  field.String
	CreatedAt field.Time

	fieldMap map[string]field.Expr
}

func (l likeMotion) Table(newTableName string) *likeMotion {
	l.likeMotionDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l likeMotion) As(alias string) *likeMotion {
	l.likeMotionDo.DO = *(l.likeMotionDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *likeMotion) updateTableName(table string) *likeMotion {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt(table, "id")
	l.UserID = field.NewString(table, "user_id")
	l.MotionID = field.NewString(table, "motion_id")
	l.CreatedAt = field.NewTime(table, "created_at")

	l.fillFieldMap()

	return l
}

func (l *likeMotion) WithContext(ctx context.Context) ILikeMotionDo {
	return l.likeMotionDo.WithContext(ctx)
}

func (l likeMotion) TableName() string { return l.likeMotionDo.TableName() }

func (l likeMotion) Alias() string { return l.likeMotionDo.Alias() }

func (l *likeMotion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *likeMotion) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 4)
	l.fieldMap["id"] = l.ID
	l.fieldMap["user_id"] = l.UserID
	l.fieldMap["motion_id"] = l.MotionID
	l.fieldMap["created_at"] = l.CreatedAt
}

func (l likeMotion) clone(db *gorm.DB) likeMotion {
	l.likeMotionDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l likeMotion) replaceDB(db *gorm.DB) likeMotion {
	l.likeMotionDo.ReplaceDB(db)
	return l
}

type likeMotionDo struct{ gen.DO }

type ILikeMotionDo interface {
	gen.SubQuery
	Debug() ILikeMotionDo
	WithContext(ctx context.Context) ILikeMotionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILikeMotionDo
	WriteDB() ILikeMotionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILikeMotionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILikeMotionDo
	Not(conds ...gen.Condition) ILikeMotionDo
	Or(conds ...gen.Condition) ILikeMotionDo
	Select(conds ...field.Expr) ILikeMotionDo
	Where(conds ...gen.Condition) ILikeMotionDo
	Order(conds ...field.Expr) ILikeMotionDo
	Distinct(cols ...field.Expr) ILikeMotionDo
	Omit(cols ...field.Expr) ILikeMotionDo
	Join(table schema.Tabler, on ...field.Expr) ILikeMotionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILikeMotionDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILikeMotionDo
	Group(cols ...field.Expr) ILikeMotionDo
	Having(conds ...gen.Condition) ILikeMotionDo
	Limit(limit int) ILikeMotionDo
	Offset(offset int) ILikeMotionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILikeMotionDo
	Unscoped() ILikeMotionDo
	Create(values ...*models.LikeMotion) error
	CreateInBatches(values []*models.LikeMotion, batchSize int) error
	Save(values ...*models.LikeMotion) error
	First() (*models.LikeMotion, error)
	Take() (*models.LikeMotion, error)
	Last() (*models.LikeMotion, error)
	Find() ([]*models.LikeMotion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.LikeMotion, err error)
	FindInBatches(result *[]*models.LikeMotion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.LikeMotion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILikeMotionDo
	Assign(attrs ...field.AssignExpr) ILikeMotionDo
	Joins(fields ...field.RelationField) ILikeMotionDo
	Preload(fields ...field.RelationField) ILikeMotionDo
	FirstOrInit() (*models.LikeMotion, error)
	FirstOrCreate() (*models.LikeMotion, error)
	FindByPage(offset int, limit int) (result []*models.LikeMotion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILikeMotionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l likeMotionDo) Debug() ILikeMotionDo {
	return l.withDO(l.DO.Debug())
}

func (l likeMotionDo) WithContext(ctx context.Context) ILikeMotionDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l likeMotionDo) ReadDB() ILikeMotionDo {
	return l.Clauses(dbresolver.Read)
}

func (l likeMotionDo) WriteDB() ILikeMotionDo {
	return l.Clauses(dbresolver.Write)
}

func (l likeMotionDo) Session(config *gorm.Session) ILikeMotionDo {
	return l.withDO(l.DO.Session(config))
}

func (l likeMotionDo) Clauses(conds ...clause.Expression) ILikeMotionDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l likeMotionDo) Returning(value interface{}, columns ...string) ILikeMotionDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l likeMotionDo) Not(conds ...gen.Condition) ILikeMotionDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l likeMotionDo) Or(conds ...gen.Condition) ILikeMotionDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l likeMotionDo) Select(conds ...field.Expr) ILikeMotionDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l likeMotionDo) Where(conds ...gen.Condition) ILikeMotionDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l likeMotionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ILikeMotionDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l likeMotionDo) Order(conds ...field.Expr) ILikeMotionDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l likeMotionDo) Distinct(cols ...field.Expr) ILikeMotionDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l likeMotionDo) Omit(cols ...field.Expr) ILikeMotionDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l likeMotionDo) Join(table schema.Tabler, on ...field.Expr) ILikeMotionDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l likeMotionDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILikeMotionDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l likeMotionDo) RightJoin(table schema.Tabler, on ...field.Expr) ILikeMotionDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l likeMotionDo) Group(cols ...field.Expr) ILikeMotionDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l likeMotionDo) Having(conds ...gen.Condition) ILikeMotionDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l likeMotionDo) Limit(limit int) ILikeMotionDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l likeMotionDo) Offset(offset int) ILikeMotionDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l likeMotionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILikeMotionDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l likeMotionDo) Unscoped() ILikeMotionDo {
	return l.withDO(l.DO.Unscoped())
}

func (l likeMotionDo) Create(values ...*models.LikeMotion) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l likeMotionDo) CreateInBatches(values []*models.LikeMotion, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l likeMotionDo) Save(values ...*models.LikeMotion) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l likeMotionDo) First() (*models.LikeMotion, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.LikeMotion), nil
	}
}

func (l likeMotionDo) Take() (*models.LikeMotion, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.LikeMotion), nil
	}
}

func (l likeMotionDo) Last() (*models.LikeMotion, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.LikeMotion), nil
	}
}

func (l likeMotionDo) Find() ([]*models.LikeMotion, error) {
	result, err := l.DO.Find()
	return result.([]*models.LikeMotion), err
}

func (l likeMotionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.LikeMotion, err error) {
	buf := make([]*models.LikeMotion, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l likeMotionDo) FindInBatches(result *[]*models.LikeMotion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l likeMotionDo) Attrs(attrs ...field.AssignExpr) ILikeMotionDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l likeMotionDo) Assign(attrs ...field.AssignExpr) ILikeMotionDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l likeMotionDo) Joins(fields ...field.RelationField) ILikeMotionDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l likeMotionDo) Preload(fields ...field.RelationField) ILikeMotionDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l likeMotionDo) FirstOrInit() (*models.LikeMotion, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.LikeMotion), nil
	}
}

func (l likeMotionDo) FirstOrCreate() (*models.LikeMotion, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.LikeMotion), nil
	}
}

func (l likeMotionDo) FindByPage(offset int, limit int) (result []*models.LikeMotion, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l likeMotionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l likeMotionDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l likeMotionDo) Delete(models ...*models.LikeMotion) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *likeMotionDo) withDO(do gen.Dao) *likeMotionDo {
	l.DO = *do.(*gen.DO)
	return l
}
