// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newMotionReview(db *gorm.DB, opts ...gen.DOOption) motionReview {
	_motionReview := motionReview{}

	_motionReview.motionReviewDo.UseDB(db, opts...)
	_motionReview.motionReviewDo.UseModel(&models.MotionReview{})

	tableName := _motionReview.motionReviewDo.TableName()
	_motionReview.ALL = field.NewAsterisk(tableName)
	_motionReview.ID = field.NewInt(tableName, "id")
	_motionReview.MotionOfferID = field.NewInt(tableName, "motion_offer_id")
	_motionReview.ReviewerID = field.NewString(tableName, "reviewer_id")
	_motionReview.ToUserID = field.NewString(tableName, "to_user_id")
	_motionReview.TopicID = field.NewString(tableName, "topic_id")
	_motionReview.Score = field.NewInt(tableName, "score")
	_motionReview.Comment = field.NewString(tableName, "comment")
	_motionReview.CreatedAt = field.NewTime(tableName, "created_at")

	_motionReview.fillFieldMap()

	return _motionReview
}

type motionReview struct {
	motionReviewDo motionReviewDo

	ALL           field.Asterisk
	ID            field.Int
	MotionOfferID field.Int
	ReviewerID    field.String
	ToUserID      field.String
	TopicID       field.String
	Score         field.Int
	Comment       field.String
	CreatedAt     field.Time

	fieldMap map[string]field.Expr
}

func (m motionReview) Table(newTableName string) *motionReview {
	m.motionReviewDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m motionReview) As(alias string) *motionReview {
	m.motionReviewDo.DO = *(m.motionReviewDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *motionReview) updateTableName(table string) *motionReview {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt(table, "id")
	m.MotionOfferID = field.NewInt(table, "motion_offer_id")
	m.ReviewerID = field.NewString(table, "reviewer_id")
	m.ToUserID = field.NewString(table, "to_user_id")
	m.TopicID = field.NewString(table, "topic_id")
	m.Score = field.NewInt(table, "score")
	m.Comment = field.NewString(table, "comment")
	m.CreatedAt = field.NewTime(table, "created_at")

	m.fillFieldMap()

	return m
}

func (m *motionReview) WithContext(ctx context.Context) IMotionReviewDo {
	return m.motionReviewDo.WithContext(ctx)
}

func (m motionReview) TableName() string { return m.motionReviewDo.TableName() }

func (m motionReview) Alias() string { return m.motionReviewDo.Alias() }

func (m *motionReview) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *motionReview) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["id"] = m.ID
	m.fieldMap["motion_offer_id"] = m.MotionOfferID
	m.fieldMap["reviewer_id"] = m.ReviewerID
	m.fieldMap["to_user_id"] = m.ToUserID
	m.fieldMap["topic_id"] = m.TopicID
	m.fieldMap["score"] = m.Score
	m.fieldMap["comment"] = m.Comment
	m.fieldMap["created_at"] = m.CreatedAt
}

func (m motionReview) clone(db *gorm.DB) motionReview {
	m.motionReviewDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m motionReview) replaceDB(db *gorm.DB) motionReview {
	m.motionReviewDo.ReplaceDB(db)
	return m
}

type motionReviewDo struct{ gen.DO }

type IMotionReviewDo interface {
	gen.SubQuery
	Debug() IMotionReviewDo
	WithContext(ctx context.Context) IMotionReviewDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMotionReviewDo
	WriteDB() IMotionReviewDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMotionReviewDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMotionReviewDo
	Not(conds ...gen.Condition) IMotionReviewDo
	Or(conds ...gen.Condition) IMotionReviewDo
	Select(conds ...field.Expr) IMotionReviewDo
	Where(conds ...gen.Condition) IMotionReviewDo
	Order(conds ...field.Expr) IMotionReviewDo
	Distinct(cols ...field.Expr) IMotionReviewDo
	Omit(cols ...field.Expr) IMotionReviewDo
	Join(table schema.Tabler, on ...field.Expr) IMotionReviewDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMotionReviewDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMotionReviewDo
	Group(cols ...field.Expr) IMotionReviewDo
	Having(conds ...gen.Condition) IMotionReviewDo
	Limit(limit int) IMotionReviewDo
	Offset(offset int) IMotionReviewDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMotionReviewDo
	Unscoped() IMotionReviewDo
	Create(values ...*models.MotionReview) error
	CreateInBatches(values []*models.MotionReview, batchSize int) error
	Save(values ...*models.MotionReview) error
	First() (*models.MotionReview, error)
	Take() (*models.MotionReview, error)
	Last() (*models.MotionReview, error)
	Find() ([]*models.MotionReview, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MotionReview, err error)
	FindInBatches(result *[]*models.MotionReview, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.MotionReview) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMotionReviewDo
	Assign(attrs ...field.AssignExpr) IMotionReviewDo
	Joins(fields ...field.RelationField) IMotionReviewDo
	Preload(fields ...field.RelationField) IMotionReviewDo
	FirstOrInit() (*models.MotionReview, error)
	FirstOrCreate() (*models.MotionReview, error)
	FindByPage(offset int, limit int) (result []*models.MotionReview, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMotionReviewDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m motionReviewDo) Debug() IMotionReviewDo {
	return m.withDO(m.DO.Debug())
}

func (m motionReviewDo) WithContext(ctx context.Context) IMotionReviewDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m motionReviewDo) ReadDB() IMotionReviewDo {
	return m.Clauses(dbresolver.Read)
}

func (m motionReviewDo) WriteDB() IMotionReviewDo {
	return m.Clauses(dbresolver.Write)
}

func (m motionReviewDo) Session(config *gorm.Session) IMotionReviewDo {
	return m.withDO(m.DO.Session(config))
}

func (m motionReviewDo) Clauses(conds ...clause.Expression) IMotionReviewDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m motionReviewDo) Returning(value interface{}, columns ...string) IMotionReviewDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m motionReviewDo) Not(conds ...gen.Condition) IMotionReviewDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m motionReviewDo) Or(conds ...gen.Condition) IMotionReviewDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m motionReviewDo) Select(conds ...field.Expr) IMotionReviewDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m motionReviewDo) Where(conds ...gen.Condition) IMotionReviewDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m motionReviewDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMotionReviewDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m motionReviewDo) Order(conds ...field.Expr) IMotionReviewDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m motionReviewDo) Distinct(cols ...field.Expr) IMotionReviewDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m motionReviewDo) Omit(cols ...field.Expr) IMotionReviewDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m motionReviewDo) Join(table schema.Tabler, on ...field.Expr) IMotionReviewDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m motionReviewDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMotionReviewDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m motionReviewDo) RightJoin(table schema.Tabler, on ...field.Expr) IMotionReviewDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m motionReviewDo) Group(cols ...field.Expr) IMotionReviewDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m motionReviewDo) Having(conds ...gen.Condition) IMotionReviewDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m motionReviewDo) Limit(limit int) IMotionReviewDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m motionReviewDo) Offset(offset int) IMotionReviewDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m motionReviewDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMotionReviewDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m motionReviewDo) Unscoped() IMotionReviewDo {
	return m.withDO(m.DO.Unscoped())
}

func (m motionReviewDo) Create(values ...*models.MotionReview) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m motionReviewDo) CreateInBatches(values []*models.MotionReview, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m motionReviewDo) Save(values ...*models.MotionReview) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m motionReviewDo) First() (*models.MotionReview, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionReview), nil
	}
}

func (m motionReviewDo) Take() (*models.MotionReview, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionReview), nil
	}
}

func (m motionReviewDo) Last() (*models.MotionReview, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionReview), nil
	}
}

func (m motionReviewDo) Find() ([]*models.MotionReview, error) {
	result, err := m.DO.Find()
	return result.([]*models.MotionReview), err
}

func (m motionReviewDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.MotionReview, err error) {
	buf := make([]*models.MotionReview, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m motionReviewDo) FindInBatches(result *[]*models.MotionReview, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m motionReviewDo) Attrs(attrs ...field.AssignExpr) IMotionReviewDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m motionReviewDo) Assign(attrs ...field.AssignExpr) IMotionReviewDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m motionReviewDo) Joins(fields ...field.RelationField) IMotionReviewDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m motionReviewDo) Preload(fields ...field.RelationField) IMotionReviewDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m motionReviewDo) FirstOrInit() (*models.MotionReview, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionReview), nil
	}
}

func (m motionReviewDo) FirstOrCreate() (*models.MotionReview, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.MotionReview), nil
	}
}

func (m motionReviewDo) FindByPage(offset int, limit int) (result []*models.MotionReview, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m motionReviewDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m motionReviewDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m motionReviewDo) Delete(models ...*models.MotionReview) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *motionReviewDo) withDO(do gen.Dao) *motionReviewDo {
	m.DO = *do.(*gen.DO)
	return m
}
