// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                          db,
		HotTopicsInArea:             newHotTopicsInArea(db, opts...),
		Matching:                    newMatching(db, opts...),
		MatchingInvitation:          newMatchingInvitation(db, opts...),
		MatchingQuota:               newMatchingQuota(db, opts...),
		MatchingResult:              newMatchingResult(db, opts...),
		MatchingResultConfirmAction: newMatchingResultConfirmAction(db, opts...),
		MatchingReview:              newMatchingReview(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	HotTopicsInArea             hotTopicsInArea
	Matching                    matching
	MatchingInvitation          matchingInvitation
	MatchingQuota               matchingQuota
	MatchingResult              matchingResult
	MatchingResultConfirmAction matchingResultConfirmAction
	MatchingReview              matchingReview
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		HotTopicsInArea:             q.HotTopicsInArea.clone(db),
		Matching:                    q.Matching.clone(db),
		MatchingInvitation:          q.MatchingInvitation.clone(db),
		MatchingQuota:               q.MatchingQuota.clone(db),
		MatchingResult:              q.MatchingResult.clone(db),
		MatchingResultConfirmAction: q.MatchingResultConfirmAction.clone(db),
		MatchingReview:              q.MatchingReview.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		HotTopicsInArea:             q.HotTopicsInArea.replaceDB(db),
		Matching:                    q.Matching.replaceDB(db),
		MatchingInvitation:          q.MatchingInvitation.replaceDB(db),
		MatchingQuota:               q.MatchingQuota.replaceDB(db),
		MatchingResult:              q.MatchingResult.replaceDB(db),
		MatchingResultConfirmAction: q.MatchingResultConfirmAction.replaceDB(db),
		MatchingReview:              q.MatchingReview.replaceDB(db),
	}
}

type queryCtx struct {
	HotTopicsInArea             IHotTopicsInAreaDo
	Matching                    IMatchingDo
	MatchingInvitation          IMatchingInvitationDo
	MatchingQuota               IMatchingQuotaDo
	MatchingResult              IMatchingResultDo
	MatchingResultConfirmAction IMatchingResultConfirmActionDo
	MatchingReview              IMatchingReviewDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		HotTopicsInArea:             q.HotTopicsInArea.WithContext(ctx),
		Matching:                    q.Matching.WithContext(ctx),
		MatchingInvitation:          q.MatchingInvitation.WithContext(ctx),
		MatchingQuota:               q.MatchingQuota.WithContext(ctx),
		MatchingResult:              q.MatchingResult.WithContext(ctx),
		MatchingResultConfirmAction: q.MatchingResultConfirmAction.WithContext(ctx),
		MatchingReview:              q.MatchingReview.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
