// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                          db,
		CityTopics:                  newCityTopics(db, opts...),
		HotTopicsInArea:             newHotTopicsInArea(db, opts...),
		Matching:                    newMatching(db, opts...),
		MatchingDurationConstraint:  newMatchingDurationConstraint(db, opts...),
		MatchingInvitation:          newMatchingInvitation(db, opts...),
		MatchingOfferRecord:         newMatchingOfferRecord(db, opts...),
		MatchingOfferSummary:        newMatchingOfferSummary(db, opts...),
		MatchingQuota:               newMatchingQuota(db, opts...),
		MatchingResult:              newMatchingResult(db, opts...),
		MatchingResultConfirmAction: newMatchingResultConfirmAction(db, opts...),
		MatchingReview:              newMatchingReview(db, opts...),
		MatchingView:                newMatchingView(db, opts...),
		MatchingViewHistory:         newMatchingViewHistory(db, opts...),
		Motion:                      newMotion(db, opts...),
		MotionOfferRecord:           newMotionOfferRecord(db, opts...),
		MotionReview:                newMotionReview(db, opts...),
		MotionViewHistory:           newMotionViewHistory(db, opts...),
		RecentMatching:              newRecentMatching(db, opts...),
		UserJoinTopic:               newUserJoinTopic(db, opts...),
		UserLikeMotion:              newUserLikeMotion(db, opts...),
		UserThumbsUpMotion:          newUserThumbsUpMotion(db, opts...),
		UserViewMatching:            newUserViewMatching(db, opts...),
		WhaleConfig:                 newWhaleConfig(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CityTopics                  cityTopics
	HotTopicsInArea             hotTopicsInArea
	Matching                    matching
	MatchingDurationConstraint  matchingDurationConstraint
	MatchingInvitation          matchingInvitation
	MatchingOfferRecord         matchingOfferRecord
	MatchingOfferSummary        matchingOfferSummary
	MatchingQuota               matchingQuota
	MatchingResult              matchingResult
	MatchingResultConfirmAction matchingResultConfirmAction
	MatchingReview              matchingReview
	MatchingView                matchingView
	MatchingViewHistory         matchingViewHistory
	Motion                      motion
	MotionOfferRecord           motionOfferRecord
	MotionReview                motionReview
	MotionViewHistory           motionViewHistory
	RecentMatching              recentMatching
	UserJoinTopic               userJoinTopic
	UserLikeMotion              userLikeMotion
	UserThumbsUpMotion          userThumbsUpMotion
	UserViewMatching            userViewMatching
	WhaleConfig                 whaleConfig
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		CityTopics:                  q.CityTopics.clone(db),
		HotTopicsInArea:             q.HotTopicsInArea.clone(db),
		Matching:                    q.Matching.clone(db),
		MatchingDurationConstraint:  q.MatchingDurationConstraint.clone(db),
		MatchingInvitation:          q.MatchingInvitation.clone(db),
		MatchingOfferRecord:         q.MatchingOfferRecord.clone(db),
		MatchingOfferSummary:        q.MatchingOfferSummary.clone(db),
		MatchingQuota:               q.MatchingQuota.clone(db),
		MatchingResult:              q.MatchingResult.clone(db),
		MatchingResultConfirmAction: q.MatchingResultConfirmAction.clone(db),
		MatchingReview:              q.MatchingReview.clone(db),
		MatchingView:                q.MatchingView.clone(db),
		MatchingViewHistory:         q.MatchingViewHistory.clone(db),
		Motion:                      q.Motion.clone(db),
		MotionOfferRecord:           q.MotionOfferRecord.clone(db),
		MotionReview:                q.MotionReview.clone(db),
		MotionViewHistory:           q.MotionViewHistory.clone(db),
		RecentMatching:              q.RecentMatching.clone(db),
		UserJoinTopic:               q.UserJoinTopic.clone(db),
		UserLikeMotion:              q.UserLikeMotion.clone(db),
		UserThumbsUpMotion:          q.UserThumbsUpMotion.clone(db),
		UserViewMatching:            q.UserViewMatching.clone(db),
		WhaleConfig:                 q.WhaleConfig.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                          db,
		CityTopics:                  q.CityTopics.replaceDB(db),
		HotTopicsInArea:             q.HotTopicsInArea.replaceDB(db),
		Matching:                    q.Matching.replaceDB(db),
		MatchingDurationConstraint:  q.MatchingDurationConstraint.replaceDB(db),
		MatchingInvitation:          q.MatchingInvitation.replaceDB(db),
		MatchingOfferRecord:         q.MatchingOfferRecord.replaceDB(db),
		MatchingOfferSummary:        q.MatchingOfferSummary.replaceDB(db),
		MatchingQuota:               q.MatchingQuota.replaceDB(db),
		MatchingResult:              q.MatchingResult.replaceDB(db),
		MatchingResultConfirmAction: q.MatchingResultConfirmAction.replaceDB(db),
		MatchingReview:              q.MatchingReview.replaceDB(db),
		MatchingView:                q.MatchingView.replaceDB(db),
		MatchingViewHistory:         q.MatchingViewHistory.replaceDB(db),
		Motion:                      q.Motion.replaceDB(db),
		MotionOfferRecord:           q.MotionOfferRecord.replaceDB(db),
		MotionReview:                q.MotionReview.replaceDB(db),
		MotionViewHistory:           q.MotionViewHistory.replaceDB(db),
		RecentMatching:              q.RecentMatching.replaceDB(db),
		UserJoinTopic:               q.UserJoinTopic.replaceDB(db),
		UserLikeMotion:              q.UserLikeMotion.replaceDB(db),
		UserThumbsUpMotion:          q.UserThumbsUpMotion.replaceDB(db),
		UserViewMatching:            q.UserViewMatching.replaceDB(db),
		WhaleConfig:                 q.WhaleConfig.replaceDB(db),
	}
}

type queryCtx struct {
	CityTopics                  ICityTopicsDo
	HotTopicsInArea             IHotTopicsInAreaDo
	Matching                    IMatchingDo
	MatchingDurationConstraint  IMatchingDurationConstraintDo
	MatchingInvitation          IMatchingInvitationDo
	MatchingOfferRecord         IMatchingOfferRecordDo
	MatchingOfferSummary        IMatchingOfferSummaryDo
	MatchingQuota               IMatchingQuotaDo
	MatchingResult              IMatchingResultDo
	MatchingResultConfirmAction IMatchingResultConfirmActionDo
	MatchingReview              IMatchingReviewDo
	MatchingView                IMatchingViewDo
	MatchingViewHistory         IMatchingViewHistoryDo
	Motion                      IMotionDo
	MotionOfferRecord           IMotionOfferRecordDo
	MotionReview                IMotionReviewDo
	MotionViewHistory           IMotionViewHistoryDo
	RecentMatching              IRecentMatchingDo
	UserJoinTopic               IUserJoinTopicDo
	UserLikeMotion              IUserLikeMotionDo
	UserThumbsUpMotion          IUserThumbsUpMotionDo
	UserViewMatching            IUserViewMatchingDo
	WhaleConfig                 IWhaleConfigDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CityTopics:                  q.CityTopics.WithContext(ctx),
		HotTopicsInArea:             q.HotTopicsInArea.WithContext(ctx),
		Matching:                    q.Matching.WithContext(ctx),
		MatchingDurationConstraint:  q.MatchingDurationConstraint.WithContext(ctx),
		MatchingInvitation:          q.MatchingInvitation.WithContext(ctx),
		MatchingOfferRecord:         q.MatchingOfferRecord.WithContext(ctx),
		MatchingOfferSummary:        q.MatchingOfferSummary.WithContext(ctx),
		MatchingQuota:               q.MatchingQuota.WithContext(ctx),
		MatchingResult:              q.MatchingResult.WithContext(ctx),
		MatchingResultConfirmAction: q.MatchingResultConfirmAction.WithContext(ctx),
		MatchingReview:              q.MatchingReview.WithContext(ctx),
		MatchingView:                q.MatchingView.WithContext(ctx),
		MatchingViewHistory:         q.MatchingViewHistory.WithContext(ctx),
		Motion:                      q.Motion.WithContext(ctx),
		MotionOfferRecord:           q.MotionOfferRecord.WithContext(ctx),
		MotionReview:                q.MotionReview.WithContext(ctx),
		MotionViewHistory:           q.MotionViewHistory.WithContext(ctx),
		RecentMatching:              q.RecentMatching.WithContext(ctx),
		UserJoinTopic:               q.UserJoinTopic.WithContext(ctx),
		UserLikeMotion:              q.UserLikeMotion.WithContext(ctx),
		UserThumbsUpMotion:          q.UserThumbsUpMotion.WithContext(ctx),
		UserViewMatching:            q.UserViewMatching.WithContext(ctx),
		WhaleConfig:                 q.WhaleConfig.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
