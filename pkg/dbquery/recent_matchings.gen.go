// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newRecentMatching(db *gorm.DB, opts ...gen.DOOption) recentMatching {
	_recentMatching := recentMatching{}

	_recentMatching.recentMatchingDo.UseDB(db, opts...)
	_recentMatching.recentMatchingDo.UseModel(&models.RecentMatching{})

	tableName := _recentMatching.recentMatchingDo.TableName()
	_recentMatching.ALL = field.NewAsterisk(tableName)
	_recentMatching.ID = field.NewString(tableName, "id")
	_recentMatching.CityID = field.NewString(tableName, "city_id")
	_recentMatching.TopicID = field.NewString(tableName, "topic_id")
	_recentMatching.MatchingIDs = field.NewField(tableName, "matching_ids")
	_recentMatching.CreatedAt = field.NewTime(tableName, "created_at")
	_recentMatching.UpdatedAt = field.NewTime(tableName, "updated_at")

	_recentMatching.fillFieldMap()

	return _recentMatching
}

type recentMatching struct {
	recentMatchingDo recentMatchingDo

	ALL         field.Asterisk
	ID          field.String
	CityID      field.String
	TopicID     field.String
	MatchingIDs field.Field
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (r recentMatching) Table(newTableName string) *recentMatching {
	r.recentMatchingDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r recentMatching) As(alias string) *recentMatching {
	r.recentMatchingDo.DO = *(r.recentMatchingDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *recentMatching) updateTableName(table string) *recentMatching {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewString(table, "id")
	r.CityID = field.NewString(table, "city_id")
	r.TopicID = field.NewString(table, "topic_id")
	r.MatchingIDs = field.NewField(table, "matching_ids")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *recentMatching) WithContext(ctx context.Context) IRecentMatchingDo {
	return r.recentMatchingDo.WithContext(ctx)
}

func (r recentMatching) TableName() string { return r.recentMatchingDo.TableName() }

func (r recentMatching) Alias() string { return r.recentMatchingDo.Alias() }

func (r *recentMatching) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *recentMatching) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["city_id"] = r.CityID
	r.fieldMap["topic_id"] = r.TopicID
	r.fieldMap["matching_ids"] = r.MatchingIDs
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r recentMatching) clone(db *gorm.DB) recentMatching {
	r.recentMatchingDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r recentMatching) replaceDB(db *gorm.DB) recentMatching {
	r.recentMatchingDo.ReplaceDB(db)
	return r
}

type recentMatchingDo struct{ gen.DO }

type IRecentMatchingDo interface {
	gen.SubQuery
	Debug() IRecentMatchingDo
	WithContext(ctx context.Context) IRecentMatchingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRecentMatchingDo
	WriteDB() IRecentMatchingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRecentMatchingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRecentMatchingDo
	Not(conds ...gen.Condition) IRecentMatchingDo
	Or(conds ...gen.Condition) IRecentMatchingDo
	Select(conds ...field.Expr) IRecentMatchingDo
	Where(conds ...gen.Condition) IRecentMatchingDo
	Order(conds ...field.Expr) IRecentMatchingDo
	Distinct(cols ...field.Expr) IRecentMatchingDo
	Omit(cols ...field.Expr) IRecentMatchingDo
	Join(table schema.Tabler, on ...field.Expr) IRecentMatchingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRecentMatchingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRecentMatchingDo
	Group(cols ...field.Expr) IRecentMatchingDo
	Having(conds ...gen.Condition) IRecentMatchingDo
	Limit(limit int) IRecentMatchingDo
	Offset(offset int) IRecentMatchingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRecentMatchingDo
	Unscoped() IRecentMatchingDo
	Create(values ...*models.RecentMatching) error
	CreateInBatches(values []*models.RecentMatching, batchSize int) error
	Save(values ...*models.RecentMatching) error
	First() (*models.RecentMatching, error)
	Take() (*models.RecentMatching, error)
	Last() (*models.RecentMatching, error)
	Find() ([]*models.RecentMatching, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RecentMatching, err error)
	FindInBatches(result *[]*models.RecentMatching, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.RecentMatching) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRecentMatchingDo
	Assign(attrs ...field.AssignExpr) IRecentMatchingDo
	Joins(fields ...field.RelationField) IRecentMatchingDo
	Preload(fields ...field.RelationField) IRecentMatchingDo
	FirstOrInit() (*models.RecentMatching, error)
	FirstOrCreate() (*models.RecentMatching, error)
	FindByPage(offset int, limit int) (result []*models.RecentMatching, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRecentMatchingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r recentMatchingDo) Debug() IRecentMatchingDo {
	return r.withDO(r.DO.Debug())
}

func (r recentMatchingDo) WithContext(ctx context.Context) IRecentMatchingDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r recentMatchingDo) ReadDB() IRecentMatchingDo {
	return r.Clauses(dbresolver.Read)
}

func (r recentMatchingDo) WriteDB() IRecentMatchingDo {
	return r.Clauses(dbresolver.Write)
}

func (r recentMatchingDo) Session(config *gorm.Session) IRecentMatchingDo {
	return r.withDO(r.DO.Session(config))
}

func (r recentMatchingDo) Clauses(conds ...clause.Expression) IRecentMatchingDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r recentMatchingDo) Returning(value interface{}, columns ...string) IRecentMatchingDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r recentMatchingDo) Not(conds ...gen.Condition) IRecentMatchingDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r recentMatchingDo) Or(conds ...gen.Condition) IRecentMatchingDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r recentMatchingDo) Select(conds ...field.Expr) IRecentMatchingDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r recentMatchingDo) Where(conds ...gen.Condition) IRecentMatchingDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r recentMatchingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IRecentMatchingDo {
	return r.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (r recentMatchingDo) Order(conds ...field.Expr) IRecentMatchingDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r recentMatchingDo) Distinct(cols ...field.Expr) IRecentMatchingDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r recentMatchingDo) Omit(cols ...field.Expr) IRecentMatchingDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r recentMatchingDo) Join(table schema.Tabler, on ...field.Expr) IRecentMatchingDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r recentMatchingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRecentMatchingDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r recentMatchingDo) RightJoin(table schema.Tabler, on ...field.Expr) IRecentMatchingDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r recentMatchingDo) Group(cols ...field.Expr) IRecentMatchingDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r recentMatchingDo) Having(conds ...gen.Condition) IRecentMatchingDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r recentMatchingDo) Limit(limit int) IRecentMatchingDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r recentMatchingDo) Offset(offset int) IRecentMatchingDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r recentMatchingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRecentMatchingDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r recentMatchingDo) Unscoped() IRecentMatchingDo {
	return r.withDO(r.DO.Unscoped())
}

func (r recentMatchingDo) Create(values ...*models.RecentMatching) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r recentMatchingDo) CreateInBatches(values []*models.RecentMatching, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r recentMatchingDo) Save(values ...*models.RecentMatching) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r recentMatchingDo) First() (*models.RecentMatching, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.RecentMatching), nil
	}
}

func (r recentMatchingDo) Take() (*models.RecentMatching, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.RecentMatching), nil
	}
}

func (r recentMatchingDo) Last() (*models.RecentMatching, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.RecentMatching), nil
	}
}

func (r recentMatchingDo) Find() ([]*models.RecentMatching, error) {
	result, err := r.DO.Find()
	return result.([]*models.RecentMatching), err
}

func (r recentMatchingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.RecentMatching, err error) {
	buf := make([]*models.RecentMatching, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r recentMatchingDo) FindInBatches(result *[]*models.RecentMatching, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r recentMatchingDo) Attrs(attrs ...field.AssignExpr) IRecentMatchingDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r recentMatchingDo) Assign(attrs ...field.AssignExpr) IRecentMatchingDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r recentMatchingDo) Joins(fields ...field.RelationField) IRecentMatchingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r recentMatchingDo) Preload(fields ...field.RelationField) IRecentMatchingDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r recentMatchingDo) FirstOrInit() (*models.RecentMatching, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.RecentMatching), nil
	}
}

func (r recentMatchingDo) FirstOrCreate() (*models.RecentMatching, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.RecentMatching), nil
	}
}

func (r recentMatchingDo) FindByPage(offset int, limit int) (result []*models.RecentMatching, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r recentMatchingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r recentMatchingDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r recentMatchingDo) Delete(models ...*models.RecentMatching) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *recentMatchingDo) withDO(do gen.Dao) *recentMatchingDo {
	r.DO = *do.(*gen.DO)
	return r
}
