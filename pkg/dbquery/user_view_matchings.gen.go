// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbquery

import (
	"context"
	"whale/pkg/models"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newUserViewMatching(db *gorm.DB, opts ...gen.DOOption) userViewMatching {
	_userViewMatching := userViewMatching{}

	_userViewMatching.userViewMatchingDo.UseDB(db, opts...)
	_userViewMatching.userViewMatchingDo.UseModel(&models.UserViewMatching{})

	tableName := _userViewMatching.userViewMatchingDo.TableName()
	_userViewMatching.ALL = field.NewAsterisk(tableName)
	_userViewMatching.ID = field.NewInt(tableName, "id")
	_userViewMatching.UserID = field.NewString(tableName, "user_id")
	_userViewMatching.ViewedMatchingIDs = field.NewField(tableName, "viewed_matching_ids")
	_userViewMatching.CreatedAt = field.NewTime(tableName, "created_at")

	_userViewMatching.fillFieldMap()

	return _userViewMatching
}

type userViewMatching struct {
	userViewMatchingDo userViewMatchingDo

	ALL               field.Asterisk
	ID                field.Int
	UserID            field.String
	ViewedMatchingIDs field.Field
	CreatedAt         field.Time

	fieldMap map[string]field.Expr
}

func (u userViewMatching) Table(newTableName string) *userViewMatching {
	u.userViewMatchingDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userViewMatching) As(alias string) *userViewMatching {
	u.userViewMatchingDo.DO = *(u.userViewMatchingDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userViewMatching) updateTableName(table string) *userViewMatching {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt(table, "id")
	u.UserID = field.NewString(table, "user_id")
	u.ViewedMatchingIDs = field.NewField(table, "viewed_matching_ids")
	u.CreatedAt = field.NewTime(table, "created_at")

	u.fillFieldMap()

	return u
}

func (u *userViewMatching) WithContext(ctx context.Context) IUserViewMatchingDo {
	return u.userViewMatchingDo.WithContext(ctx)
}

func (u userViewMatching) TableName() string { return u.userViewMatchingDo.TableName() }

func (u userViewMatching) Alias() string { return u.userViewMatchingDo.Alias() }

func (u *userViewMatching) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userViewMatching) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 4)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["viewed_matching_ids"] = u.ViewedMatchingIDs
	u.fieldMap["created_at"] = u.CreatedAt
}

func (u userViewMatching) clone(db *gorm.DB) userViewMatching {
	u.userViewMatchingDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userViewMatching) replaceDB(db *gorm.DB) userViewMatching {
	u.userViewMatchingDo.ReplaceDB(db)
	return u
}

type userViewMatchingDo struct{ gen.DO }

type IUserViewMatchingDo interface {
	gen.SubQuery
	Debug() IUserViewMatchingDo
	WithContext(ctx context.Context) IUserViewMatchingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserViewMatchingDo
	WriteDB() IUserViewMatchingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserViewMatchingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserViewMatchingDo
	Not(conds ...gen.Condition) IUserViewMatchingDo
	Or(conds ...gen.Condition) IUserViewMatchingDo
	Select(conds ...field.Expr) IUserViewMatchingDo
	Where(conds ...gen.Condition) IUserViewMatchingDo
	Order(conds ...field.Expr) IUserViewMatchingDo
	Distinct(cols ...field.Expr) IUserViewMatchingDo
	Omit(cols ...field.Expr) IUserViewMatchingDo
	Join(table schema.Tabler, on ...field.Expr) IUserViewMatchingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserViewMatchingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserViewMatchingDo
	Group(cols ...field.Expr) IUserViewMatchingDo
	Having(conds ...gen.Condition) IUserViewMatchingDo
	Limit(limit int) IUserViewMatchingDo
	Offset(offset int) IUserViewMatchingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserViewMatchingDo
	Unscoped() IUserViewMatchingDo
	Create(values ...*models.UserViewMatching) error
	CreateInBatches(values []*models.UserViewMatching, batchSize int) error
	Save(values ...*models.UserViewMatching) error
	First() (*models.UserViewMatching, error)
	Take() (*models.UserViewMatching, error)
	Last() (*models.UserViewMatching, error)
	Find() ([]*models.UserViewMatching, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserViewMatching, err error)
	FindInBatches(result *[]*models.UserViewMatching, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*models.UserViewMatching) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserViewMatchingDo
	Assign(attrs ...field.AssignExpr) IUserViewMatchingDo
	Joins(fields ...field.RelationField) IUserViewMatchingDo
	Preload(fields ...field.RelationField) IUserViewMatchingDo
	FirstOrInit() (*models.UserViewMatching, error)
	FirstOrCreate() (*models.UserViewMatching, error)
	FindByPage(offset int, limit int) (result []*models.UserViewMatching, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserViewMatchingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userViewMatchingDo) Debug() IUserViewMatchingDo {
	return u.withDO(u.DO.Debug())
}

func (u userViewMatchingDo) WithContext(ctx context.Context) IUserViewMatchingDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userViewMatchingDo) ReadDB() IUserViewMatchingDo {
	return u.Clauses(dbresolver.Read)
}

func (u userViewMatchingDo) WriteDB() IUserViewMatchingDo {
	return u.Clauses(dbresolver.Write)
}

func (u userViewMatchingDo) Session(config *gorm.Session) IUserViewMatchingDo {
	return u.withDO(u.DO.Session(config))
}

func (u userViewMatchingDo) Clauses(conds ...clause.Expression) IUserViewMatchingDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userViewMatchingDo) Returning(value interface{}, columns ...string) IUserViewMatchingDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userViewMatchingDo) Not(conds ...gen.Condition) IUserViewMatchingDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userViewMatchingDo) Or(conds ...gen.Condition) IUserViewMatchingDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userViewMatchingDo) Select(conds ...field.Expr) IUserViewMatchingDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userViewMatchingDo) Where(conds ...gen.Condition) IUserViewMatchingDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userViewMatchingDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IUserViewMatchingDo {
	return u.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (u userViewMatchingDo) Order(conds ...field.Expr) IUserViewMatchingDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userViewMatchingDo) Distinct(cols ...field.Expr) IUserViewMatchingDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userViewMatchingDo) Omit(cols ...field.Expr) IUserViewMatchingDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userViewMatchingDo) Join(table schema.Tabler, on ...field.Expr) IUserViewMatchingDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userViewMatchingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserViewMatchingDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userViewMatchingDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserViewMatchingDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userViewMatchingDo) Group(cols ...field.Expr) IUserViewMatchingDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userViewMatchingDo) Having(conds ...gen.Condition) IUserViewMatchingDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userViewMatchingDo) Limit(limit int) IUserViewMatchingDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userViewMatchingDo) Offset(offset int) IUserViewMatchingDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userViewMatchingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserViewMatchingDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userViewMatchingDo) Unscoped() IUserViewMatchingDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userViewMatchingDo) Create(values ...*models.UserViewMatching) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userViewMatchingDo) CreateInBatches(values []*models.UserViewMatching, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userViewMatchingDo) Save(values ...*models.UserViewMatching) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userViewMatchingDo) First() (*models.UserViewMatching, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserViewMatching), nil
	}
}

func (u userViewMatchingDo) Take() (*models.UserViewMatching, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserViewMatching), nil
	}
}

func (u userViewMatchingDo) Last() (*models.UserViewMatching, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserViewMatching), nil
	}
}

func (u userViewMatchingDo) Find() ([]*models.UserViewMatching, error) {
	result, err := u.DO.Find()
	return result.([]*models.UserViewMatching), err
}

func (u userViewMatchingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.UserViewMatching, err error) {
	buf := make([]*models.UserViewMatching, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userViewMatchingDo) FindInBatches(result *[]*models.UserViewMatching, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userViewMatchingDo) Attrs(attrs ...field.AssignExpr) IUserViewMatchingDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userViewMatchingDo) Assign(attrs ...field.AssignExpr) IUserViewMatchingDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userViewMatchingDo) Joins(fields ...field.RelationField) IUserViewMatchingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userViewMatchingDo) Preload(fields ...field.RelationField) IUserViewMatchingDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userViewMatchingDo) FirstOrInit() (*models.UserViewMatching, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserViewMatching), nil
	}
}

func (u userViewMatchingDo) FirstOrCreate() (*models.UserViewMatching, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.UserViewMatching), nil
	}
}

func (u userViewMatchingDo) FindByPage(offset int, limit int) (result []*models.UserViewMatching, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userViewMatchingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userViewMatchingDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userViewMatchingDo) Delete(models ...*models.UserViewMatching) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userViewMatchingDo) withDO(do gen.Dao) *userViewMatchingDo {
	u.DO = *do.(*gen.DO)
	return u
}
