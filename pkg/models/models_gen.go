// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CreateMatchingParam struct {
	TopicID  string     `json:"topicId"`
	AreaIds  []string   `json:"areaIds"`
	CityID   string     `json:"cityId"`
	Gender   Gender     `json:"gender"`
	Remark   *string    `json:"remark,omitempty"`
	Deadline *time.Time `json:"deadline,omitempty"`
}

type MatchingFilter struct {
	CreateBefore *time.Time     `json:"createBefore,omitempty"`
	CreateAfter  *time.Time     `json:"createAfter,omitempty"`
	TopicID      *string        `json:"topicId,omitempty"`
	State        *MatchingState `json:"state,omitempty"`
}

type Summary struct {
	Count int `json:"count"`
}

type UpdateMatchingParam struct {
	TopicID  *string    `json:"topicId,omitempty"`
	AreaIds  []string   `json:"areaIds,omitempty"`
	CityID   *string    `json:"cityId,omitempty"`
	Gender   *Gender    `json:"gender,omitempty"`
	Deadline *time.Time `json:"deadline,omitempty"`
}

type UserMatchingFilter struct {
	State *MatchingState `json:"state,omitempty"`
}

type ChatGroupState string

const (
	// 未创建
	ChatGroupStateUncreated ChatGroupState = "Uncreated"
	// 等待创建
	ChatGroupStateWaitingCreated ChatGroupState = "WaitingCreated"
	// 创建成功
	ChatGroupStateCreated ChatGroupState = "Created"
	// 创建失败
	ChatGroupStateFailed ChatGroupState = "Failed"
	// 已关闭
	ChatGroupStateClosed ChatGroupState = "Closed"
	// 已退出
	ChatGroupStateQuited ChatGroupState = "Quited"
)

var AllChatGroupState = []ChatGroupState{
	ChatGroupStateUncreated,
	ChatGroupStateWaitingCreated,
	ChatGroupStateCreated,
	ChatGroupStateFailed,
	ChatGroupStateClosed,
	ChatGroupStateQuited,
}

func (e ChatGroupState) IsValid() bool {
	switch e {
	case ChatGroupStateUncreated, ChatGroupStateWaitingCreated, ChatGroupStateCreated, ChatGroupStateFailed, ChatGroupStateClosed, ChatGroupStateQuited:
		return true
	}
	return false
}

func (e ChatGroupState) String() string {
	return string(e)
}

func (e *ChatGroupState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChatGroupState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChatGroupState", str)
	}
	return nil
}

func (e ChatGroupState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	GenderF Gender = "F"
	GenderM Gender = "M"
	GenderN Gender = "N"
)

var AllGender = []Gender{
	GenderF,
	GenderM,
	GenderN,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderF, GenderM, GenderN:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MatchingResultConfirmState string

const (
	// 未确认
	MatchingResultConfirmStateUnconfirmed MatchingResultConfirmState = "Unconfirmed"
	// 已确认
	MatchingResultConfirmStateConfirmed MatchingResultConfirmState = "Confirmed"
	// 已拒绝
	MatchingResultConfirmStateRejected MatchingResultConfirmState = "Rejected"
)

var AllMatchingResultConfirmState = []MatchingResultConfirmState{
	MatchingResultConfirmStateUnconfirmed,
	MatchingResultConfirmStateConfirmed,
	MatchingResultConfirmStateRejected,
}

func (e MatchingResultConfirmState) IsValid() bool {
	switch e {
	case MatchingResultConfirmStateUnconfirmed, MatchingResultConfirmStateConfirmed, MatchingResultConfirmStateRejected:
		return true
	}
	return false
}

func (e MatchingResultConfirmState) String() string {
	return string(e)
}

func (e *MatchingResultConfirmState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MatchingResultConfirmState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MatchingResultConfirmState", str)
	}
	return nil
}

func (e MatchingResultConfirmState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MatchingState string

const (
	// 匹配中
	MatchingStateMatching MatchingState = "Matching"
	// 匹配成功
	MatchingStateMatched MatchingState = "Matched"
	// 匹配失败
	MatchingStateFailed MatchingState = "Failed"
	// 匹配取消
	MatchingStateCanceled MatchingState = "Canceled"
	// 匹配超时
	MatchingStateTimeout MatchingState = "Timeout"
	// 匹配关闭
	MatchingStateClosed MatchingState = "Closed"
)

var AllMatchingState = []MatchingState{
	MatchingStateMatching,
	MatchingStateMatched,
	MatchingStateFailed,
	MatchingStateCanceled,
	MatchingStateTimeout,
	MatchingStateClosed,
}

func (e MatchingState) IsValid() bool {
	switch e {
	case MatchingStateMatching, MatchingStateMatched, MatchingStateFailed, MatchingStateCanceled, MatchingStateTimeout, MatchingStateClosed:
		return true
	}
	return false
}

func (e MatchingState) String() string {
	return string(e)
}

func (e *MatchingState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MatchingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MatchingState", str)
	}
	return nil
}

func (e MatchingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
