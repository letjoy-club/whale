// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Area struct {
	Code string `json:"code"`
}

func (Area) IsEntity() {}

type CalendarEvent struct {
	TopicID            string     `json:"topicId"`
	MatchedAt          time.Time  `json:"matchedAt"`
	FinishedAt         time.Time  `json:"finishedAt"`
	ChatGroupCreatedAt *time.Time `json:"chatGroupCreatedAt,omitempty"`
}

type ChatGroup struct {
	ID string `json:"id"`
}

func (ChatGroup) IsEntity() {}

type CreateMatchingInvitationParam struct {
	InviteeID string   `json:"inviteeId"`
	Remark    string   `json:"remark"`
	TopicID   string   `json:"topicId"`
	CityID    string   `json:"cityId"`
	AreaIds   []string `json:"areaIds"`
}

type CreateMatchingParam struct {
	TopicID  string     `json:"topicId"`
	AreaIds  []string   `json:"areaIds"`
	CityID   string     `json:"cityId"`
	Gender   Gender     `json:"gender"`
	Remark   *string    `json:"remark,omitempty"`
	Deadline *time.Time `json:"deadline,omitempty"`
}

type MatchingFilter struct {
	Before  *time.Time     `json:"before,omitempty"`
	After   *time.Time     `json:"after,omitempty"`
	TopicID *string        `json:"topicId,omitempty"`
	State   *MatchingState `json:"state,omitempty"`
	CityID  *string        `json:"cityId,omitempty"`
	UserID  *string        `json:"userId,omitempty"`
	// 通用关键词, u_ 开头搜用户, t_ 开头搜话题, m_ 开头搜匹配, 6 个数字搜地区
	Keyword *string `json:"keyword,omitempty"`
}

type MatchingInvitationFilter struct {
	UserID *string    `json:"userId,omitempty"`
	Before *time.Time `json:"before,omitempty"`
	After  *time.Time `json:"after,omitempty"`
}

type MatchingResultFilter struct {
	UserID *string    `json:"userId,omitempty"`
	Before *time.Time `json:"before,omitempty"`
	After  *time.Time `json:"after,omitempty"`
}

type ReviewMatchingParam struct {
	ToUserID string `json:"toUserId"`
	Score    int    `json:"score"`
	Comment  string `json:"comment"`
}

type SimpleAvatarUser struct {
	Avatar   string `json:"avatar"`
	Nickname string `json:"nickname"`
}

type Summary struct {
	Count int `json:"count"`
}

type Topic struct {
	ID string `json:"id"`
	// 匹配中用户
	RecentUsers []*SimpleAvatarUser `json:"recentUsers"`
	// 话题下的匹配数量
	MatchingNum int `json:"matchingNum"`
	// 话题下的大致匹配数量，范围是 [9, 999]，显示时建议给 + 表示有更多的数量。9-999 数值展示时，对原数据进行增量处理
	FuzzyMatchingNum int `json:"fuzzyMatchingNum"`
}

func (Topic) IsEntity() {}

type UpdateMatchingInvitationParam struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	TopicID   *string    `json:"topicId,omitempty"`
	InviteeID *string    `json:"inviteeId,omitempty"`
	CityID    *string    `json:"cityId,omitempty"`
	Remark    *string    `json:"remark,omitempty"`
}

type UpdateMatchingParam struct {
	TopicID   *string    `json:"topicId,omitempty"`
	AreaIds   []string   `json:"areaIds,omitempty"`
	CityID    *string    `json:"cityId,omitempty"`
	Gender    *Gender    `json:"gender,omitempty"`
	Remark    *string    `json:"remark,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Deadline  *time.Time `json:"deadline,omitempty"`
}

type UpdateMatchingQuotaParam struct {
	Total  *int `json:"total,omitempty"`
	Remain *int `json:"remain,omitempty"`
}

type User struct {
	ID            string         `json:"id"`
	MatchingQuota *MatchingQuota `json:"matchingQuota"`
}

func (User) IsEntity() {}

type UserConfirmState struct {
	UserID string                     `json:"userId"`
	State  MatchingResultConfirmState `json:"state"`
}

type UserMatchingCalenderParam struct {
	Before      time.Time `json:"before"`
	After       time.Time `json:"after"`
	OtherUserID *string   `json:"otherUserId,omitempty"`
}

type UserMatchingFilter struct {
	State  *MatchingState  `json:"state,omitempty"`
	States []MatchingState `json:"states,omitempty"`
}

type UserMatchingInTheDayParam struct {
	// 日期格式 20060102
	DayStr      string  `json:"dayStr"`
	OtherUserID *string `json:"otherUserId,omitempty"`
}

type ChatGroupState string

const (
	// 未创建
	ChatGroupStateUncreated ChatGroupState = "Uncreated"
	// 等待创建
	ChatGroupStateWaitingCreated ChatGroupState = "WaitingCreated"
	// 创建成功
	ChatGroupStateCreated ChatGroupState = "Created"
	// 创建失败
	ChatGroupStateFailed ChatGroupState = "Failed"
	// 已关闭
	ChatGroupStateClosed ChatGroupState = "Closed"
	// 已退出
	ChatGroupStateQuited ChatGroupState = "Quited"
)

var AllChatGroupState = []ChatGroupState{
	ChatGroupStateUncreated,
	ChatGroupStateWaitingCreated,
	ChatGroupStateCreated,
	ChatGroupStateFailed,
	ChatGroupStateClosed,
	ChatGroupStateQuited,
}

func (e ChatGroupState) IsValid() bool {
	switch e {
	case ChatGroupStateUncreated, ChatGroupStateWaitingCreated, ChatGroupStateCreated, ChatGroupStateFailed, ChatGroupStateClosed, ChatGroupStateQuited:
		return true
	}
	return false
}

func (e ChatGroupState) String() string {
	return string(e)
}

func (e *ChatGroupState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ChatGroupState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ChatGroupState", str)
	}
	return nil
}

func (e ChatGroupState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Gender string

const (
	// 女
	GenderF Gender = "F"
	// 男
	GenderM Gender = "M"
	// 不限
	GenderN Gender = "N"
)

var AllGender = []Gender{
	GenderF,
	GenderM,
	GenderN,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderF, GenderM, GenderN:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type InvitationConfirmState string

const (
	InvitationConfirmStateConfirmed   InvitationConfirmState = "Confirmed"
	InvitationConfirmStateRejected    InvitationConfirmState = "Rejected"
	InvitationConfirmStateUnconfirmed InvitationConfirmState = "Unconfirmed"
)

var AllInvitationConfirmState = []InvitationConfirmState{
	InvitationConfirmStateConfirmed,
	InvitationConfirmStateRejected,
	InvitationConfirmStateUnconfirmed,
}

func (e InvitationConfirmState) IsValid() bool {
	switch e {
	case InvitationConfirmStateConfirmed, InvitationConfirmStateRejected, InvitationConfirmStateUnconfirmed:
		return true
	}
	return false
}

func (e InvitationConfirmState) String() string {
	return string(e)
}

func (e *InvitationConfirmState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = InvitationConfirmState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid InvitationConfirmState", str)
	}
	return nil
}

func (e InvitationConfirmState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MatchingResultConfirmState string

const (
	// 未确认
	MatchingResultConfirmStateUnconfirmed MatchingResultConfirmState = "Unconfirmed"
	// 已确认
	MatchingResultConfirmStateConfirmed MatchingResultConfirmState = "Confirmed"
	// 已拒绝
	MatchingResultConfirmStateRejected MatchingResultConfirmState = "Rejected"
)

var AllMatchingResultConfirmState = []MatchingResultConfirmState{
	MatchingResultConfirmStateUnconfirmed,
	MatchingResultConfirmStateConfirmed,
	MatchingResultConfirmStateRejected,
}

func (e MatchingResultConfirmState) IsValid() bool {
	switch e {
	case MatchingResultConfirmStateUnconfirmed, MatchingResultConfirmStateConfirmed, MatchingResultConfirmStateRejected:
		return true
	}
	return false
}

func (e MatchingResultConfirmState) String() string {
	return string(e)
}

func (e *MatchingResultConfirmState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MatchingResultConfirmState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MatchingResultConfirmState", str)
	}
	return nil
}

func (e MatchingResultConfirmState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MatchingState string

const (
	// 匹配中
	MatchingStateMatching MatchingState = "Matching"
	// 匹配成功
	MatchingStateMatched MatchingState = "Matched"
	// 匹配失败
	MatchingStateFailed MatchingState = "Failed"
	// 匹配取消
	MatchingStateCanceled MatchingState = "Canceled"
	// 匹配超时
	MatchingStateTimeout MatchingState = "Timeout"
	// 匹配关闭
	MatchingStateFinished MatchingState = "Finished"
)

var AllMatchingState = []MatchingState{
	MatchingStateMatching,
	MatchingStateMatched,
	MatchingStateFailed,
	MatchingStateCanceled,
	MatchingStateTimeout,
	MatchingStateFinished,
}

func (e MatchingState) IsValid() bool {
	switch e {
	case MatchingStateMatching, MatchingStateMatched, MatchingStateFailed, MatchingStateCanceled, MatchingStateTimeout, MatchingStateFinished:
		return true
	}
	return false
}

func (e MatchingState) String() string {
	return string(e)
}

func (e *MatchingState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MatchingState(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MatchingState", str)
	}
	return nil
}

func (e MatchingState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ResultCreatedBy string

const (
	// 由匹配系统创建的结果
	ResultCreatedByMatching ResultCreatedBy = "Matching"
	// 由邀请创建的结果
	ResultCreatedByInvitation ResultCreatedBy = "Invitation"
)

var AllResultCreatedBy = []ResultCreatedBy{
	ResultCreatedByMatching,
	ResultCreatedByInvitation,
}

func (e ResultCreatedBy) IsValid() bool {
	switch e {
	case ResultCreatedByMatching, ResultCreatedByInvitation:
		return true
	}
	return false
}

func (e ResultCreatedBy) String() string {
	return string(e)
}

func (e *ResultCreatedBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResultCreatedBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResultCreatedBy", str)
	}
	return nil
}

func (e ResultCreatedBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
