// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package smew

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// AddEventProposalGroupMemberResponse is returned by AddEventProposalGroupMember on success.
type AddEventProposalGroupMemberResponse struct {
	// 【群组】新增群组成员
	AddGroupMember string `json:"addGroupMember"`
}

// GetAddGroupMember returns AddEventProposalGroupMemberResponse.AddGroupMember, and is useful for accessing the field via an interface.
func (v *AddEventProposalGroupMemberResponse) GetAddGroupMember() string { return v.AddGroupMember }

// CloseEventProposalGroupResponse is returned by CloseEventProposalGroup on success.
type CloseEventProposalGroupResponse struct {
	// 【群组】关闭群组
	CloseGroup string `json:"closeGroup"`
}

// GetCloseGroup returns CloseEventProposalGroupResponse.CloseGroup, and is useful for accessing the field via an interface.
func (v *CloseEventProposalGroupResponse) GetCloseGroup() string { return v.CloseGroup }

// CloseGroupResponse is returned by CloseGroup on success.
type CloseGroupResponse struct {
	// 【群组】关闭群组
	CloseGroup string `json:"closeGroup"`
}

// GetCloseGroup returns CloseGroupResponse.CloseGroup, and is useful for accessing the field via an interface.
func (v *CloseGroupResponse) GetCloseGroup() string { return v.CloseGroup }

// CreateChatGroupResponse is returned by CreateChatGroup on success.
type CreateChatGroupResponse struct {
	// 【群组】创建匹配群组
	CreateGroup string `json:"createGroup"`
}

// GetCreateGroup returns CreateChatGroupResponse.CreateGroup, and is useful for accessing the field via an interface.
func (v *CreateChatGroupResponse) GetCreateGroup() string { return v.CreateGroup }

type CreateEventProposalGroupParam struct {
	// 多人活动ID
	EventProposalId string `json:"eventProposalId"`
	// 话题ID
	TopicId string `json:"topicId"`
	// 发起人ID
	UserId string `json:"userId"`
}

// GetEventProposalId returns CreateEventProposalGroupParam.EventProposalId, and is useful for accessing the field via an interface.
func (v *CreateEventProposalGroupParam) GetEventProposalId() string { return v.EventProposalId }

// GetTopicId returns CreateEventProposalGroupParam.TopicId, and is useful for accessing the field via an interface.
func (v *CreateEventProposalGroupParam) GetTopicId() string { return v.TopicId }

// GetUserId returns CreateEventProposalGroupParam.UserId, and is useful for accessing the field via an interface.
func (v *CreateEventProposalGroupParam) GetUserId() string { return v.UserId }

// CreateEventProposalGroupResponse is returned by CreateEventProposalGroup on success.
type CreateEventProposalGroupResponse struct {
	// 【群组】创建多人活动群组
	CreateEventProposalGroup string `json:"createEventProposalGroup"`
}

// GetCreateEventProposalGroup returns CreateEventProposalGroupResponse.CreateEventProposalGroup, and is useful for accessing the field via an interface.
func (v *CreateEventProposalGroupResponse) GetCreateEventProposalGroup() string {
	return v.CreateEventProposalGroup
}

type CreateMotionGroupParam struct {
	// 匹配结果ID
	ResultId int `json:"resultId"`
	// 话题ID
	TopicId string `json:"topicId"`
	// 连接发起方ID
	FromUserId string `json:"fromUserId"`
	// 连接发起方Motion ID
	FromMotionId string `json:"fromMotionId"`
	// 连接发起方ID
	ToUserId string `json:"toUserId"`
	// 连接发起方Motion ID
	ToMotionId string `json:"toMotionId"`
}

// GetResultId returns CreateMotionGroupParam.ResultId, and is useful for accessing the field via an interface.
func (v *CreateMotionGroupParam) GetResultId() int { return v.ResultId }

// GetTopicId returns CreateMotionGroupParam.TopicId, and is useful for accessing the field via an interface.
func (v *CreateMotionGroupParam) GetTopicId() string { return v.TopicId }

// GetFromUserId returns CreateMotionGroupParam.FromUserId, and is useful for accessing the field via an interface.
func (v *CreateMotionGroupParam) GetFromUserId() string { return v.FromUserId }

// GetFromMotionId returns CreateMotionGroupParam.FromMotionId, and is useful for accessing the field via an interface.
func (v *CreateMotionGroupParam) GetFromMotionId() string { return v.FromMotionId }

// GetToUserId returns CreateMotionGroupParam.ToUserId, and is useful for accessing the field via an interface.
func (v *CreateMotionGroupParam) GetToUserId() string { return v.ToUserId }

// GetToMotionId returns CreateMotionGroupParam.ToMotionId, and is useful for accessing the field via an interface.
func (v *CreateMotionGroupParam) GetToMotionId() string { return v.ToMotionId }

// CreateMotionGroupResponse is returned by CreateMotionGroup on success.
type CreateMotionGroupResponse struct {
	// 【群组】创建Motion群组
	CreateMotionGroup string `json:"createMotionGroup"`
}

// GetCreateMotionGroup returns CreateMotionGroupResponse.CreateMotionGroup, and is useful for accessing the field via an interface.
func (v *CreateMotionGroupResponse) GetCreateMotionGroup() string { return v.CreateMotionGroup }

// CreateTimGroupResponse is returned by CreateTimGroup on success.
type CreateTimGroupResponse struct {
	// 【群组】TIM群组创建——对内部群组适用
	CreateTimGroup string `json:"createTimGroup"`
}

// GetCreateTimGroup returns CreateTimGroupResponse.CreateTimGroup, and is useful for accessing the field via an interface.
func (v *CreateTimGroupResponse) GetCreateTimGroup() string { return v.CreateTimGroup }

type GroupCloseReason string

const (
	GroupCloseReasonUserclose     GroupCloseReason = "UserClose"
	GroupCloseReasonUserreject    GroupCloseReason = "UserReject"
	GroupCloseReasonTimeout       GroupCloseReason = "Timeout"
	GroupCloseReasonAccepttimeout GroupCloseReason = "AcceptTimeout"
	GroupCloseReasonSystemclose   GroupCloseReason = "SystemClose"
)

// GroupMemberLeaveResponse is returned by GroupMemberLeave on success.
type GroupMemberLeaveResponse struct {
	// 【群组】群组成员离开，用于群聊结束
	GroupMemberLeave string `json:"groupMemberLeave"`
}

// GetGroupMemberLeave returns GroupMemberLeaveResponse.GroupMemberLeave, and is useful for accessing the field via an interface.
func (v *GroupMemberLeaveResponse) GetGroupMemberLeave() string { return v.GroupMemberLeave }

// RemoveEventProposalGroupMemberResponse is returned by RemoveEventProposalGroupMember on success.
type RemoveEventProposalGroupMemberResponse struct {
	// 【群组】移除群组成员
	RemoveGroupMember string `json:"removeGroupMember"`
}

// GetRemoveGroupMember returns RemoveEventProposalGroupMemberResponse.RemoveGroupMember, and is useful for accessing the field via an interface.
func (v *RemoveEventProposalGroupMemberResponse) GetRemoveGroupMember() string {
	return v.RemoveGroupMember
}

// SendTextMessageResponse is returned by SendTextMessage on success.
type SendTextMessageResponse struct {
	// 【消息】发送文字消息
	SendTextMessage string `json:"sendTextMessage"`
}

// GetSendTextMessage returns SendTextMessageResponse.SendTextMessage, and is useful for accessing the field via an interface.
func (v *SendTextMessageResponse) GetSendTextMessage() string { return v.SendTextMessage }

// __AddEventProposalGroupMemberInput is used internally by genqlient
type __AddEventProposalGroupMemberInput struct {
	GroupId string `json:"groupId"`
	UserId  string `json:"userId"`
}

// GetGroupId returns __AddEventProposalGroupMemberInput.GroupId, and is useful for accessing the field via an interface.
func (v *__AddEventProposalGroupMemberInput) GetGroupId() string { return v.GroupId }

// GetUserId returns __AddEventProposalGroupMemberInput.UserId, and is useful for accessing the field via an interface.
func (v *__AddEventProposalGroupMemberInput) GetUserId() string { return v.UserId }

// __CloseEventProposalGroupInput is used internally by genqlient
type __CloseEventProposalGroupInput struct {
	GroupId string           `json:"groupId"`
	Reason  GroupCloseReason `json:"reason"`
}

// GetGroupId returns __CloseEventProposalGroupInput.GroupId, and is useful for accessing the field via an interface.
func (v *__CloseEventProposalGroupInput) GetGroupId() string { return v.GroupId }

// GetReason returns __CloseEventProposalGroupInput.Reason, and is useful for accessing the field via an interface.
func (v *__CloseEventProposalGroupInput) GetReason() GroupCloseReason { return v.Reason }

// __CloseGroupInput is used internally by genqlient
type __CloseGroupInput struct {
	GroupId string           `json:"groupId"`
	Reason  GroupCloseReason `json:"reason"`
}

// GetGroupId returns __CloseGroupInput.GroupId, and is useful for accessing the field via an interface.
func (v *__CloseGroupInput) GetGroupId() string { return v.GroupId }

// GetReason returns __CloseGroupInput.Reason, and is useful for accessing the field via an interface.
func (v *__CloseGroupInput) GetReason() GroupCloseReason { return v.Reason }

// __CreateChatGroupInput is used internally by genqlient
type __CreateChatGroupInput struct {
	ResultId  int      `json:"resultId"`
	TopicId   string   `json:"topicId"`
	MemberIds []string `json:"memberIds"`
}

// GetResultId returns __CreateChatGroupInput.ResultId, and is useful for accessing the field via an interface.
func (v *__CreateChatGroupInput) GetResultId() int { return v.ResultId }

// GetTopicId returns __CreateChatGroupInput.TopicId, and is useful for accessing the field via an interface.
func (v *__CreateChatGroupInput) GetTopicId() string { return v.TopicId }

// GetMemberIds returns __CreateChatGroupInput.MemberIds, and is useful for accessing the field via an interface.
func (v *__CreateChatGroupInput) GetMemberIds() []string { return v.MemberIds }

// __CreateEventProposalGroupInput is used internally by genqlient
type __CreateEventProposalGroupInput struct {
	Param CreateEventProposalGroupParam `json:"param"`
}

// GetParam returns __CreateEventProposalGroupInput.Param, and is useful for accessing the field via an interface.
func (v *__CreateEventProposalGroupInput) GetParam() CreateEventProposalGroupParam { return v.Param }

// __CreateMotionGroupInput is used internally by genqlient
type __CreateMotionGroupInput struct {
	Param CreateMotionGroupParam `json:"param"`
}

// GetParam returns __CreateMotionGroupInput.Param, and is useful for accessing the field via an interface.
func (v *__CreateMotionGroupInput) GetParam() CreateMotionGroupParam { return v.Param }

// __CreateTimGroupInput is used internally by genqlient
type __CreateTimGroupInput struct {
	ChatGroupId string `json:"chatGroupId"`
}

// GetChatGroupId returns __CreateTimGroupInput.ChatGroupId, and is useful for accessing the field via an interface.
func (v *__CreateTimGroupInput) GetChatGroupId() string { return v.ChatGroupId }

// __GroupMemberLeaveInput is used internally by genqlient
type __GroupMemberLeaveInput struct {
	GroupId string `json:"groupId"`
	UserId  string `json:"userId"`
}

// GetGroupId returns __GroupMemberLeaveInput.GroupId, and is useful for accessing the field via an interface.
func (v *__GroupMemberLeaveInput) GetGroupId() string { return v.GroupId }

// GetUserId returns __GroupMemberLeaveInput.UserId, and is useful for accessing the field via an interface.
func (v *__GroupMemberLeaveInput) GetUserId() string { return v.UserId }

// __RemoveEventProposalGroupMemberInput is used internally by genqlient
type __RemoveEventProposalGroupMemberInput struct {
	GroupId   string `json:"groupId"`
	UserId    string `json:"userId"`
	RemovedBy string `json:"removedBy"`
}

// GetGroupId returns __RemoveEventProposalGroupMemberInput.GroupId, and is useful for accessing the field via an interface.
func (v *__RemoveEventProposalGroupMemberInput) GetGroupId() string { return v.GroupId }

// GetUserId returns __RemoveEventProposalGroupMemberInput.UserId, and is useful for accessing the field via an interface.
func (v *__RemoveEventProposalGroupMemberInput) GetUserId() string { return v.UserId }

// GetRemovedBy returns __RemoveEventProposalGroupMemberInput.RemovedBy, and is useful for accessing the field via an interface.
func (v *__RemoveEventProposalGroupMemberInput) GetRemovedBy() string { return v.RemovedBy }

// __SendTextMessageInput is used internally by genqlient
type __SendTextMessageInput struct {
	ChatGroupId string `json:"chatGroupId"`
	Sender      string `json:"sender"`
	Text        string `json:"text"`
}

// GetChatGroupId returns __SendTextMessageInput.ChatGroupId, and is useful for accessing the field via an interface.
func (v *__SendTextMessageInput) GetChatGroupId() string { return v.ChatGroupId }

// GetSender returns __SendTextMessageInput.Sender, and is useful for accessing the field via an interface.
func (v *__SendTextMessageInput) GetSender() string { return v.Sender }

// GetText returns __SendTextMessageInput.Text, and is useful for accessing the field via an interface.
func (v *__SendTextMessageInput) GetText() string { return v.Text }

// The query or mutation executed by AddEventProposalGroupMember.
const AddEventProposalGroupMember_Operation = `
mutation AddEventProposalGroupMember ($groupId: String!, $userId: String!) {
	addGroupMember(groupId: $groupId, userId: $userId)
}
`

func AddEventProposalGroupMember(
	ctx context.Context,
	client graphql.Client,
	groupId string,
	userId string,
) (*AddEventProposalGroupMemberResponse, error) {
	req := &graphql.Request{
		OpName: "AddEventProposalGroupMember",
		Query:  AddEventProposalGroupMember_Operation,
		Variables: &__AddEventProposalGroupMemberInput{
			GroupId: groupId,
			UserId:  userId,
		},
	}
	var err error

	var data AddEventProposalGroupMemberResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CloseEventProposalGroup.
const CloseEventProposalGroup_Operation = `
mutation CloseEventProposalGroup ($groupId: String!, $reason: GroupCloseReason!) {
	closeGroup(groupId: $groupId, reason: $reason)
}
`

func CloseEventProposalGroup(
	ctx context.Context,
	client graphql.Client,
	groupId string,
	reason GroupCloseReason,
) (*CloseEventProposalGroupResponse, error) {
	req := &graphql.Request{
		OpName: "CloseEventProposalGroup",
		Query:  CloseEventProposalGroup_Operation,
		Variables: &__CloseEventProposalGroupInput{
			GroupId: groupId,
			Reason:  reason,
		},
	}
	var err error

	var data CloseEventProposalGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CloseGroup.
const CloseGroup_Operation = `
mutation CloseGroup ($groupId: String!, $reason: GroupCloseReason!) {
	closeGroup(groupId: $groupId, reason: $reason)
}
`

func CloseGroup(
	ctx context.Context,
	client graphql.Client,
	groupId string,
	reason GroupCloseReason,
) (*CloseGroupResponse, error) {
	req := &graphql.Request{
		OpName: "CloseGroup",
		Query:  CloseGroup_Operation,
		Variables: &__CloseGroupInput{
			GroupId: groupId,
			Reason:  reason,
		},
	}
	var err error

	var data CloseGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateChatGroup.
const CreateChatGroup_Operation = `
mutation CreateChatGroup ($resultId: Int!, $topicId: String!, $memberIds: [String!]!) {
	createGroup(resultId: $resultId, topicId: $topicId, memberIds: $memberIds)
}
`

func CreateChatGroup(
	ctx context.Context,
	client graphql.Client,
	resultId int,
	topicId string,
	memberIds []string,
) (*CreateChatGroupResponse, error) {
	req := &graphql.Request{
		OpName: "CreateChatGroup",
		Query:  CreateChatGroup_Operation,
		Variables: &__CreateChatGroupInput{
			ResultId:  resultId,
			TopicId:   topicId,
			MemberIds: memberIds,
		},
	}
	var err error

	var data CreateChatGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateEventProposalGroup.
const CreateEventProposalGroup_Operation = `
mutation CreateEventProposalGroup ($param: CreateEventProposalGroupParam!) {
	createEventProposalGroup(param: $param)
}
`

func CreateEventProposalGroup(
	ctx context.Context,
	client graphql.Client,
	param CreateEventProposalGroupParam,
) (*CreateEventProposalGroupResponse, error) {
	req := &graphql.Request{
		OpName: "CreateEventProposalGroup",
		Query:  CreateEventProposalGroup_Operation,
		Variables: &__CreateEventProposalGroupInput{
			Param: param,
		},
	}
	var err error

	var data CreateEventProposalGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateMotionGroup.
const CreateMotionGroup_Operation = `
mutation CreateMotionGroup ($param: CreateMotionGroupParam!) {
	createMotionGroup(param: $param)
}
`

func CreateMotionGroup(
	ctx context.Context,
	client graphql.Client,
	param CreateMotionGroupParam,
) (*CreateMotionGroupResponse, error) {
	req := &graphql.Request{
		OpName: "CreateMotionGroup",
		Query:  CreateMotionGroup_Operation,
		Variables: &__CreateMotionGroupInput{
			Param: param,
		},
	}
	var err error

	var data CreateMotionGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by CreateTimGroup.
const CreateTimGroup_Operation = `
mutation CreateTimGroup ($chatGroupId: String!) {
	createTimGroup(chatGroupId: $chatGroupId)
}
`

func CreateTimGroup(
	ctx context.Context,
	client graphql.Client,
	chatGroupId string,
) (*CreateTimGroupResponse, error) {
	req := &graphql.Request{
		OpName: "CreateTimGroup",
		Query:  CreateTimGroup_Operation,
		Variables: &__CreateTimGroupInput{
			ChatGroupId: chatGroupId,
		},
	}
	var err error

	var data CreateTimGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by GroupMemberLeave.
const GroupMemberLeave_Operation = `
mutation GroupMemberLeave ($groupId: String!, $userId: String!) {
	groupMemberLeave(groupId: $groupId, userId: $userId)
}
`

func GroupMemberLeave(
	ctx context.Context,
	client graphql.Client,
	groupId string,
	userId string,
) (*GroupMemberLeaveResponse, error) {
	req := &graphql.Request{
		OpName: "GroupMemberLeave",
		Query:  GroupMemberLeave_Operation,
		Variables: &__GroupMemberLeaveInput{
			GroupId: groupId,
			UserId:  userId,
		},
	}
	var err error

	var data GroupMemberLeaveResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by RemoveEventProposalGroupMember.
const RemoveEventProposalGroupMember_Operation = `
mutation RemoveEventProposalGroupMember ($groupId: String!, $userId: String!, $removedBy: String!) {
	removeGroupMember(groupId: $groupId, userId: $userId, removedBy: $removedBy)
}
`

func RemoveEventProposalGroupMember(
	ctx context.Context,
	client graphql.Client,
	groupId string,
	userId string,
	removedBy string,
) (*RemoveEventProposalGroupMemberResponse, error) {
	req := &graphql.Request{
		OpName: "RemoveEventProposalGroupMember",
		Query:  RemoveEventProposalGroupMember_Operation,
		Variables: &__RemoveEventProposalGroupMemberInput{
			GroupId:   groupId,
			UserId:    userId,
			RemovedBy: removedBy,
		},
	}
	var err error

	var data RemoveEventProposalGroupMemberResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by SendTextMessage.
const SendTextMessage_Operation = `
mutation SendTextMessage ($chatGroupId: String!, $sender: String!, $text: String!) {
	sendTextMessage(chatGroupId: $chatGroupId, sender: $sender, text: $text)
}
`

func SendTextMessage(
	ctx context.Context,
	client graphql.Client,
	chatGroupId string,
	sender string,
	text string,
) (*SendTextMessageResponse, error) {
	req := &graphql.Request{
		OpName: "SendTextMessage",
		Query:  SendTextMessage_Operation,
		Variables: &__SendTextMessageInput{
			ChatGroupId: chatGroupId,
			Sender:      sender,
			Text:        text,
		},
	}
	var err error

	var data SendTextMessageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
