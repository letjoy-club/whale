// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package hoopoe

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// GetAreaArea includes the requested fields of the GraphQL type Area.
type GetAreaArea struct {
	// 地区代码
	Code string `json:"code"`
	// 名称
	Name string `json:"name"`
	// 层级
	Depth int `json:"depth"`
}

// GetCode returns GetAreaArea.Code, and is useful for accessing the field via an interface.
func (v *GetAreaArea) GetCode() string { return v.Code }

// GetName returns GetAreaArea.Name, and is useful for accessing the field via an interface.
func (v *GetAreaArea) GetName() string { return v.Name }

// GetDepth returns GetAreaArea.Depth, and is useful for accessing the field via an interface.
func (v *GetAreaArea) GetDepth() int { return v.Depth }

// GetAreaResponse is returned by GetArea on success.
type GetAreaResponse struct {
	// 【通用】根据地区代码查询地区信息
	Area GetAreaArea `json:"area"`
}

// GetArea returns GetAreaResponse.Area, and is useful for accessing the field via an interface.
func (v *GetAreaResponse) GetArea() GetAreaArea { return v.Area }

// GetAvatarByIDsGetUserByIdsUser includes the requested fields of the GraphQL type User.
type GetAvatarByIDsGetUserByIdsUser struct {
	// 用户ID
	Id string `json:"id"`
	// 昵称
	Nickname string `json:"nickname"`
	// 头像URL
	Avatar string `json:"avatar"`
}

// GetId returns GetAvatarByIDsGetUserByIdsUser.Id, and is useful for accessing the field via an interface.
func (v *GetAvatarByIDsGetUserByIdsUser) GetId() string { return v.Id }

// GetNickname returns GetAvatarByIDsGetUserByIdsUser.Nickname, and is useful for accessing the field via an interface.
func (v *GetAvatarByIDsGetUserByIdsUser) GetNickname() string { return v.Nickname }

// GetAvatar returns GetAvatarByIDsGetUserByIdsUser.Avatar, and is useful for accessing the field via an interface.
func (v *GetAvatarByIDsGetUserByIdsUser) GetAvatar() string { return v.Avatar }

// GetAvatarByIDsResponse is returned by GetAvatarByIDs on success.
type GetAvatarByIDsResponse struct {
	// 【用户】根据ID批量获取
	GetUserByIds []GetAvatarByIDsGetUserByIdsUser `json:"getUserByIds"`
}

// GetGetUserByIds returns GetAvatarByIDsResponse.GetUserByIds, and is useful for accessing the field via an interface.
func (v *GetAvatarByIDsResponse) GetGetUserByIds() []GetAvatarByIDsGetUserByIdsUser {
	return v.GetUserByIds
}

// GetTopicResponse is returned by GetTopic on success.
type GetTopicResponse struct {
	// 【话题】话题查询
	Topic GetTopicTopic `json:"topic"`
}

// GetTopic returns GetTopicResponse.Topic, and is useful for accessing the field via an interface.
func (v *GetTopicResponse) GetTopic() GetTopicTopic { return v.Topic }

// GetTopicTopic includes the requested fields of the GraphQL type Topic.
type GetTopicTopic struct {
	// 话题ID
	Id string `json:"id"`
}

// GetId returns GetTopicTopic.Id, and is useful for accessing the field via an interface.
func (v *GetTopicTopic) GetId() string { return v.Id }

// GetUserByIDsGetUserByIdsUser includes the requested fields of the GraphQL type User.
type GetUserByIDsGetUserByIdsUser struct {
	// 用户ID
	Id string `json:"id"`
	// 性别：男——M；女——F
	Gender string `json:"gender"`
}

// GetId returns GetUserByIDsGetUserByIdsUser.Id, and is useful for accessing the field via an interface.
func (v *GetUserByIDsGetUserByIdsUser) GetId() string { return v.Id }

// GetGender returns GetUserByIDsGetUserByIdsUser.Gender, and is useful for accessing the field via an interface.
func (v *GetUserByIDsGetUserByIdsUser) GetGender() string { return v.Gender }

// GetUserByIDsResponse is returned by GetUserByIDs on success.
type GetUserByIDsResponse struct {
	// 【用户】根据ID批量获取
	GetUserByIds []GetUserByIDsGetUserByIdsUser `json:"getUserByIds"`
}

// GetGetUserByIds returns GetUserByIDsResponse.GetUserByIds, and is useful for accessing the field via an interface.
func (v *GetUserByIDsResponse) GetGetUserByIds() []GetUserByIDsGetUserByIdsUser {
	return v.GetUserByIds
}

// __GetAreaInput is used internally by genqlient
type __GetAreaInput struct {
	Id string `json:"id"`
}

// GetId returns __GetAreaInput.Id, and is useful for accessing the field via an interface.
func (v *__GetAreaInput) GetId() string { return v.Id }

// __GetAvatarByIDsInput is used internally by genqlient
type __GetAvatarByIDsInput struct {
	Ids []string `json:"ids"`
}

// GetIds returns __GetAvatarByIDsInput.Ids, and is useful for accessing the field via an interface.
func (v *__GetAvatarByIDsInput) GetIds() []string { return v.Ids }

// __GetTopicInput is used internally by genqlient
type __GetTopicInput struct {
	Id string `json:"id"`
}

// GetId returns __GetTopicInput.Id, and is useful for accessing the field via an interface.
func (v *__GetTopicInput) GetId() string { return v.Id }

// __GetUserByIDsInput is used internally by genqlient
type __GetUserByIDsInput struct {
	Ids []string `json:"ids"`
}

// GetIds returns __GetUserByIDsInput.Ids, and is useful for accessing the field via an interface.
func (v *__GetUserByIDsInput) GetIds() []string { return v.Ids }

func GetArea(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetAreaResponse, error) {
	req := &graphql.Request{
		OpName: "GetArea",
		Query: `
query GetArea ($id: AreaCode!) {
	area(code: $id) {
		code
		name
		depth
	}
}
`,
		Variables: &__GetAreaInput{
			Id: id,
		},
	}
	var err error

	var data GetAreaResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetAvatarByIDs(
	ctx context.Context,
	client graphql.Client,
	ids []string,
) (*GetAvatarByIDsResponse, error) {
	req := &graphql.Request{
		OpName: "GetAvatarByIDs",
		Query: `
query GetAvatarByIDs ($ids: [String!]!) {
	getUserByIds(ids: $ids) {
		id
		nickname
		avatar
	}
}
`,
		Variables: &__GetAvatarByIDsInput{
			Ids: ids,
		},
	}
	var err error

	var data GetAvatarByIDsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetTopic(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*GetTopicResponse, error) {
	req := &graphql.Request{
		OpName: "GetTopic",
		Query: `
query GetTopic ($id: String!) {
	topic(id: $id) {
		id
	}
}
`,
		Variables: &__GetTopicInput{
			Id: id,
		},
	}
	var err error

	var data GetTopicResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetUserByIDs(
	ctx context.Context,
	client graphql.Client,
	ids []string,
) (*GetUserByIDsResponse, error) {
	req := &graphql.Request{
		OpName: "GetUserByIDs",
		Query: `
query GetUserByIDs ($ids: [String!]!) {
	getUserByIds(ids: $ids) {
		id
		gender
	}
}
`,
		Variables: &__GetUserByIDsInput{
			Ids: ids,
		},
	}
	var err error

	var data GetUserByIDsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
