scalar Time
scalar AreaCode

directive @adminOnly on FIELD_DEFINITION

extend type User @key(fields: "id") {
  id: String! @external
  matchingQuota: MatchingQuota!
}

extend type Topic @key(fields: "id") {
  id: String! @external
}

extend type Area @key(fields: "code") {
  code: AreaCode! @external
}

type MatchingOfTopic {
  userId: String!
  gender: Gender!
  remark: String!
  areaIds: [String!]!
  cityId: String!
  createdAt: Time!

  # query
  user: User!
  city: Area!
  areas: [Area!]!
}

type MatchingPreview {
  userId: String!
  remark: String!

  user: User!
}

enum ResultCreatedBy {
  "由匹配系统创建的结果"
  Matching
  "由邀请创建的结果"
  Invitation
}

type Matching @key(fields: "id") {
  id: String!
  topicId: String!
  userId: String!

  areaIds: [String!]!
  cityId: String!
  gender: Gender!
  state: MatchingState!

  rejectedUserIds: [String!]! @adminOnly
  inChatGroup: Boolean!
  remark: String!

  deadline: Time! @adminOnly
  updatedAt: Time! @adminOnly
  createdAt: Time!

  # query
  matchingResult: MatchingResult

  user: User!
  topic: Topic!
  areas: [Area!]!
  city: Area!
}

enum Gender {
  "女"
  F
  "男"
  M
  "不限"
  N
}

enum ChatGroupState {
  "未创建"
  Uncreated

  "等待创建"
  WaitingCreated

  "创建成功"
  Created

  "创建失败"
  Failed

  "已关闭"
  Closed

  "已退出"
  Quited
}

enum MatchingState {
  "匹配中"
  Matching

  "匹配成功"
  Matched

  "匹配失败"
  Failed

  "匹配取消"
  Canceled

  "匹配超时"
  Timeout

  "匹配关闭"
  Closed
}

type MatchingResult {
  "id 只有管理员可以查看"
  id: Int! @adminOnly

  matchingIds: [String!]!
  topicId: String!
  userIds: [String!]!
  confirmStates: [MatchingResultConfirmState!]!

  chatGroupId: String!
  chatGroupState: ChatGroupState!

  updatedAt: Time! @adminOnly
  createdAt: Time!
  closed: Boolean!
  createdBy: ResultCreatedBy! @adminOnly

  # query
  users: [User!]!
  matchingPreviews: [MatchingPreview!]!
  topic: Topic!
}

enum MatchingResultConfirmState {
  "未确认"
  Unconfirmed

  "已确认"
  Confirmed

  "已拒绝"
  Rejected
}

type MatchingQuota @key(fields: "userId") {
  userId: String!
  remain: Int!
  total: Int!
  createdAt: Time! @adminOnly
  updatedAt: Time! @adminOnly
}

type MatchingResultConfirmAction {
  id: Int!
  matchingResultId: Int!
  userId: String!
  confirmed: Boolean!
  createdAt: Time!
}

input GraphQLPaginator {
  size: Int
  page: Int
}

input MatchingFilter {
  createBefore: Time
  createAfter: Time
  topicId: String
  state: MatchingState
}

type Summary {
  count: Int!
}

enum InvitationConfirmState {
  Confirmed
  Rejected
  Unconfirmed
}

type MatchingInvitation {
  id: String!
  userId: String!
  inviteeId: String!
  topicId: String!
  remark: String!
  cityId: String!
  areaIds: [String!]!

  matchingResultId: Int! @adminOnly
  matchingIds: [String!]!

  confirmState: InvitationConfirmState!
  confirmedAt: Time @adminOnly
  createdAt: Time!
  updatedAt: Time! @adminOnly

  # query
  invitee: User!
  topic: Topic!
  areas: [Area!]!
  city: Area!
  user: User!
  matchingResult: MatchingResult
}

type Query {
  "【匹配系统】查看匹配"
  matching(id: String!): Matching!

  "【匹配系统】匹配查询，管理端用"
  matchings(filter: MatchingFilter, paginator: GraphQLPaginator): [Matching!]!

  "【匹配系统】匹配总量，管理端用"
  matchingsCount(filter: MatchingFilter): Summary!

  "【匹配系统】用户匹配"
  userMatchings(userId: String, filter: UserMatchingFilter, paginator: GraphQLPaginator): [Matching!]!

  "【匹配系统】用户匹配数量"
  userMatchingsCount(userId: String, filter: UserMatchingFilter): Summary!

  "【匹配系统】预览话题下的用匹配"
  previewMatchingsOfTopic(cityId: String!, topicId: String!, limit: Int): [MatchingOfTopic!]!

  "【匹配系统】我的邀请"
  invitations(userId: String, paginator: GraphQLPaginator): [MatchingInvitation!]!

  "【匹配系统】查看匹配邀请"
  invitation(userId: String, id: String!): MatchingInvitation!

  "【匹配系统】我的邀请数量"
  invitationsCount(userId: String): Summary!

  "【匹配系统】待确认邀请（邀请我的）"
  unconfirmedInvitations(userId: String): [MatchingInvitation!]

  "【匹配系统】待确认邀请数量"
  unconfirmedInvitationCount(userId: String): Summary!
}

input CreateMatchingParam {
  topicId: String!

  areaIds: [String!]!
  cityId: String!
  gender: Gender!

  remark: String

  deadline: Time
}

input UpdateMatchingParam {
  topicId: String

  areaIds: [String!]
  cityId: String
  gender: Gender
  remark: String

  deadline: Time
}

input UserMatchingFilter {
  state: MatchingState
}

input CreateMatchingInvitationParam {
  inviteeId: String!
  remark: String!
  topicId: String!
  cityId: String!
  areaIds: [String!]!
}

type Mutation {
  "【匹配系统】创建匹配"
  createMatching(userId: String, param: CreateMatchingParam!): Matching!

  "【匹配系统】邀请用户进行活动"
  createMatchingInvitation(userId: String, param: CreateMatchingInvitationParam!): MatchingInvitation!

  "【匹配系统】取消邀请"
  cancelMatchingInvitation(invitationId: String!): String

  "【匹配系统】确认/拒绝用户活动邀请"
  confirmMatchingInvitation(userId: String, invitationId: String!, confirm: Boolean!): String

  "【匹配系统】更新匹配，管理端使用"
  updateMatching(matchingId: String!, param: UpdateMatchingParam!): Matching!

  "【匹配系统】确认/拒绝匹配结果"
  confirmMatchingResult(userId: String, matchingId: String!, reject: Boolean!): String

  "【匹配系统】取消匹配"
  cancelMatching(matchingId: String!): String

  "【匹配系统】开始匹配，管理端使用"
  startMatching: String

  "【匹配系统】尝试创建聊天室"
  checkAndCreateChatGroup(matchingId: String!): String
}
