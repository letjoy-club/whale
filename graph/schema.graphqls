scalar Time
scalar AreaCode

directive @adminOnly on FIELD_DEFINITION

extend type TopicOptionConfig @key(fields: "topicId") {
  topicId: String! @external
}

extend type User @key(fields: "id") {
  id: String! @external
  matchingQuota: MatchingQuota!
}

extend type Topic @key(fields: "id") {
  id: String! @external

  # query
  "匹配中用户"
  recentUsers(cityId: String): [SimpleAvatarUser!]!
  "话题下的匹配数量"
  matchingNum(cityId: String): Int!

  "话题下的大致匹配数量，范围是 [9, 999]，显示时建议给 + 表示有更多的数量。9-999 数值展示时，对原数据进行增量处理"
  fuzzyMatchingNum(cityId: String): Int!
}

extend type Area @key(fields: "code") {
  code: AreaCode! @external
}

extend type ChatGroup @key(fields: "id") {
  id: String! @external
}

extend type LevelRights @key(fields: "level") {
  level: Int! @external
  matchingQuota: Int!
  matchingDurationConstraint: Int!
}

type EvaluatorResult {
  score: Int!
  timeScore: Int!
  properties: [Int!]!
  failedReason: String!
}

type SimpleAvatarUser {
  avatar: String!
  nickname: String!
}

type MatchingOfTopic {
  userId: String!
  gender: Gender!
  remark: String!
  areaIds: [String!]!
  cityId: String!
  createdAt: Time!

  # query
  user: User!
  city: Area!
  areas: [Area!]!
}

type MatchingPreview {
  userId: String!
  remark: String!
  properties: [MatchingProperty!]!
  dayRange: [String!]!
  preferredPeriods: [DatePeriod!]!
  topicOptionConfig: TopicOptionConfig

  user: User!
}

enum ResultCreatedBy {
  "由匹配系统创建的结果"
  Matching
  "由邀请创建的结果"
  Invitation
  "由匹配邀约创建的结果"
  Offer
}

enum DatePeriod {
  "不限"
  Unlimited
  "周末"
  Weekend
  "周末下午"
  WeekendAfternoon
  "周末晚上"
  WeekendNight
  "工作日"
  Workday
  "工作日下午"
  WorkdayAfternoon
  "工作日晚上"
  WorkdayNight
}

type Matching @key(fields: "id") {
  id: String!
  topicId: String!
  userId: String!

  areaIds: [String!]!
  cityId: String!
  gender: Gender!
  state: MatchingState!

  rejectedUserIds: [String!]! @adminOnly
  inChatGroup: Boolean!
  remark: String!

  "特定日期区间，格式 20060102"
  dayRange: [String!]!
  "优先时间段"
  preferredPeriods: [DatePeriod!]!
  "其它键值对属性"
  properties: [MatchingProperty!]!

  deadline: Time! @adminOnly
  updatedAt: Time! @adminOnly
  createdAt: Time!

  # query
  matchingResult: MatchingResult
  reviewed: Boolean!

  viewCount: Int!
  likeCount: Int!

  user: User!
  topic: Topic!
  areas: [Area!]!
  city: Area!
}

type MatchingProperty {
  id: String!
  values: [String!]!
}

enum Gender {
  "女"
  F
  "男"
  M
  "不限"
  N
}

enum ChatGroupState {
  "未创建"
  Uncreated

  "等待创建"
  WaitingCreated

  "创建成功"
  Created

  "创建失败"
  Failed

  "已关闭"
  Closed

  "已退出"
  Quited
}

enum MatchingState {
  "匹配中"
  Matching

  "匹配成功"
  Matched

  "匹配失败"
  Failed

  "匹配取消"
  Canceled

  "匹配超时"
  Timeout

  "匹配关闭"
  Finished
}

type UserConfirmState {
  userId: String!
  state: MatchingResultConfirmState!
}

type MatchingResult {
  "id 只有管理员可以查看"
  id: Int! @adminOnly

  matchingIds: [String!]!
  topicId: String!
  userIds: [String!]!
  confirmStates: [MatchingResultConfirmState!]!
  userConfirmStates: [UserConfirmState!]!

  chatGroupId: String!
  chatGroupState: ChatGroupState!

  updatedAt: Time! @adminOnly
  createdAt: Time!

  matchingScore: Int! @adminOnly
  "是否关闭，如果有任何用户退出匹配，即 MatchingResult 视为关闭"
  closed: Boolean!
  "完成时间，取第一个用户标记匹配已完成的时间"
  finishedAt: Time
  createdBy: ResultCreatedBy! @adminOnly

  # query
  users: [User!]!
  matchingPreviews: [MatchingPreview!]!
  topic: Topic!
  chatGroup: ChatGroup
  matchingDegree: Int!
}

enum MatchingResultConfirmState {
  "未确认"
  Unconfirmed

  "已确认"
  Confirmed

  "已拒绝"
  Rejected
}

type MatchingQuota @key(fields: "userId") {
  userId: String!
  remain: Int!
  total: Int!
  matchingNum: Int!
  createdAt: Time! @adminOnly
  updatedAt: Time! @adminOnly
}

type MatchingResultConfirmAction {
  id: Int!
  matchingResultId: Int!
  userId: String!
  confirmed: Boolean!
  createdAt: Time!
}

input GraphQLPaginator {
  size: Int
  page: Int
}

input MatchingFilter {
  before: Time
  after: Time
  topicId: String
  state: MatchingState
  cityId: String
  userId: String
  "通用关键词, u_ 开头搜用户, t_ 开头搜话题, m_ 开头搜匹配, 6 个数字搜地区"
  keyword: String
}

type Summary {
  count: Int!
}

enum InvitationConfirmState {
  Confirmed
  Rejected
  Unconfirmed
}

type MatchingInvitation {
  id: String!
  userId: String!
  inviteeId: String!
  topicId: String!
  remark: String!
  cityId: String!
  areaIds: [String!]!

  matchingResultId: Int! @adminOnly
  matchingIds: [String!]!

  confirmState: InvitationConfirmState!
  confirmedAt: Time @adminOnly
  createdAt: Time!
  updatedAt: Time! @adminOnly

  # query
  invitee: User!
  topic: Topic!
  areas: [Area!]!
  city: Area!
  user: User!
  matchingResult: MatchingResult
}

type HotTopicsInArea {
  cityId: String!
  updatedAt: Time!

  # query
  topicMetrics: [TopicMetrics!]!
  city: Area!
}

type TopicMetrics {
  id: String!
  matched: Int!
  matching: Int!

  # query
  heat: Int!
  topic: Topic!
}

type CityTopics {
  cityId: String!
  topicIds: [String!]!
  updatedAt: Time!

  # query
  topics: [Topic!]!
  city: Area!
}

input UserMatchingCalenderParam {
  before: Time!
  after: Time!
  otherUserId: String
}

input UserMatchingInTheDayParam {
  "日期格式 20060102"
  dayStr: String!
  otherUserId: String
}

type CalendarEvent {
  topicId: String!
  matchedAt: Time!
  finishedAt: Time!
  chatGroupCreatedAt: Time
}

input MatchingInvitationFilter {
  userId: String
  before: Time
  after: Time
}

input MatchingResultFilter {
  userId: String
  before: Time
  after: Time
}

type Query {
  "【匹配系统】内部专有"
  chatGroupByResultId(resultId: Int!): ChatGroup!
}

input UserMatchingFilter {
  state: MatchingState @deprecated(reason: "请使用 states")
  states: [MatchingState!]
}

input CreateMatchingInvitationParam {
  inviteeId: String!
  remark: String!
  topicId: String!
  cityId: String!
  areaIds: [String!]!
}

input ReviewMatchingParam {
  toUserId: String!
  score: Int!
  comment: String!
}

input UpdateMatchingQuotaParam {
  total: Int
  remain: Int
}

input UpdateMatchingInvitationParam {
  createdAt: Time
  topicId: String
  inviteeId: String
  cityId: String
  remark: String
}

type Mutation {
  "【匹配系统】尝试创建聊天室，管理端使用"
  checkAndCreateChatGroup(matchingId: String!): String

  "【匹配系统】分析话题热度，管理端使用"
  refreshTopicMetrics: String
}
