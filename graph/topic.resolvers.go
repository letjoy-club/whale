package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.28

import (
	"context"
	"whale/pkg/dbquery"
	"whale/pkg/models"

	"github.com/letjoy-club/mida-tool/dbutil"
	"github.com/letjoy-club/mida-tool/graphqlutil"
	"github.com/letjoy-club/mida-tool/midacode"
	"github.com/letjoy-club/mida-tool/midacontext"
)

// UpdateCityTopics is the resolver for the updateCityTopics field.
func (r *mutationResolver) UpdateCityTopics(ctx context.Context, cityID string, topicIds []string) (*models.CityTopics, error) {
	token := midacontext.GetClientToken(ctx)
	if !token.IsAdmin() {
		return nil, midacode.ErrNotPermitted
	}
	db := dbutil.GetDB(ctx)
	CityTopics := dbquery.Use(db).CityTopics
	_, err := CityTopics.WithContext(ctx).Where(CityTopics.CityID.Eq(cityID)).UpdateSimple(
		CityTopics.TopicIDs.Value(graphqlutil.ElementList[string](topicIds)),
	)
	if err != nil {
		return nil, err
	}
	return CityTopics.WithContext(ctx).Where(CityTopics.CityID.Eq(cityID)).Take()
}

// CityTopics is the resolver for the cityTopics field.
func (r *queryResolver) CityTopics(ctx context.Context, cityID string) (*models.CityTopics, error) {
	db := dbutil.GetDB(ctx)
	CityTopics := dbquery.Use(db).CityTopics

	cityTopics, err := CityTopics.WithContext(ctx).Where(CityTopics.CityID.Eq(cityID)).Take()
	if err != nil {
		cityTopics, err = CityTopics.WithContext(ctx).Where(CityTopics.CityID.Eq("310100")).Take()
		return cityTopics, err
	}
	return cityTopics, nil
}

// CitiesTopics is the resolver for the citiesTopics field.
func (r *queryResolver) CitiesTopics(ctx context.Context, paginator *graphqlutil.GraphQLPaginator) ([]*models.CityTopics, error) {
	token := midacontext.GetClientToken(ctx)
	if !token.IsAdmin() {
		return nil, midacode.ErrNotPermitted
	}
	db := dbutil.GetDB(ctx)
	CityTopics := dbquery.Use(db).CityTopics
	pager := graphqlutil.GetPager(paginator)

	return CityTopics.WithContext(ctx).Limit(pager.Limit()).Offset(pager.Offset()).Find()
}

// CitiesTopicsCount is the resolver for the citiesTopicsCount field.
func (r *queryResolver) CitiesTopicsCount(ctx context.Context) (*models.Summary, error) {
	token := midacontext.GetClientToken(ctx)
	if !token.IsAdmin() {
		return nil, midacode.ErrNotPermitted
	}
	db := dbutil.GetDB(ctx)
	CityTopics := dbquery.Use(db).CityTopics
	count, err := CityTopics.WithContext(ctx).Count()
	return &models.Summary{Count: int(count)}, err
}

// HotTopics is the resolver for the hotTopics field.
func (r *queryResolver) HotTopicsInArea(ctx context.Context, cityID *string) (*models.HotTopicsInArea, error) {
	db := dbutil.GetDB(ctx)
	HotTopicsInArea := dbquery.Use(db).HotTopicsInArea

	query := HotTopicsInArea.WithContext(ctx)
	city := "310100"
	if cityID != nil {
		city = *cityID
	}
	query = query.Where(HotTopicsInArea.CityID.Eq(city))

	hotTopic, err := query.Take()
	if err != nil {
		city = "310100"
		query = HotTopicsInArea.WithContext(ctx)
		query = query.Where(HotTopicsInArea.CityID.Eq(city))
		hotTopic, err = query.Take()
	}
	return hotTopic, err
}

// HotTopics is the resolver for the hotTopics field.
func (r *queryResolver) HotTopics(ctx context.Context, paginator *graphqlutil.GraphQLPaginator) ([]*models.HotTopicsInArea, error) {
	token := midacontext.GetClientToken(ctx)
	if !token.IsAdmin() {
		return nil, midacode.ErrNotPermitted
	}
	pager := graphqlutil.GetPager(paginator)
	db := dbutil.GetDB(ctx)
	HotTopicsInArea := dbquery.Use(db).HotTopicsInArea
	return HotTopicsInArea.WithContext(ctx).Limit(pager.Limit()).Offset(pager.Offset()).Find()
}

// HotTopicsCount is the resolver for the hotTopicsCount field.
func (r *queryResolver) HotTopicsCount(ctx context.Context) (*models.Summary, error) {
	token := midacontext.GetClientToken(ctx)
	if !token.IsAdmin() {
		return nil, midacode.ErrNotPermitted
	}
	db := dbutil.GetDB(ctx)
	HotTopicsInArea := dbquery.Use(db).HotTopicsInArea
	count, err := HotTopicsInArea.WithContext(ctx).Count()
	return &models.Summary{Count: int(count)}, err
}
